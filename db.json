{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style-dark.styl","path":"css/style-dark.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/css/share.styl","path":"share/css/share.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","path":"share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","path":"share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","path":"share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","path":"share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/js/social-share.js","path":"share/js/social-share.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/share/js/qrcode.js","path":"share/js/qrcode.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","path":"img/bg-dark.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/BlueLake/README.en.md","hash":"d63a2af0b9d371e3756bc65e688a8919a3593c25","modified":1564675013410},{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1564675013410},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1564675013414},{"_id":"themes/BlueLake/README.md","hash":"d1bd3a2dd111d674870b1312fc9348a6950ecfce","modified":1564675013410},{"_id":"themes/BlueLake/_config.yml","hash":"9a9eac155bffe9c21bdd1490936a6b18e9053eff","modified":1605945041206},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1564675013381},{"_id":"themes/BlueLake/.git/config","hash":"2cae29a06bbe4294fa78136833031d42847dd7e6","modified":1564675013381},{"_id":"themes/BlueLake/.git/index","hash":"f32c6abed47c1de7f074836b21cc5b23a92f0a8e","modified":1602992853381},{"_id":"themes/BlueLake/.git/packed-refs","hash":"17f7f18a9fe469642095714d02d09a93d566b859","modified":1564675013381},{"_id":"source/_posts/About-Me.md","hash":"f020c01532cbdf46583c89d689f568540013814a","modified":1603037888576},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1564674981922},{"_id":"source/_posts/IdeaRegisterCode.md","hash":"218e0b571e6f64a1e384d80044bf19d016d444d3","modified":1595777425388},{"_id":"source/_posts/GIL.md","hash":"dfd26528c1f4dd4619f8987f0a491beca4fd98ff","modified":1569066242176},{"_id":"source/_posts/ECMAScript基础之预编译【变量提升】.md","hash":"3e3779c6cf4d65b4865ff0ec5ef74ebd0a528595","modified":1565622043795},{"_id":"source/_posts/Git-分布式版本控制系统.md","hash":"9153f8eb3c3f1e6d3c75fbe129f7bee2cf9ee5c4","modified":1601735156112},{"_id":"source/_posts/RDBMS事务.md","hash":"0eb618d59d5f69e4ea57a0ea0085a910e5b47a66","modified":1569069009018},{"_id":"source/_posts/RDBMS的视图.md","hash":"66b0c230c560ac88a37ab0b0003d27dcfc90599b","modified":1569067449769},{"_id":"source/_posts/RDBMS索引.md","hash":"bb77fde4e324bd4c0eeca1350fb5a83d184951f8","modified":1571301098561},{"_id":"source/_posts/SQL语句.md","hash":"48c4c1b1c41ec4ba3daee78e9e5c218a57559c66","modified":1569057637900},{"_id":"source/_posts/javaScript变量声明方式.md","hash":"a93c7b9e4043b4941241e8760556f1f2e56badfb","modified":1565621946686},{"_id":"source/_posts/Linux主要目录.md","hash":"c99be4b7cc1a14e24dcd096d175edf26a9f1b856","modified":1571303961312},{"_id":"source/_posts/linux基本命令.md","hash":"855c90eb454fd2d309fa61bc805e9030b8de5331","modified":1602681214534},{"_id":"source/_posts/上传项目到github.md","hash":"d55fb112e4d70b5b3901fdd8cb056cc923181019","modified":1569847527559},{"_id":"source/_posts/mongodb常用的数据库操作命令.md","hash":"b03fcd3f889589adc875967d7b9c301ba9ccca88","modified":1566641795175},{"_id":"source/_posts/使用hexo搭建个人博客并部署到github.md","hash":"a20547e80e28914ec1f7a740c445046801271b6a","modified":1565455218310},{"_id":"source/_posts/深拷贝和浅拷贝.md","hash":"43ba2aadd6f4559c8a21214dac5ca148e023a2da","modified":1570874127546},{"_id":"source/_posts/markdown语法编写博客文章.md","hash":"30fd31dc18ed2f0c0d412f3f28bcc28df6c317a8","modified":1565182526464},{"_id":"source/_posts/计算机网络第一章-概述.md","hash":"badbcde8be2ae375535f005d91c5c4aece9222f3","modified":1604591562761},{"_id":"source/_posts/计算机网络.md","hash":"d1178267e1b363cd6f417f86f53269bbcedb1f55","modified":1604326636232},{"_id":"source/_posts/常用设计模式.md","hash":"00456fb0e8f09c3ccee12718c8da6511340d0a68","modified":1595777547267},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"9a6f8a63f5cdd7f579bf8310398301a759c2a6d2","modified":1564675013410},{"_id":"themes/BlueLake/languages/en.yml","hash":"a0f828574b5e90b83eeca4c5a80958459113f2b4","modified":1564675013410},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"420566a5a200394e45841a2e2223b3fb9625680d","modified":1564675013410},{"_id":"source/_posts/账户管理.md","hash":"9d70110322b2ca588b6c27cec9d5a540fac45ecf","modified":1569077524346},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"bb4b241b45840234922ad4a170d42c9582c0c2ce","modified":1564675013410},{"_id":"themes/BlueLake/languages/ko.yml","hash":"27bac975b25998012fe7317b2cf3e6c253bc2ab2","modified":1564675013410},{"_id":"themes/BlueLake/languages/tr.yml","hash":"89a834a6b6616ac7289968cace76e2fbf0335787","modified":1564675013410},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"7cb3fd09b74c39fbbed2b0e079d453c45b2085bf","modified":1564675013410},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1564675013414},{"_id":"themes/BlueLake/layout/base.jade","hash":"7ffc6e45a3693ce5c80ce8eb37fb394b4b3de453","modified":1564675013414},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1564675013414},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"f0ce05b7f99d7e8a37ce899b4875e5b03133cf2c","modified":1564675013410},{"_id":"themes/BlueLake/source/favicon.ico","hash":"cf1c07c6378b8fb73d7c257ca614d12b276202de","modified":1564696281266},{"_id":"themes/BlueLake/layout/index.jade","hash":"ec2a52c8e38c0f164efe591540d39602f82925b1","modified":1564675013414},{"_id":"themes/BlueLake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1564675013414},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1564675013414},{"_id":"themes/BlueLake/layout/post.jade","hash":"fcca4a1bb09cc5b7f1328f5871ef2b5d36abcb49","modified":1564675013414},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1564674981922},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1564674981922},{"_id":"themes/BlueLake/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1564674981922},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1564674981922},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1564674981922},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1564674981922},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1564674981922},{"_id":"themes/BlueLake/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1564674981922},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1564674981922},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"2b17c070e47c77a18e923bd615659f205b695464","modified":1564675013381},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1564674981926},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1564674981922},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1564674981922},{"_id":"source/_posts/markdown语法编写博客文章/流程图.png","hash":"8f69b226e9c651bf1dcf28162e8cd33f39496ffa","modified":1564762471394},{"_id":"source/_posts/上传项目到github/上传项目到github1.png","hash":"176d293142914d182658e89a41b67c79e1ff6be6","modified":1567268806738},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1564675013410},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"e8e98c99b8f9e5f260403903b875a2f08bfb2577","modified":1564675013410},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"4a89bf43d750e0f53d2c2223057679e87baf411d","modified":1564675013410},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"7736811d57583aa792f966ed260fb1e9b5a8e505","modified":1564675013410},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1564675013410},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1564675013410},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1564675013410},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1564675013410},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"ebde5da62af045c5ff36882bbae08757c48c0cae","modified":1564675013410},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1564675013410},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1564675013414},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1564675013414},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1564675013414},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"095cd4eb2346c07dd30b166e7318d6e78449bd84","modified":1564675013410},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1602990578282},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1564675013414},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1564675013414},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1564675013414},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1564675013414},{"_id":"themes/BlueLake/source/css/highlight-dark.styl","hash":"e6079d1bfdb68b37b111bccc08e4f7d2be9f5eaa","modified":1564675013414},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1564675013418},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1564675013418},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1564675013414},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1564675013418},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1564675013414},{"_id":"themes/BlueLake/source/css/style-dark.styl","hash":"68cb3f84977f08a2c92cd95a2017894768ab6c2d","modified":1564675013414},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1564675013422},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1564675013422},{"_id":"themes/BlueLake/source/css/style.styl","hash":"cab2b8f1797da5ad9b9dcd83ed95d6dd7fc33a7c","modified":1564675013414},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1564675013422},{"_id":"source/_posts/使用hexo搭建个人博客并部署到github/github2.png","hash":"dbacd1e287b3e2eb500eacc8e5c6a8b696447c1b","modified":1564844236936},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"9804585b9b7fb6e7e14519304108a3ebe1ad7225","modified":1565452881252},{"_id":"themes/BlueLake/.git/objects/pack/pack-e04202ccbabe5955ded054772b79b92926500caf.idx","hash":"26d9275a6e1192ea7567ca70e55ce3d6dbeeb439","modified":1564675013225},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"7bf89b9f4d5033e80a60b21c825849f8cfbe38a6","modified":1564675013381},{"_id":"source/_posts/mongodb常用的数据库操作命令/options.png","hash":"09d4ba03acb73a482e52172a217f67756951a596","modified":1565184559933},{"_id":"themes/BlueLake/source/share/css/share.styl","hash":"dea3b7a6adb17969e57e5c3d71876245016be21a","modified":1564675013422},{"_id":"themes/BlueLake/source/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1564675013422},{"_id":"themes/BlueLake/source/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1564675013422},{"_id":"themes/BlueLake/source/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1564675013422},{"_id":"themes/BlueLake/source/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1564675013422},{"_id":"themes/BlueLake/source/share/js/social-share.js","hash":"9bfe34fe7691833e90815c5c862545bde581cf29","modified":1564675013422},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"2b17c070e47c77a18e923bd615659f205b695464","modified":1564675013381},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1564675013381},{"_id":"source/_posts/使用hexo搭建个人博客并部署到github/github1.png","hash":"b5cc3b089f1cdfdcb4422b3c2b91bc07477a5655","modified":1564844214396},{"_id":"themes/BlueLake/source/share/js/qrcode.js","hash":"9caa0d9a9ba4409a3f77540a1b15a7617aeb28e8","modified":1564675013422},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"2b17c070e47c77a18e923bd615659f205b695464","modified":1564675013381},{"_id":"source/_posts/markdown语法编写博客文章/bz16.jpg","hash":"1d6136f62187998481e5d7c80e0281498500329a","modified":1559061729293},{"_id":"themes/BlueLake/.git/objects/pack/pack-e04202ccbabe5955ded054772b79b92926500caf.pack","hash":"ec8190cabb1a2dc38b25642e94a845f9c8d24001","modified":1564675013225},{"_id":"themes/BlueLake/source/img/bg-dark.jpg","hash":"60c87ae89f70cfda13e5816ab974705ded65a315","modified":1559061749629},{"_id":"public/计算机网络.html","hash":"5803e1bcfa06317b82ca94781b3fad7f79e42904","modified":1606059561800},{"_id":"public/IdeaRegisterCode.html","hash":"54798eb9d4c4fd716a6410b8f14845735dc3af57","modified":1606059561800},{"_id":"public/账户管理.html","hash":"2e260383258e2eeac345d5958967eb2764c8b209","modified":1606059561801},{"_id":"public/Linux主要目录.html","hash":"d1018fdd1d87cfd7ac7d0d8042ed4fa63966f0c2","modified":1606059561801},{"_id":"public/RDBMS索引.html","hash":"1f0e0f198e1339ce74056d408595cd790099fd84","modified":1606059561801},{"_id":"public/RDBMS事务.html","hash":"eaba1625734c3a3a0cebb46bc53b2b8f18f40be3","modified":1606059561801},{"_id":"public/RDBMS的视图.html","hash":"c3c31e7886faa22bb29d3fe6d3e336cb07bb1815","modified":1606059561801},{"_id":"public/About-Me.html","hash":"aefb1638f1cd0666dd77d804d379652d9c98c9af","modified":1606059561802},{"_id":"public/archives/index.html","hash":"2e25bb3145e35c8fe3c4ddb79afb8b676ac81857","modified":1606059561802},{"_id":"public/archives/page/2/index.html","hash":"5f5dc01279661e4b9a6ef15eb3fb2d497f5efc9a","modified":1606059561802},{"_id":"public/archives/page/3/index.html","hash":"828aab5a4d1a2834ea49fd955c4af64928fb0996","modified":1606059561802},{"_id":"public/archives/2019/index.html","hash":"1c939f0061a2458a8278aabb66b11bab411f5409","modified":1606059561802},{"_id":"public/archives/2019/page/2/index.html","hash":"c82c3f3d881306ce3f6b2658b3ffbf459154d54d","modified":1606059561802},{"_id":"public/archives/2019/06/index.html","hash":"54cbe68ace422ad7e675afb29fdbd0dd009a36fa","modified":1606059561802},{"_id":"public/archives/2019/07/index.html","hash":"0e37eaa07a126ce58ea1a04394059e2e21a44005","modified":1606059561802},{"_id":"public/archives/2019/08/index.html","hash":"a217d5ee8955bb765546a915691aac251b1c05fd","modified":1606059561802},{"_id":"public/archives/2019/09/index.html","hash":"945c8c115f88624a1723827d35d3cdf16276e242","modified":1606059561802},{"_id":"public/archives/2020/index.html","hash":"11b21f0491de0dd6baa7fa6927b0b3cddb3e865f","modified":1606059561804},{"_id":"public/archives/2020/07/index.html","hash":"5032b8265c8ae4d38699a39412ae08964d683b64","modified":1606059561804},{"_id":"public/archives/2020/11/index.html","hash":"7779b0a43024f6d2fa82472918fab27e3437bab0","modified":1606059561804},{"_id":"public/tags/About/index.html","hash":"26495ba5171681e92c3730b70da68fc747286d7d","modified":1606059561804},{"_id":"public/tags/其他/index.html","hash":"1bf124d8c2b0640edc2531828be0aaab9fc42253","modified":1606059561804},{"_id":"public/tags/python/index.html","hash":"85aac8a26993cbff14dd9cd0f55ba143887055cf","modified":1606059561804},{"_id":"public/tags/javaScript/index.html","hash":"7f3360e5323fb84d894063effaee14d0c8a67ace","modified":1606059561804},{"_id":"public/tags/RDBMS/index.html","hash":"8a3f024e02a9b53bbebd8cab53d8008dbf3980ae","modified":1606059561804},{"_id":"public/tags/linux/index.html","hash":"00fec6d36d18042ac32b2bb8ebf5cd01c4aaa27b","modified":1606059561804},{"_id":"public/tags/git/index.html","hash":"cc4f1319d680d087fc6debeac53e00f59232f917","modified":1606059561804},{"_id":"public/tags/mongodb/index.html","hash":"25885c78d7726b404c9b31b5fb5345b7f8249463","modified":1606059561804},{"_id":"public/tags/nodejs/index.html","hash":"18bb946426e27357d85c85f82db65e332f594f1a","modified":1606059561804},{"_id":"public/tags/Hexo/index.html","hash":"f7da7c2dbb2f2ba818fc69f85a2113c8c3337006","modified":1606059561805},{"_id":"public/tags/计算机网络/index.html","hash":"56fb26fec4e303f0c9fd5289018771105ac1d380","modified":1606059561805},{"_id":"public/tags/读书笔记/index.html","hash":"ff02e7fb43793d32ef8c7f9f6904bd7700a6792f","modified":1606059561805},{"_id":"public/tags/markdown/index.html","hash":"841e3d148a97a113a4b0bca87853abc673118db7","modified":1606059561805},{"_id":"public/tags/设计模式/index.html","hash":"56e7483ac842a7e51ea69201f9f7d48357d43b8e","modified":1606059561805},{"_id":"public/page/2/index.html","hash":"dcd044ed0f2099922bb12b508ca6c6a86bd3138e","modified":1606059561805},{"_id":"public/page/3/index.html","hash":"837830f386c77ddac60d4f00a5246c97f19b422f","modified":1606059561805},{"_id":"public/page/4/index.html","hash":"46b36addbd46143349765a57745ddd251277c579","modified":1606059561805},{"_id":"public/计算机网络第一章-概述.html","hash":"b9d8a4f6050035045b992e2b814ba33ba882baa9","modified":1606059561805},{"_id":"public/常用设计模式.html","hash":"a53d8c1017ee9b927dd8999029787ebdaf8fa319","modified":1606059561805},{"_id":"public/深拷贝和浅拷贝.html","hash":"745617d69da8742b494da1b7dc8ff94f9083641f","modified":1606059561805},{"_id":"public/GIL.html","hash":"cb4633203756a06198989da775138aa5fe3a918c","modified":1606059561806},{"_id":"public/linux基本命令.html","hash":"1c78a13898b2281382f79340cc6a28b63f7cca68","modified":1606059561806},{"_id":"public/SQL语句.html","hash":"226c2a5b190e187b54891370111fbc97377b0cf2","modified":1606059561806},{"_id":"public/Git-分布式版本控制系统.html","hash":"53771d96821c92f73b795251f36cbddb9dd636a7","modified":1606059561806},{"_id":"public/上传项目到github.html","hash":"7b9639952acabc1c278c6dedd7336e88a5a3d998","modified":1606059561806},{"_id":"public/mongodb常用的数据库操作命令.html","hash":"1537d8346299a8d8f41262dddf4575113dad0ea4","modified":1606059561806},{"_id":"public/markdown语法编写博客文章.html","hash":"f248ac85b70358dd1687b5b9dfa519662f4e4963","modified":1606059561806},{"_id":"public/使用hexo搭建个人博客并部署到github.html","hash":"c92321d2bd256f7dfcfe5d91a947c730633bc3c3","modified":1606059561806},{"_id":"public/javaScript变量声明方式.html","hash":"07e3387c0e6dc1e82616a277e865b0a4cf9bea5d","modified":1606059561806},{"_id":"public/ECMAScript基础之预编译【变量提升】.html","hash":"42762456e159df790ece1ccab5937298376aaec1","modified":1606059561807},{"_id":"public/index.html","hash":"461e5b0beedae249b72473528baf23dbd00f3d53","modified":1606059561807},{"_id":"public/favicon.ico","hash":"cf1c07c6378b8fb73d7c257ca614d12b276202de","modified":1606059561820},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1606059561820},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1606059561820},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1606059561820},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1606059561820},{"_id":"public/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1606059561821},{"_id":"public/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606059561821},{"_id":"public/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606059561821},{"_id":"public/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606059561821},{"_id":"public/上传项目到github/上传项目到github1.png","hash":"176d293142914d182658e89a41b67c79e1ff6be6","modified":1606059561821},{"_id":"public/markdown语法编写博客文章/流程图.png","hash":"8f69b226e9c651bf1dcf28162e8cd33f39496ffa","modified":1606059561821},{"_id":"public/img/bg.jpg","hash":"9804585b9b7fb6e7e14519304108a3ebe1ad7225","modified":1606059562433},{"_id":"public/使用hexo搭建个人博客并部署到github/github2.png","hash":"dbacd1e287b3e2eb500eacc8e5c6a8b696447c1b","modified":1606059562434},{"_id":"public/css/highlight-dark.css","hash":"e6f5491318fbba0995c17c33ff8f4d8af957c2cb","modified":1606059562442},{"_id":"public/css/highlight.css","hash":"932879716cbce6f9a1b830070ed514082398f1ca","modified":1606059562442},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1606059562442},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1606059562442},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1606059562443},{"_id":"public/share/css/share.css","hash":"f2c752f5eec4f88233c5f2d09807c01adee63100","modified":1606059562443},{"_id":"public/mongodb常用的数据库操作命令/options.png","hash":"09d4ba03acb73a482e52172a217f67756951a596","modified":1606059562443},{"_id":"public/share/js/social-share.js","hash":"9bfe34fe7691833e90815c5c862545bde581cf29","modified":1606059562672},{"_id":"public/使用hexo搭建个人博客并部署到github/github1.png","hash":"b5cc3b089f1cdfdcb4422b3c2b91bc07477a5655","modified":1606059562672},{"_id":"public/css/style-dark.css","hash":"8d1fa9bf5fef84c3c27fc653a1afecf6d66e3606","modified":1606059562676},{"_id":"public/css/style.css","hash":"61992233f95773d51d17965aa0c3874602a503f9","modified":1606059562677},{"_id":"public/share/js/qrcode.js","hash":"9caa0d9a9ba4409a3f77540a1b15a7617aeb28e8","modified":1606059562678},{"_id":"public/markdown语法编写博客文章/bz16.jpg","hash":"1d6136f62187998481e5d7c80e0281498500329a","modified":1606059562770},{"_id":"public/img/bg-dark.jpg","hash":"60c87ae89f70cfda13e5816ab974705ded65a315","modified":1606059562772}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"About Me.","date":"2019-08-01T14:57:33.000Z","_content":"\n## About页面\n\n#### This is a personal blog!\n\n---\n\n###### CopyRight © 2020 by Landucheg.\n\n\n\n","source":"_posts/About-Me.md","raw":"---\ntitle: About Me.\ndate: 2019-08-01 22:57:33\ntags: About\n---\n\n## About页面\n\n#### This is a personal blog!\n\n---\n\n###### CopyRight © 2020 by Landucheg.\n\n\n\n","slug":"About-Me","published":1,"updated":"2020-10-18T16:18:08.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7ae0000ggvko5fn2xae","content":"<h2 id=\"About页面\"><a href=\"#About页面\" class=\"headerlink\" title=\"About页面\"></a>About页面</h2><h4 id=\"This-is-a-personal-blog\"><a href=\"#This-is-a-personal-blog\" class=\"headerlink\" title=\"This is a personal blog!\"></a>This is a personal blog!</h4><hr>\n<h6 id=\"CopyRight-©-2020-by-Landucheg\"><a href=\"#CopyRight-©-2020-by-Landucheg\" class=\"headerlink\" title=\"CopyRight © 2020 by Landucheg.\"></a>CopyRight © 2020 by Landucheg.</h6>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"About页面\"><a href=\"#About页面\" class=\"headerlink\" title=\"About页面\"></a>About页面</h2><h4 id=\"This-is-a-personal-blog\"><a href=\"#This-is-a-personal-blog\" class=\"headerlink\" title=\"This is a personal blog!\"></a>This is a personal blog!</h4><hr>\n<h6 id=\"CopyRight-©-2020-by-Landucheg\"><a href=\"#CopyRight-©-2020-by-Landucheg\" class=\"headerlink\" title=\"CopyRight © 2020 by Landucheg.\"></a>CopyRight © 2020 by Landucheg.</h6>"},{"title":"IdeaRegisterCode","date":"2020-07-26T15:26:14.000Z","_content":"\n#### 你懂的~\n\n```\nA82DEE284F-eyJsaWNlbnNlSWQiOiJBODJERUUyODRGIiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJVbmxpbWl0ZWQgbGljZW5zZSB0aWxsIGVuZCBvZiB0aGUgY2VudHVyeS4iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiODkwNzA3MC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-5epo90Xs7KIIBb8ckoxnB/AZQ8Ev7rFrNqwFhBAsQYsQyhvqf1FcYdmlecFWJBHSWZU9b41kvsN4bwAHT5PiznOTmfvGv1MuOzMO0VOXZlc+edepemgpt+t3GUHvfGtzWFYeKeyCk+CLA9BqUzHRTgl2uBoIMNqh5izlDmejIwUHLl39QOyzHiTYNehnVN7GW5+QUeimTr/koVUgK8xofu59Tv8rcdiwIXwTo71LcU2z2P+T3R81fwKkt34evy7kRch4NIQUQUno//Pl3V0rInm3B2oFq9YBygPUdBUbdH/KHROyohZRD8SaZJO6kUT0BNvtDPKF4mCT1saWM38jkw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==\n```\n\n","source":"_posts/IdeaRegisterCode.md","raw":"---\ntitle: IdeaRegisterCode\ndate: 2020-07-26 23:26:14\ntags: 其他\n---\n\n#### 你懂的~\n\n```\nA82DEE284F-eyJsaWNlbnNlSWQiOiJBODJERUUyODRGIiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJVbmxpbWl0ZWQgbGljZW5zZSB0aWxsIGVuZCBvZiB0aGUgY2VudHVyeS4iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiODkwNzA3MC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-5epo90Xs7KIIBb8ckoxnB/AZQ8Ev7rFrNqwFhBAsQYsQyhvqf1FcYdmlecFWJBHSWZU9b41kvsN4bwAHT5PiznOTmfvGv1MuOzMO0VOXZlc+edepemgpt+t3GUHvfGtzWFYeKeyCk+CLA9BqUzHRTgl2uBoIMNqh5izlDmejIwUHLl39QOyzHiTYNehnVN7GW5+QUeimTr/koVUgK8xofu59Tv8rcdiwIXwTo71LcU2z2P+T3R81fwKkt34evy7kRch4NIQUQUno//Pl3V0rInm3B2oFq9YBygPUdBUbdH/KHROyohZRD8SaZJO6kUT0BNvtDPKF4mCT1saWM38jkw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==\n```\n\n","slug":"IdeaRegisterCode","published":1,"updated":"2020-07-26T15:30:25.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7an0001ggvkeelr6vns","content":"<h4 id=\"你懂的\"><a href=\"#你懂的\" class=\"headerlink\" title=\"你懂的~\"></a>你懂的~</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A82DEE284F-eyJsaWNlbnNlSWQiOiJBODJERUUyODRGIiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJVbmxpbWl0ZWQgbGljZW5zZSB0aWxsIGVuZCBvZiB0aGUgY2VudHVyeS4iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiODkwNzA3MC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-5epo90Xs7KIIBb8ckoxnB/AZQ8Ev7rFrNqwFhBAsQYsQyhvqf1FcYdmlecFWJBHSWZU9b41kvsN4bwAHT5PiznOTmfvGv1MuOzMO0VOXZlc+edepemgpt+t3GUHvfGtzWFYeKeyCk+CLA9BqUzHRTgl2uBoIMNqh5izlDmejIwUHLl39QOyzHiTYNehnVN7GW5+QUeimTr/koVUgK8xofu59Tv8rcdiwIXwTo71LcU2z2P+T3R81fwKkt34evy7kRch4NIQUQUno//Pl3V0rInm3B2oFq9YBygPUdBUbdH/KHROyohZRD8SaZJO6kUT0BNvtDPKF4mCT1saWM38jkw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"你懂的\"><a href=\"#你懂的\" class=\"headerlink\" title=\"你懂的~\"></a>你懂的~</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A82DEE284F-eyJsaWNlbnNlSWQiOiJBODJERUUyODRGIiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJVbmxpbWl0ZWQgbGljZW5zZSB0aWxsIGVuZCBvZiB0aGUgY2VudHVyeS4iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiODkwNzA3MC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-5epo90Xs7KIIBb8ckoxnB/AZQ8Ev7rFrNqwFhBAsQYsQyhvqf1FcYdmlecFWJBHSWZU9b41kvsN4bwAHT5PiznOTmfvGv1MuOzMO0VOXZlc+edepemgpt+t3GUHvfGtzWFYeKeyCk+CLA9BqUzHRTgl2uBoIMNqh5izlDmejIwUHLl39QOyzHiTYNehnVN7GW5+QUeimTr/koVUgK8xofu59Tv8rcdiwIXwTo71LcU2z2P+T3R81fwKkt34evy7kRch4NIQUQUno//Pl3V0rInm3B2oFq9YBygPUdBUbdH/KHROyohZRD8SaZJO6kUT0BNvtDPKF4mCT1saWM38jkw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==</span><br></pre></td></tr></table></figure>\n\n"},{"title":"GIL","date":"2019-09-04T11:16:12.000Z","_content":"\n## python之GIL锁【全局解释器锁】\n\n#### GIL本身是和python语法和特性无关的，这是python官方的C语言python解释器【cpython】在解释执行py代码时造成的。\n\n##### *GIL的影响主要是在多线程执行时，实际上每次只能执行一个线程，但是并不会影响多进程。*\n\n##### python创始人也曾发表过声明，在修改GIL时并不是一件容易的事情。所以现在使用官方的cpython解释器时,还是会存在这个问题的,但是我们可以把多线程换成多进程。\n\n---\n\n#### 1.把多线程换成多进程\n\n#### 2.使用其他语言的解释器【例如：java编写的python解释器】\n\n#### 3.通过使用其他语言的动态库来执行多线程\n\n---\n\n> ### 那么，既然多线程其实在同一时刻只有一个线程可以执行，那么是单线程比多线程快吗？\n\n#### 这个是要看使用的场景的，在计算密集型的场景，直接使用单线程确实是比多线程快，但是在io密集型的场景下，多线程还是比单线程要快的，原因如下：\n\n##### 1.计算密集型指的是一些大量的纯计算运算，并没有很多的io操作\n\n##### 2.io密集型指的是比较多的io操作，例如文件的读取，网页信息爬取【爬虫】\n\n##### 3.在计算密集型的运算下，过多的切换线程并没有太大的意义，反倒是花费了更多时间\n\n##### 4.但是如果在io密集型运算下，有很多的io操作，这会造成一定时间的堵塞，在执行到会堵塞的代码后，多线程就会切换到其他的线程继续进行代码执行而不需要等待解堵塞，这样多线程就会比单线程更加省时间，也就是效率更高。\n\n---\n\n>\n>\n>> 。。。\n\n","source":"_posts/GIL.md","raw":"---\ntitle: GIL\ndate: 2019-09-04 19:16:12\ntags: python\n---\n\n## python之GIL锁【全局解释器锁】\n\n#### GIL本身是和python语法和特性无关的，这是python官方的C语言python解释器【cpython】在解释执行py代码时造成的。\n\n##### *GIL的影响主要是在多线程执行时，实际上每次只能执行一个线程，但是并不会影响多进程。*\n\n##### python创始人也曾发表过声明，在修改GIL时并不是一件容易的事情。所以现在使用官方的cpython解释器时,还是会存在这个问题的,但是我们可以把多线程换成多进程。\n\n---\n\n#### 1.把多线程换成多进程\n\n#### 2.使用其他语言的解释器【例如：java编写的python解释器】\n\n#### 3.通过使用其他语言的动态库来执行多线程\n\n---\n\n> ### 那么，既然多线程其实在同一时刻只有一个线程可以执行，那么是单线程比多线程快吗？\n\n#### 这个是要看使用的场景的，在计算密集型的场景，直接使用单线程确实是比多线程快，但是在io密集型的场景下，多线程还是比单线程要快的，原因如下：\n\n##### 1.计算密集型指的是一些大量的纯计算运算，并没有很多的io操作\n\n##### 2.io密集型指的是比较多的io操作，例如文件的读取，网页信息爬取【爬虫】\n\n##### 3.在计算密集型的运算下，过多的切换线程并没有太大的意义，反倒是花费了更多时间\n\n##### 4.但是如果在io密集型运算下，有很多的io操作，这会造成一定时间的堵塞，在执行到会堵塞的代码后，多线程就会切换到其他的线程继续进行代码执行而不需要等待解堵塞，这样多线程就会比单线程更加省时间，也就是效率更高。\n\n---\n\n>\n>\n>> 。。。\n\n","slug":"GIL","published":1,"updated":"2019-09-21T11:44:02.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7ar0003ggvktcn07v5x","content":"<h2 id=\"python之GIL锁【全局解释器锁】\"><a href=\"#python之GIL锁【全局解释器锁】\" class=\"headerlink\" title=\"python之GIL锁【全局解释器锁】\"></a>python之GIL锁【全局解释器锁】</h2><h4 id=\"GIL本身是和python语法和特性无关的，这是python官方的C语言python解释器【cpython】在解释执行py代码时造成的。\"><a href=\"#GIL本身是和python语法和特性无关的，这是python官方的C语言python解释器【cpython】在解释执行py代码时造成的。\" class=\"headerlink\" title=\"GIL本身是和python语法和特性无关的，这是python官方的C语言python解释器【cpython】在解释执行py代码时造成的。\"></a>GIL本身是和python语法和特性无关的，这是python官方的C语言python解释器【cpython】在解释执行py代码时造成的。</h4><h5 id=\"GIL的影响主要是在多线程执行时，实际上每次只能执行一个线程，但是并不会影响多进程。\"><a href=\"#GIL的影响主要是在多线程执行时，实际上每次只能执行一个线程，但是并不会影响多进程。\" class=\"headerlink\" title=\"GIL的影响主要是在多线程执行时，实际上每次只能执行一个线程，但是并不会影响多进程。\"></a><em>GIL的影响主要是在多线程执行时，实际上每次只能执行一个线程，但是并不会影响多进程。</em></h5><h5 id=\"python创始人也曾发表过声明，在修改GIL时并不是一件容易的事情。所以现在使用官方的cpython解释器时-还是会存在这个问题的-但是我们可以把多线程换成多进程。\"><a href=\"#python创始人也曾发表过声明，在修改GIL时并不是一件容易的事情。所以现在使用官方的cpython解释器时-还是会存在这个问题的-但是我们可以把多线程换成多进程。\" class=\"headerlink\" title=\"python创始人也曾发表过声明，在修改GIL时并不是一件容易的事情。所以现在使用官方的cpython解释器时,还是会存在这个问题的,但是我们可以把多线程换成多进程。\"></a>python创始人也曾发表过声明，在修改GIL时并不是一件容易的事情。所以现在使用官方的cpython解释器时,还是会存在这个问题的,但是我们可以把多线程换成多进程。</h5><hr>\n<h4 id=\"1-把多线程换成多进程\"><a href=\"#1-把多线程换成多进程\" class=\"headerlink\" title=\"1.把多线程换成多进程\"></a>1.把多线程换成多进程</h4><h4 id=\"2-使用其他语言的解释器【例如：java编写的python解释器】\"><a href=\"#2-使用其他语言的解释器【例如：java编写的python解释器】\" class=\"headerlink\" title=\"2.使用其他语言的解释器【例如：java编写的python解释器】\"></a>2.使用其他语言的解释器【例如：java编写的python解释器】</h4><h4 id=\"3-通过使用其他语言的动态库来执行多线程\"><a href=\"#3-通过使用其他语言的动态库来执行多线程\" class=\"headerlink\" title=\"3.通过使用其他语言的动态库来执行多线程\"></a>3.通过使用其他语言的动态库来执行多线程</h4><hr>\n<blockquote>\n<h3 id=\"那么，既然多线程其实在同一时刻只有一个线程可以执行，那么是单线程比多线程快吗？\"><a href=\"#那么，既然多线程其实在同一时刻只有一个线程可以执行，那么是单线程比多线程快吗？\" class=\"headerlink\" title=\"那么，既然多线程其实在同一时刻只有一个线程可以执行，那么是单线程比多线程快吗？\"></a>那么，既然多线程其实在同一时刻只有一个线程可以执行，那么是单线程比多线程快吗？</h3></blockquote>\n<h4 id=\"这个是要看使用的场景的，在计算密集型的场景，直接使用单线程确实是比多线程快，但是在io密集型的场景下，多线程还是比单线程要快的，原因如下：\"><a href=\"#这个是要看使用的场景的，在计算密集型的场景，直接使用单线程确实是比多线程快，但是在io密集型的场景下，多线程还是比单线程要快的，原因如下：\" class=\"headerlink\" title=\"这个是要看使用的场景的，在计算密集型的场景，直接使用单线程确实是比多线程快，但是在io密集型的场景下，多线程还是比单线程要快的，原因如下：\"></a>这个是要看使用的场景的，在计算密集型的场景，直接使用单线程确实是比多线程快，但是在io密集型的场景下，多线程还是比单线程要快的，原因如下：</h4><h5 id=\"1-计算密集型指的是一些大量的纯计算运算，并没有很多的io操作\"><a href=\"#1-计算密集型指的是一些大量的纯计算运算，并没有很多的io操作\" class=\"headerlink\" title=\"1.计算密集型指的是一些大量的纯计算运算，并没有很多的io操作\"></a>1.计算密集型指的是一些大量的纯计算运算，并没有很多的io操作</h5><h5 id=\"2-io密集型指的是比较多的io操作，例如文件的读取，网页信息爬取【爬虫】\"><a href=\"#2-io密集型指的是比较多的io操作，例如文件的读取，网页信息爬取【爬虫】\" class=\"headerlink\" title=\"2.io密集型指的是比较多的io操作，例如文件的读取，网页信息爬取【爬虫】\"></a>2.io密集型指的是比较多的io操作，例如文件的读取，网页信息爬取【爬虫】</h5><h5 id=\"3-在计算密集型的运算下，过多的切换线程并没有太大的意义，反倒是花费了更多时间\"><a href=\"#3-在计算密集型的运算下，过多的切换线程并没有太大的意义，反倒是花费了更多时间\" class=\"headerlink\" title=\"3.在计算密集型的运算下，过多的切换线程并没有太大的意义，反倒是花费了更多时间\"></a>3.在计算密集型的运算下，过多的切换线程并没有太大的意义，反倒是花费了更多时间</h5><h5 id=\"4-但是如果在io密集型运算下，有很多的io操作，这会造成一定时间的堵塞，在执行到会堵塞的代码后，多线程就会切换到其他的线程继续进行代码执行而不需要等待解堵塞，这样多线程就会比单线程更加省时间，也就是效率更高。\"><a href=\"#4-但是如果在io密集型运算下，有很多的io操作，这会造成一定时间的堵塞，在执行到会堵塞的代码后，多线程就会切换到其他的线程继续进行代码执行而不需要等待解堵塞，这样多线程就会比单线程更加省时间，也就是效率更高。\" class=\"headerlink\" title=\"4.但是如果在io密集型运算下，有很多的io操作，这会造成一定时间的堵塞，在执行到会堵塞的代码后，多线程就会切换到其他的线程继续进行代码执行而不需要等待解堵塞，这样多线程就会比单线程更加省时间，也就是效率更高。\"></a>4.但是如果在io密集型运算下，有很多的io操作，这会造成一定时间的堵塞，在执行到会堵塞的代码后，多线程就会切换到其他的线程继续进行代码执行而不需要等待解堵塞，这样多线程就会比单线程更加省时间，也就是效率更高。</h5><hr>\n<blockquote>\n<blockquote>\n<p>。。。</p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python之GIL锁【全局解释器锁】\"><a href=\"#python之GIL锁【全局解释器锁】\" class=\"headerlink\" title=\"python之GIL锁【全局解释器锁】\"></a>python之GIL锁【全局解释器锁】</h2><h4 id=\"GIL本身是和python语法和特性无关的，这是python官方的C语言python解释器【cpython】在解释执行py代码时造成的。\"><a href=\"#GIL本身是和python语法和特性无关的，这是python官方的C语言python解释器【cpython】在解释执行py代码时造成的。\" class=\"headerlink\" title=\"GIL本身是和python语法和特性无关的，这是python官方的C语言python解释器【cpython】在解释执行py代码时造成的。\"></a>GIL本身是和python语法和特性无关的，这是python官方的C语言python解释器【cpython】在解释执行py代码时造成的。</h4><h5 id=\"GIL的影响主要是在多线程执行时，实际上每次只能执行一个线程，但是并不会影响多进程。\"><a href=\"#GIL的影响主要是在多线程执行时，实际上每次只能执行一个线程，但是并不会影响多进程。\" class=\"headerlink\" title=\"GIL的影响主要是在多线程执行时，实际上每次只能执行一个线程，但是并不会影响多进程。\"></a><em>GIL的影响主要是在多线程执行时，实际上每次只能执行一个线程，但是并不会影响多进程。</em></h5><h5 id=\"python创始人也曾发表过声明，在修改GIL时并不是一件容易的事情。所以现在使用官方的cpython解释器时-还是会存在这个问题的-但是我们可以把多线程换成多进程。\"><a href=\"#python创始人也曾发表过声明，在修改GIL时并不是一件容易的事情。所以现在使用官方的cpython解释器时-还是会存在这个问题的-但是我们可以把多线程换成多进程。\" class=\"headerlink\" title=\"python创始人也曾发表过声明，在修改GIL时并不是一件容易的事情。所以现在使用官方的cpython解释器时,还是会存在这个问题的,但是我们可以把多线程换成多进程。\"></a>python创始人也曾发表过声明，在修改GIL时并不是一件容易的事情。所以现在使用官方的cpython解释器时,还是会存在这个问题的,但是我们可以把多线程换成多进程。</h5><hr>\n<h4 id=\"1-把多线程换成多进程\"><a href=\"#1-把多线程换成多进程\" class=\"headerlink\" title=\"1.把多线程换成多进程\"></a>1.把多线程换成多进程</h4><h4 id=\"2-使用其他语言的解释器【例如：java编写的python解释器】\"><a href=\"#2-使用其他语言的解释器【例如：java编写的python解释器】\" class=\"headerlink\" title=\"2.使用其他语言的解释器【例如：java编写的python解释器】\"></a>2.使用其他语言的解释器【例如：java编写的python解释器】</h4><h4 id=\"3-通过使用其他语言的动态库来执行多线程\"><a href=\"#3-通过使用其他语言的动态库来执行多线程\" class=\"headerlink\" title=\"3.通过使用其他语言的动态库来执行多线程\"></a>3.通过使用其他语言的动态库来执行多线程</h4><hr>\n<blockquote>\n<h3 id=\"那么，既然多线程其实在同一时刻只有一个线程可以执行，那么是单线程比多线程快吗？\"><a href=\"#那么，既然多线程其实在同一时刻只有一个线程可以执行，那么是单线程比多线程快吗？\" class=\"headerlink\" title=\"那么，既然多线程其实在同一时刻只有一个线程可以执行，那么是单线程比多线程快吗？\"></a>那么，既然多线程其实在同一时刻只有一个线程可以执行，那么是单线程比多线程快吗？</h3></blockquote>\n<h4 id=\"这个是要看使用的场景的，在计算密集型的场景，直接使用单线程确实是比多线程快，但是在io密集型的场景下，多线程还是比单线程要快的，原因如下：\"><a href=\"#这个是要看使用的场景的，在计算密集型的场景，直接使用单线程确实是比多线程快，但是在io密集型的场景下，多线程还是比单线程要快的，原因如下：\" class=\"headerlink\" title=\"这个是要看使用的场景的，在计算密集型的场景，直接使用单线程确实是比多线程快，但是在io密集型的场景下，多线程还是比单线程要快的，原因如下：\"></a>这个是要看使用的场景的，在计算密集型的场景，直接使用单线程确实是比多线程快，但是在io密集型的场景下，多线程还是比单线程要快的，原因如下：</h4><h5 id=\"1-计算密集型指的是一些大量的纯计算运算，并没有很多的io操作\"><a href=\"#1-计算密集型指的是一些大量的纯计算运算，并没有很多的io操作\" class=\"headerlink\" title=\"1.计算密集型指的是一些大量的纯计算运算，并没有很多的io操作\"></a>1.计算密集型指的是一些大量的纯计算运算，并没有很多的io操作</h5><h5 id=\"2-io密集型指的是比较多的io操作，例如文件的读取，网页信息爬取【爬虫】\"><a href=\"#2-io密集型指的是比较多的io操作，例如文件的读取，网页信息爬取【爬虫】\" class=\"headerlink\" title=\"2.io密集型指的是比较多的io操作，例如文件的读取，网页信息爬取【爬虫】\"></a>2.io密集型指的是比较多的io操作，例如文件的读取，网页信息爬取【爬虫】</h5><h5 id=\"3-在计算密集型的运算下，过多的切换线程并没有太大的意义，反倒是花费了更多时间\"><a href=\"#3-在计算密集型的运算下，过多的切换线程并没有太大的意义，反倒是花费了更多时间\" class=\"headerlink\" title=\"3.在计算密集型的运算下，过多的切换线程并没有太大的意义，反倒是花费了更多时间\"></a>3.在计算密集型的运算下，过多的切换线程并没有太大的意义，反倒是花费了更多时间</h5><h5 id=\"4-但是如果在io密集型运算下，有很多的io操作，这会造成一定时间的堵塞，在执行到会堵塞的代码后，多线程就会切换到其他的线程继续进行代码执行而不需要等待解堵塞，这样多线程就会比单线程更加省时间，也就是效率更高。\"><a href=\"#4-但是如果在io密集型运算下，有很多的io操作，这会造成一定时间的堵塞，在执行到会堵塞的代码后，多线程就会切换到其他的线程继续进行代码执行而不需要等待解堵塞，这样多线程就会比单线程更加省时间，也就是效率更高。\" class=\"headerlink\" title=\"4.但是如果在io密集型运算下，有很多的io操作，这会造成一定时间的堵塞，在执行到会堵塞的代码后，多线程就会切换到其他的线程继续进行代码执行而不需要等待解堵塞，这样多线程就会比单线程更加省时间，也就是效率更高。\"></a>4.但是如果在io密集型运算下，有很多的io操作，这会造成一定时间的堵塞，在执行到会堵塞的代码后，多线程就会切换到其他的线程继续进行代码执行而不需要等待解堵塞，这样多线程就会比单线程更加省时间，也就是效率更高。</h5><hr>\n<blockquote>\n<blockquote>\n<p>。。。</p>\n</blockquote>\n</blockquote>\n"},{"title":"ECMAScript基础之预编译【变量提升】","date":"2019-06-07T13:43:28.000Z","_content":"\n## ***javaScript包括ECMAScript、DOM和BOM，ECMAScript就是javaScript的最基础语法。这里将介绍ECMAScript的基础内容：预编译***【变量提升】\n\n#### 预编译有两种情况，一种是整个文档在运行之前发生的预编译，还有就是函数在执行前发生的预编译。\n\n---\n\n#### *开始预编译：*\n\n##### ***文档代码执行前：***\n\n```bash\n{\n\t1.创建GO对象(global object)\n\t2.找变量声明，将变量名作为GO对象的属性名，此时值为undefined\n\t3.找函数声明，把函数名作为GO对象的属性名，把函数体作为值赋给对应的属性名\n\t4.开始执行代码，当执行到函数的时候，要在函数执行前进行预编译\n}\n```\n\n##### ***函数执行前：***\n\n```bash\n{\n\t1.创建AO对象（执行期上下文 activation object）\n\t2.找函数形参和变量声明，将形参名和变量名作为AO对象的属性名，此时值为undefined\n\t3.将实参值和形参值统一\n\t4.在函数体里找函数声明，把函数名作为AO对象的属性名，把函数体作为值赋给对应的属性名\n}\n```\n\n#### ***这里举个栗子，看下面代码的预编译过程：***\n\n```javascript\nconsole.log(a);\nvar a = 1;\nconsole.log(b);\nfunction b(num1, num2){\n    console.log(num1);\n    var t = num1;\n    num1 = num1 + num2;\n    function num1(){}\n    console.log(num1);\n    num2 = t - num2;\n    return num2;\n}\nb(a,2);\n```\n\n#### 运行结果：\n\n```bash\nundefined\n[Function: b]\n[Function: num1]\nfunction num1(){}2\n```\n\n#### 预编译过程：\n\n```bash\n#1.创建GO对象(global object)\nGO{\n\t\n}\n#2.找变量声明，将变量名作为GO对象的属性名，此时值为undefined\nGO{\n\ta: underfined,\n}\n#3.找函数声明，把函数名作为GO对象的属性名，把函数体作为值赋给对应的属性名\nGO{\n\ta: underfined,\n\tb: function(num1, num2){...},\n}\n#4.开始执行代码，当执行到函数的时候，要在函数执行前进行预编译:\n> console.log(a)\n< underfined\n> a = 1\n< 1\t#此时GO中a的值变为：1\n> console.log(b)\n< [Function: b]\n> b(a,2)\n< #这里执行前要进行预编译：\n#1.创建AO对象（执行期上下文 activation object）\nAO{\n\n}\n#2.找函数形参和变量声明，将形参名和变量名作为AO对象的属性名，此时值为undefined\nAO{\n\tnum1: underfined,\n\tnum2: underfined,\n\tt: underfined,\n}\n#3.将实参值和形参值统一\nAO{\n\tnum1: 1,\n\tnum2: 2,\n\tt: underfined,\n}\n#4.在函数体里找函数声明，把函数名作为AO对象的属性名，把函数体作为值赋给对应的属性名\nAO{\n\tnum1: function(){},\n\tnum2: 2,\n\tt: underfined,\n}\n#继续运行：\n> console.log(num1)\n< [Function: num1]\n> t = num1\n< function(){}\n> num1 = num1 + num2\t#此时AO中的num1变为：function num1(){}2\n> console.log(num1)\n< function num1(){}2\n> ...\n```\n\n#### 所以输出的结果是：\n\n```bash\nundefined\n[Function: b]\n[Function: num1]\nfunction num1(){}2\n```\n\n---\n\n> > ***到此，预编译就介绍完了......***\n\n","source":"_posts/ECMAScript基础之预编译【变量提升】.md","raw":"---\ntitle: ECMAScript基础之预编译【变量提升】\ndate: 2019-06-07 21:43:28\ntags: javaScript\n---\n\n## ***javaScript包括ECMAScript、DOM和BOM，ECMAScript就是javaScript的最基础语法。这里将介绍ECMAScript的基础内容：预编译***【变量提升】\n\n#### 预编译有两种情况，一种是整个文档在运行之前发生的预编译，还有就是函数在执行前发生的预编译。\n\n---\n\n#### *开始预编译：*\n\n##### ***文档代码执行前：***\n\n```bash\n{\n\t1.创建GO对象(global object)\n\t2.找变量声明，将变量名作为GO对象的属性名，此时值为undefined\n\t3.找函数声明，把函数名作为GO对象的属性名，把函数体作为值赋给对应的属性名\n\t4.开始执行代码，当执行到函数的时候，要在函数执行前进行预编译\n}\n```\n\n##### ***函数执行前：***\n\n```bash\n{\n\t1.创建AO对象（执行期上下文 activation object）\n\t2.找函数形参和变量声明，将形参名和变量名作为AO对象的属性名，此时值为undefined\n\t3.将实参值和形参值统一\n\t4.在函数体里找函数声明，把函数名作为AO对象的属性名，把函数体作为值赋给对应的属性名\n}\n```\n\n#### ***这里举个栗子，看下面代码的预编译过程：***\n\n```javascript\nconsole.log(a);\nvar a = 1;\nconsole.log(b);\nfunction b(num1, num2){\n    console.log(num1);\n    var t = num1;\n    num1 = num1 + num2;\n    function num1(){}\n    console.log(num1);\n    num2 = t - num2;\n    return num2;\n}\nb(a,2);\n```\n\n#### 运行结果：\n\n```bash\nundefined\n[Function: b]\n[Function: num1]\nfunction num1(){}2\n```\n\n#### 预编译过程：\n\n```bash\n#1.创建GO对象(global object)\nGO{\n\t\n}\n#2.找变量声明，将变量名作为GO对象的属性名，此时值为undefined\nGO{\n\ta: underfined,\n}\n#3.找函数声明，把函数名作为GO对象的属性名，把函数体作为值赋给对应的属性名\nGO{\n\ta: underfined,\n\tb: function(num1, num2){...},\n}\n#4.开始执行代码，当执行到函数的时候，要在函数执行前进行预编译:\n> console.log(a)\n< underfined\n> a = 1\n< 1\t#此时GO中a的值变为：1\n> console.log(b)\n< [Function: b]\n> b(a,2)\n< #这里执行前要进行预编译：\n#1.创建AO对象（执行期上下文 activation object）\nAO{\n\n}\n#2.找函数形参和变量声明，将形参名和变量名作为AO对象的属性名，此时值为undefined\nAO{\n\tnum1: underfined,\n\tnum2: underfined,\n\tt: underfined,\n}\n#3.将实参值和形参值统一\nAO{\n\tnum1: 1,\n\tnum2: 2,\n\tt: underfined,\n}\n#4.在函数体里找函数声明，把函数名作为AO对象的属性名，把函数体作为值赋给对应的属性名\nAO{\n\tnum1: function(){},\n\tnum2: 2,\n\tt: underfined,\n}\n#继续运行：\n> console.log(num1)\n< [Function: num1]\n> t = num1\n< function(){}\n> num1 = num1 + num2\t#此时AO中的num1变为：function num1(){}2\n> console.log(num1)\n< function num1(){}2\n> ...\n```\n\n#### 所以输出的结果是：\n\n```bash\nundefined\n[Function: b]\n[Function: num1]\nfunction num1(){}2\n```\n\n---\n\n> > ***到此，预编译就介绍完了......***\n\n","slug":"ECMAScript基础之预编译【变量提升】","published":1,"updated":"2019-08-12T15:00:43.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7at0004ggvkk0do79bz","content":"<h2 id=\"javaScript包括ECMAScript、DOM和BOM，ECMAScript就是javaScript的最基础语法。这里将介绍ECMAScript的基础内容：预编译【变量提升】\"><a href=\"#javaScript包括ECMAScript、DOM和BOM，ECMAScript就是javaScript的最基础语法。这里将介绍ECMAScript的基础内容：预编译【变量提升】\" class=\"headerlink\" title=\"javaScript包括ECMAScript、DOM和BOM，ECMAScript就是javaScript的最基础语法。这里将介绍ECMAScript的基础内容：预编译【变量提升】\"></a><strong><em>javaScript包括ECMAScript、DOM和BOM，ECMAScript就是javaScript的最基础语法。这里将介绍ECMAScript的基础内容：预编译</em></strong>【变量提升】</h2><h4 id=\"预编译有两种情况，一种是整个文档在运行之前发生的预编译，还有就是函数在执行前发生的预编译。\"><a href=\"#预编译有两种情况，一种是整个文档在运行之前发生的预编译，还有就是函数在执行前发生的预编译。\" class=\"headerlink\" title=\"预编译有两种情况，一种是整个文档在运行之前发生的预编译，还有就是函数在执行前发生的预编译。\"></a>预编译有两种情况，一种是整个文档在运行之前发生的预编译，还有就是函数在执行前发生的预编译。</h4><hr>\n<h4 id=\"开始预编译：\"><a href=\"#开始预编译：\" class=\"headerlink\" title=\"开始预编译：\"></a><em>开始预编译：</em></h4><h5 id=\"文档代码执行前：\"><a href=\"#文档代码执行前：\" class=\"headerlink\" title=\"文档代码执行前：\"></a><strong><em>文档代码执行前：</em></strong></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t1.创建GO对象(global object)</span><br><span class=\"line\">\t2.找变量声明，将变量名作为GO对象的属性名，此时值为undefined</span><br><span class=\"line\">\t3.找函数声明，把函数名作为GO对象的属性名，把函数体作为值赋给对应的属性名</span><br><span class=\"line\">\t4.开始执行代码，当执行到函数的时候，要在函数执行前进行预编译</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数执行前：\"><a href=\"#函数执行前：\" class=\"headerlink\" title=\"函数执行前：\"></a><strong><em>函数执行前：</em></strong></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t1.创建AO对象（执行期上下文 activation object）</span><br><span class=\"line\">\t2.找函数形参和变量声明，将形参名和变量名作为AO对象的属性名，此时值为undefined</span><br><span class=\"line\">\t3.将实参值和形参值统一</span><br><span class=\"line\">\t4.在函数体里找函数声明，把函数名作为AO对象的属性名，把函数体作为值赋给对应的属性名</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"这里举个栗子，看下面代码的预编译过程：\"><a href=\"#这里举个栗子，看下面代码的预编译过程：\" class=\"headerlink\" title=\"这里举个栗子，看下面代码的预编译过程：\"></a><strong><em>这里举个栗子，看下面代码的预编译过程：</em></strong></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num1);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = num1;</span><br><span class=\"line\">    num1 = num1 + num2;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num1</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num1);</span><br><span class=\"line\">    num2 = t - num2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b(a,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefined</span><br><span class=\"line\">[Function: b]</span><br><span class=\"line\">[Function: num1]</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">num1</span></span>()&#123;&#125;2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"预编译过程：\"><a href=\"#预编译过程：\" class=\"headerlink\" title=\"预编译过程：\"></a>预编译过程：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.创建GO对象(global object)</span></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#2.找变量声明，将变量名作为GO对象的属性名，此时值为undefined</span></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">\ta: underfined,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#3.找函数声明，把函数名作为GO对象的属性名，把函数体作为值赋给对应的属性名</span></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">\ta: underfined,</span><br><span class=\"line\">\tb: <span class=\"keyword\">function</span>(num1, num2)&#123;...&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#4.开始执行代码，当执行到函数的时候，要在函数执行前进行预编译:</span></span><br><span class=\"line\">&gt; console.log(a)</span><br><span class=\"line\">&lt; underfined</span><br><span class=\"line\">&gt; a = 1</span><br><span class=\"line\">&lt; 1\t<span class=\"comment\">#此时GO中a的值变为：1</span></span><br><span class=\"line\">&gt; console.log(b)</span><br><span class=\"line\">&lt; [Function: b]</span><br><span class=\"line\">&gt; b(a,2)</span><br><span class=\"line\">&lt; <span class=\"comment\">#这里执行前要进行预编译：</span></span><br><span class=\"line\"><span class=\"comment\">#1.创建AO对象（执行期上下文 activation object）</span></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#2.找函数形参和变量声明，将形参名和变量名作为AO对象的属性名，此时值为undefined</span></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">\tnum1: underfined,</span><br><span class=\"line\">\tnum2: underfined,</span><br><span class=\"line\">\tt: underfined,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#3.将实参值和形参值统一</span></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">\tnum1: 1,</span><br><span class=\"line\">\tnum2: 2,</span><br><span class=\"line\">\tt: underfined,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#4.在函数体里找函数声明，把函数名作为AO对象的属性名，把函数体作为值赋给对应的属性名</span></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">\tnum1: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;,</span><br><span class=\"line\">\tnum2: 2,</span><br><span class=\"line\">\tt: underfined,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#继续运行：</span></span><br><span class=\"line\">&gt; console.log(num1)</span><br><span class=\"line\">&lt; [Function: num1]</span><br><span class=\"line\">&gt; t = num1</span><br><span class=\"line\">&lt; <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;</span><br><span class=\"line\">&gt; num1 = num1 + num2\t<span class=\"comment\">#此时AO中的num1变为：function num1()&#123;&#125;2</span></span><br><span class=\"line\">&gt; console.log(num1)</span><br><span class=\"line\">&lt; <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">num1</span></span>()&#123;&#125;2</span><br><span class=\"line\">&gt; ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"所以输出的结果是：\"><a href=\"#所以输出的结果是：\" class=\"headerlink\" title=\"所以输出的结果是：\"></a>所以输出的结果是：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefined</span><br><span class=\"line\">[Function: b]</span><br><span class=\"line\">[Function: num1]</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">num1</span></span>()&#123;&#125;2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<blockquote>\n<p><strong><em>到此，预编译就介绍完了……</em></strong></p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"javaScript包括ECMAScript、DOM和BOM，ECMAScript就是javaScript的最基础语法。这里将介绍ECMAScript的基础内容：预编译【变量提升】\"><a href=\"#javaScript包括ECMAScript、DOM和BOM，ECMAScript就是javaScript的最基础语法。这里将介绍ECMAScript的基础内容：预编译【变量提升】\" class=\"headerlink\" title=\"javaScript包括ECMAScript、DOM和BOM，ECMAScript就是javaScript的最基础语法。这里将介绍ECMAScript的基础内容：预编译【变量提升】\"></a><strong><em>javaScript包括ECMAScript、DOM和BOM，ECMAScript就是javaScript的最基础语法。这里将介绍ECMAScript的基础内容：预编译</em></strong>【变量提升】</h2><h4 id=\"预编译有两种情况，一种是整个文档在运行之前发生的预编译，还有就是函数在执行前发生的预编译。\"><a href=\"#预编译有两种情况，一种是整个文档在运行之前发生的预编译，还有就是函数在执行前发生的预编译。\" class=\"headerlink\" title=\"预编译有两种情况，一种是整个文档在运行之前发生的预编译，还有就是函数在执行前发生的预编译。\"></a>预编译有两种情况，一种是整个文档在运行之前发生的预编译，还有就是函数在执行前发生的预编译。</h4><hr>\n<h4 id=\"开始预编译：\"><a href=\"#开始预编译：\" class=\"headerlink\" title=\"开始预编译：\"></a><em>开始预编译：</em></h4><h5 id=\"文档代码执行前：\"><a href=\"#文档代码执行前：\" class=\"headerlink\" title=\"文档代码执行前：\"></a><strong><em>文档代码执行前：</em></strong></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t1.创建GO对象(global object)</span><br><span class=\"line\">\t2.找变量声明，将变量名作为GO对象的属性名，此时值为undefined</span><br><span class=\"line\">\t3.找函数声明，把函数名作为GO对象的属性名，把函数体作为值赋给对应的属性名</span><br><span class=\"line\">\t4.开始执行代码，当执行到函数的时候，要在函数执行前进行预编译</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数执行前：\"><a href=\"#函数执行前：\" class=\"headerlink\" title=\"函数执行前：\"></a><strong><em>函数执行前：</em></strong></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t1.创建AO对象（执行期上下文 activation object）</span><br><span class=\"line\">\t2.找函数形参和变量声明，将形参名和变量名作为AO对象的属性名，此时值为undefined</span><br><span class=\"line\">\t3.将实参值和形参值统一</span><br><span class=\"line\">\t4.在函数体里找函数声明，把函数名作为AO对象的属性名，把函数体作为值赋给对应的属性名</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"这里举个栗子，看下面代码的预编译过程：\"><a href=\"#这里举个栗子，看下面代码的预编译过程：\" class=\"headerlink\" title=\"这里举个栗子，看下面代码的预编译过程：\"></a><strong><em>这里举个栗子，看下面代码的预编译过程：</em></strong></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num1);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = num1;</span><br><span class=\"line\">    num1 = num1 + num2;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num1</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num1);</span><br><span class=\"line\">    num2 = t - num2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b(a,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefined</span><br><span class=\"line\">[Function: b]</span><br><span class=\"line\">[Function: num1]</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">num1</span></span>()&#123;&#125;2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"预编译过程：\"><a href=\"#预编译过程：\" class=\"headerlink\" title=\"预编译过程：\"></a>预编译过程：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1.创建GO对象(global object)</span></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#2.找变量声明，将变量名作为GO对象的属性名，此时值为undefined</span></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">\ta: underfined,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#3.找函数声明，把函数名作为GO对象的属性名，把函数体作为值赋给对应的属性名</span></span><br><span class=\"line\">GO&#123;</span><br><span class=\"line\">\ta: underfined,</span><br><span class=\"line\">\tb: <span class=\"keyword\">function</span>(num1, num2)&#123;...&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#4.开始执行代码，当执行到函数的时候，要在函数执行前进行预编译:</span></span><br><span class=\"line\">&gt; console.log(a)</span><br><span class=\"line\">&lt; underfined</span><br><span class=\"line\">&gt; a = 1</span><br><span class=\"line\">&lt; 1\t<span class=\"comment\">#此时GO中a的值变为：1</span></span><br><span class=\"line\">&gt; console.log(b)</span><br><span class=\"line\">&lt; [Function: b]</span><br><span class=\"line\">&gt; b(a,2)</span><br><span class=\"line\">&lt; <span class=\"comment\">#这里执行前要进行预编译：</span></span><br><span class=\"line\"><span class=\"comment\">#1.创建AO对象（执行期上下文 activation object）</span></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#2.找函数形参和变量声明，将形参名和变量名作为AO对象的属性名，此时值为undefined</span></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">\tnum1: underfined,</span><br><span class=\"line\">\tnum2: underfined,</span><br><span class=\"line\">\tt: underfined,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#3.将实参值和形参值统一</span></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">\tnum1: 1,</span><br><span class=\"line\">\tnum2: 2,</span><br><span class=\"line\">\tt: underfined,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#4.在函数体里找函数声明，把函数名作为AO对象的属性名，把函数体作为值赋给对应的属性名</span></span><br><span class=\"line\">AO&#123;</span><br><span class=\"line\">\tnum1: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;,</span><br><span class=\"line\">\tnum2: 2,</span><br><span class=\"line\">\tt: underfined,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#继续运行：</span></span><br><span class=\"line\">&gt; console.log(num1)</span><br><span class=\"line\">&lt; [Function: num1]</span><br><span class=\"line\">&gt; t = num1</span><br><span class=\"line\">&lt; <span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;</span><br><span class=\"line\">&gt; num1 = num1 + num2\t<span class=\"comment\">#此时AO中的num1变为：function num1()&#123;&#125;2</span></span><br><span class=\"line\">&gt; console.log(num1)</span><br><span class=\"line\">&lt; <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">num1</span></span>()&#123;&#125;2</span><br><span class=\"line\">&gt; ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"所以输出的结果是：\"><a href=\"#所以输出的结果是：\" class=\"headerlink\" title=\"所以输出的结果是：\"></a>所以输出的结果是：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefined</span><br><span class=\"line\">[Function: b]</span><br><span class=\"line\">[Function: num1]</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">num1</span></span>()&#123;&#125;2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<blockquote>\n<p><strong><em>到此，预编译就介绍完了……</em></strong></p>\n</blockquote>\n</blockquote>\n"},{"title":"RDBMS事务","date":"2019-08-30T12:03:10.000Z","_content":"\n### 事务用于要执行一系列的sql语句，在这些sql语句中，只要有一个出现问题或者出现错误，结果都会导致数据错误，所以必须保证这一系列的操作要么是全都正常执行，要么就全都不执行，保证了一系列操作的完整性和准确性。而事务就是来完成这个需求的。\n\n---\n\n#### 使用sql语句执行事务：\n\n```sql\nbegin;  -- 开始事务  或：\nstart transaction;  -- 开始事务\n-- 执行增删改查等语句 ……\nselect ... ;  -- 查询一般不需要使用事务\nupdate ... ;\ninsert into ... ;\ncommit;  -- 提交事务，执行所有操作\nrollback;  -- 回滚事务，之前的操作不被执行\n```\n\n---\n\n#### 事务特性：\n\n* 原子性\n* 一致性\n* 隔离性\n* 持久性\n\n","source":"_posts/RDBMS事务.md","raw":"---\ntitle: RDBMS事务\ndate: 2019-08-30 20:03:10\ntags: RDBMS\n---\n\n### 事务用于要执行一系列的sql语句，在这些sql语句中，只要有一个出现问题或者出现错误，结果都会导致数据错误，所以必须保证这一系列的操作要么是全都正常执行，要么就全都不执行，保证了一系列操作的完整性和准确性。而事务就是来完成这个需求的。\n\n---\n\n#### 使用sql语句执行事务：\n\n```sql\nbegin;  -- 开始事务  或：\nstart transaction;  -- 开始事务\n-- 执行增删改查等语句 ……\nselect ... ;  -- 查询一般不需要使用事务\nupdate ... ;\ninsert into ... ;\ncommit;  -- 提交事务，执行所有操作\nrollback;  -- 回滚事务，之前的操作不被执行\n```\n\n---\n\n#### 事务特性：\n\n* 原子性\n* 一致性\n* 隔离性\n* 持久性\n\n","slug":"RDBMS事务","published":1,"updated":"2019-09-21T12:30:09.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7av0005ggvkcr4ee01h","content":"<h3 id=\"事务用于要执行一系列的sql语句，在这些sql语句中，只要有一个出现问题或者出现错误，结果都会导致数据错误，所以必须保证这一系列的操作要么是全都正常执行，要么就全都不执行，保证了一系列操作的完整性和准确性。而事务就是来完成这个需求的。\"><a href=\"#事务用于要执行一系列的sql语句，在这些sql语句中，只要有一个出现问题或者出现错误，结果都会导致数据错误，所以必须保证这一系列的操作要么是全都正常执行，要么就全都不执行，保证了一系列操作的完整性和准确性。而事务就是来完成这个需求的。\" class=\"headerlink\" title=\"事务用于要执行一系列的sql语句，在这些sql语句中，只要有一个出现问题或者出现错误，结果都会导致数据错误，所以必须保证这一系列的操作要么是全都正常执行，要么就全都不执行，保证了一系列操作的完整性和准确性。而事务就是来完成这个需求的。\"></a>事务用于要执行一系列的sql语句，在这些sql语句中，只要有一个出现问题或者出现错误，结果都会导致数据错误，所以必须保证这一系列的操作要么是全都正常执行，要么就全都不执行，保证了一系列操作的完整性和准确性。而事务就是来完成这个需求的。</h3><hr>\n<h4 id=\"使用sql语句执行事务：\"><a href=\"#使用sql语句执行事务：\" class=\"headerlink\" title=\"使用sql语句执行事务：\"></a>使用sql语句执行事务：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span>;  <span class=\"comment\">-- 开始事务  或：</span></span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">transaction</span>;  <span class=\"comment\">-- 开始事务</span></span><br><span class=\"line\"><span class=\"comment\">-- 执行增删改查等语句 ……</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> ... ;  <span class=\"comment\">-- 查询一般不需要使用事务</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> ... ;</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> ... ;</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;  <span class=\"comment\">-- 提交事务，执行所有操作</span></span><br><span class=\"line\"><span class=\"keyword\">rollback</span>;  <span class=\"comment\">-- 回滚事务，之前的操作不被执行</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"事务特性：\"><a href=\"#事务特性：\" class=\"headerlink\" title=\"事务特性：\"></a>事务特性：</h4><ul>\n<li>原子性</li>\n<li>一致性</li>\n<li>隔离性</li>\n<li>持久性</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"事务用于要执行一系列的sql语句，在这些sql语句中，只要有一个出现问题或者出现错误，结果都会导致数据错误，所以必须保证这一系列的操作要么是全都正常执行，要么就全都不执行，保证了一系列操作的完整性和准确性。而事务就是来完成这个需求的。\"><a href=\"#事务用于要执行一系列的sql语句，在这些sql语句中，只要有一个出现问题或者出现错误，结果都会导致数据错误，所以必须保证这一系列的操作要么是全都正常执行，要么就全都不执行，保证了一系列操作的完整性和准确性。而事务就是来完成这个需求的。\" class=\"headerlink\" title=\"事务用于要执行一系列的sql语句，在这些sql语句中，只要有一个出现问题或者出现错误，结果都会导致数据错误，所以必须保证这一系列的操作要么是全都正常执行，要么就全都不执行，保证了一系列操作的完整性和准确性。而事务就是来完成这个需求的。\"></a>事务用于要执行一系列的sql语句，在这些sql语句中，只要有一个出现问题或者出现错误，结果都会导致数据错误，所以必须保证这一系列的操作要么是全都正常执行，要么就全都不执行，保证了一系列操作的完整性和准确性。而事务就是来完成这个需求的。</h3><hr>\n<h4 id=\"使用sql语句执行事务：\"><a href=\"#使用sql语句执行事务：\" class=\"headerlink\" title=\"使用sql语句执行事务：\"></a>使用sql语句执行事务：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">begin</span>;  <span class=\"comment\">-- 开始事务  或：</span></span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">transaction</span>;  <span class=\"comment\">-- 开始事务</span></span><br><span class=\"line\"><span class=\"comment\">-- 执行增删改查等语句 ……</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> ... ;  <span class=\"comment\">-- 查询一般不需要使用事务</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> ... ;</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> ... ;</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;  <span class=\"comment\">-- 提交事务，执行所有操作</span></span><br><span class=\"line\"><span class=\"keyword\">rollback</span>;  <span class=\"comment\">-- 回滚事务，之前的操作不被执行</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"事务特性：\"><a href=\"#事务特性：\" class=\"headerlink\" title=\"事务特性：\"></a>事务特性：</h4><ul>\n<li>原子性</li>\n<li>一致性</li>\n<li>隔离性</li>\n<li>持久性</li>\n</ul>\n"},{"title":"RDBMS的视图","date":"2019-08-30T10:52:43.000Z","_content":"\n## 关系型数据库的虚拟表——视图\n\n#### 在我们使用sql语句对视图操作时，和操作普通的表基本是一样的，那么为什么要使用视图呢？\n\n#### 通过建立表的虚拟表视图，可以使得在查询时间更加方便和简洁，同时也对sql代码操作和数据库的表结构之间解耦合。使得数据表的修改对sql语句的影响减少，从而减少修改工作量，提高效率。视图在使用时和调用函数差不多，其实就像是子查询一样，调用了这个函数【视图】，把函数【视图】查询的结果返回作为一个新的表内容。\n\n---\n\n#### sql语句创建视图：\n\n```sql\ncreate view view_name as select语句;\ncreate view view_name as select * from table1 left join table2 on 条件 left join table3 on 条件 ...;\n```\n\n---\n\n#### 创建好视图：\n\n```sql\nshow tables;\n-- 结果会显示所有的表和视图\n-- 创建视图后，如果要查询数据，就可以直接使用视图来查询：\nselect * from view_name;\n```\n\n---\n\n> 视图一般是创建来进行数据查询的，如果要修改数据，都是直接修改表\n\n### 视图的作用：\n\n* 提高了重用性，就像是把一个查询封装到一个函数\n\n* 对数据库重构时，对程序影响小\n* 提高了安全性能\n* 让查询时数据更加清晰\n\n","source":"_posts/RDBMS的视图.md","raw":"---\ntitle: RDBMS的视图\ndate: 2019-08-30 18:52:43\ntags: RDBMS\n---\n\n## 关系型数据库的虚拟表——视图\n\n#### 在我们使用sql语句对视图操作时，和操作普通的表基本是一样的，那么为什么要使用视图呢？\n\n#### 通过建立表的虚拟表视图，可以使得在查询时间更加方便和简洁，同时也对sql代码操作和数据库的表结构之间解耦合。使得数据表的修改对sql语句的影响减少，从而减少修改工作量，提高效率。视图在使用时和调用函数差不多，其实就像是子查询一样，调用了这个函数【视图】，把函数【视图】查询的结果返回作为一个新的表内容。\n\n---\n\n#### sql语句创建视图：\n\n```sql\ncreate view view_name as select语句;\ncreate view view_name as select * from table1 left join table2 on 条件 left join table3 on 条件 ...;\n```\n\n---\n\n#### 创建好视图：\n\n```sql\nshow tables;\n-- 结果会显示所有的表和视图\n-- 创建视图后，如果要查询数据，就可以直接使用视图来查询：\nselect * from view_name;\n```\n\n---\n\n> 视图一般是创建来进行数据查询的，如果要修改数据，都是直接修改表\n\n### 视图的作用：\n\n* 提高了重用性，就像是把一个查询封装到一个函数\n\n* 对数据库重构时，对程序影响小\n* 提高了安全性能\n* 让查询时数据更加清晰\n\n","slug":"RDBMS的视图","published":1,"updated":"2019-09-21T12:04:09.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7ax0008ggvkpbznfbtg","content":"<h2 id=\"关系型数据库的虚拟表——视图\"><a href=\"#关系型数据库的虚拟表——视图\" class=\"headerlink\" title=\"关系型数据库的虚拟表——视图\"></a>关系型数据库的虚拟表——视图</h2><h4 id=\"在我们使用sql语句对视图操作时，和操作普通的表基本是一样的，那么为什么要使用视图呢？\"><a href=\"#在我们使用sql语句对视图操作时，和操作普通的表基本是一样的，那么为什么要使用视图呢？\" class=\"headerlink\" title=\"在我们使用sql语句对视图操作时，和操作普通的表基本是一样的，那么为什么要使用视图呢？\"></a>在我们使用sql语句对视图操作时，和操作普通的表基本是一样的，那么为什么要使用视图呢？</h4><h4 id=\"通过建立表的虚拟表视图，可以使得在查询时间更加方便和简洁，同时也对sql代码操作和数据库的表结构之间解耦合。使得数据表的修改对sql语句的影响减少，从而减少修改工作量，提高效率。视图在使用时和调用函数差不多，其实就像是子查询一样，调用了这个函数【视图】，把函数【视图】查询的结果返回作为一个新的表内容。\"><a href=\"#通过建立表的虚拟表视图，可以使得在查询时间更加方便和简洁，同时也对sql代码操作和数据库的表结构之间解耦合。使得数据表的修改对sql语句的影响减少，从而减少修改工作量，提高效率。视图在使用时和调用函数差不多，其实就像是子查询一样，调用了这个函数【视图】，把函数【视图】查询的结果返回作为一个新的表内容。\" class=\"headerlink\" title=\"通过建立表的虚拟表视图，可以使得在查询时间更加方便和简洁，同时也对sql代码操作和数据库的表结构之间解耦合。使得数据表的修改对sql语句的影响减少，从而减少修改工作量，提高效率。视图在使用时和调用函数差不多，其实就像是子查询一样，调用了这个函数【视图】，把函数【视图】查询的结果返回作为一个新的表内容。\"></a>通过建立表的虚拟表视图，可以使得在查询时间更加方便和简洁，同时也对sql代码操作和数据库的表结构之间解耦合。使得数据表的修改对sql语句的影响减少，从而减少修改工作量，提高效率。视图在使用时和调用函数差不多，其实就像是子查询一样，调用了这个函数【视图】，把函数【视图】查询的结果返回作为一个新的表内容。</h4><hr>\n<h4 id=\"sql语句创建视图：\"><a href=\"#sql语句创建视图：\" class=\"headerlink\" title=\"sql语句创建视图：\"></a>sql语句创建视图：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> view_name <span class=\"keyword\">as</span> <span class=\"keyword\">select</span>语句;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> view_name <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table1 <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> table2 <span class=\"keyword\">on</span> 条件 <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> table3 <span class=\"keyword\">on</span> 条件 ...;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"创建好视图：\"><a href=\"#创建好视图：\" class=\"headerlink\" title=\"创建好视图：\"></a>创建好视图：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 结果会显示所有的表和视图</span></span><br><span class=\"line\"><span class=\"comment\">-- 创建视图后，如果要查询数据，就可以直接使用视图来查询：</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> view_name;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>视图一般是创建来进行数据查询的，如果要修改数据，都是直接修改表</p>\n</blockquote>\n<h3 id=\"视图的作用：\"><a href=\"#视图的作用：\" class=\"headerlink\" title=\"视图的作用：\"></a>视图的作用：</h3><ul>\n<li><p>提高了重用性，就像是把一个查询封装到一个函数</p>\n</li>\n<li><p>对数据库重构时，对程序影响小</p>\n</li>\n<li><p>提高了安全性能</p>\n</li>\n<li><p>让查询时数据更加清晰</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关系型数据库的虚拟表——视图\"><a href=\"#关系型数据库的虚拟表——视图\" class=\"headerlink\" title=\"关系型数据库的虚拟表——视图\"></a>关系型数据库的虚拟表——视图</h2><h4 id=\"在我们使用sql语句对视图操作时，和操作普通的表基本是一样的，那么为什么要使用视图呢？\"><a href=\"#在我们使用sql语句对视图操作时，和操作普通的表基本是一样的，那么为什么要使用视图呢？\" class=\"headerlink\" title=\"在我们使用sql语句对视图操作时，和操作普通的表基本是一样的，那么为什么要使用视图呢？\"></a>在我们使用sql语句对视图操作时，和操作普通的表基本是一样的，那么为什么要使用视图呢？</h4><h4 id=\"通过建立表的虚拟表视图，可以使得在查询时间更加方便和简洁，同时也对sql代码操作和数据库的表结构之间解耦合。使得数据表的修改对sql语句的影响减少，从而减少修改工作量，提高效率。视图在使用时和调用函数差不多，其实就像是子查询一样，调用了这个函数【视图】，把函数【视图】查询的结果返回作为一个新的表内容。\"><a href=\"#通过建立表的虚拟表视图，可以使得在查询时间更加方便和简洁，同时也对sql代码操作和数据库的表结构之间解耦合。使得数据表的修改对sql语句的影响减少，从而减少修改工作量，提高效率。视图在使用时和调用函数差不多，其实就像是子查询一样，调用了这个函数【视图】，把函数【视图】查询的结果返回作为一个新的表内容。\" class=\"headerlink\" title=\"通过建立表的虚拟表视图，可以使得在查询时间更加方便和简洁，同时也对sql代码操作和数据库的表结构之间解耦合。使得数据表的修改对sql语句的影响减少，从而减少修改工作量，提高效率。视图在使用时和调用函数差不多，其实就像是子查询一样，调用了这个函数【视图】，把函数【视图】查询的结果返回作为一个新的表内容。\"></a>通过建立表的虚拟表视图，可以使得在查询时间更加方便和简洁，同时也对sql代码操作和数据库的表结构之间解耦合。使得数据表的修改对sql语句的影响减少，从而减少修改工作量，提高效率。视图在使用时和调用函数差不多，其实就像是子查询一样，调用了这个函数【视图】，把函数【视图】查询的结果返回作为一个新的表内容。</h4><hr>\n<h4 id=\"sql语句创建视图：\"><a href=\"#sql语句创建视图：\" class=\"headerlink\" title=\"sql语句创建视图：\"></a>sql语句创建视图：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> view_name <span class=\"keyword\">as</span> <span class=\"keyword\">select</span>语句;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> view_name <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table1 <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> table2 <span class=\"keyword\">on</span> 条件 <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> table3 <span class=\"keyword\">on</span> 条件 ...;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"创建好视图：\"><a href=\"#创建好视图：\" class=\"headerlink\" title=\"创建好视图：\"></a>创建好视图：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 结果会显示所有的表和视图</span></span><br><span class=\"line\"><span class=\"comment\">-- 创建视图后，如果要查询数据，就可以直接使用视图来查询：</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> view_name;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>视图一般是创建来进行数据查询的，如果要修改数据，都是直接修改表</p>\n</blockquote>\n<h3 id=\"视图的作用：\"><a href=\"#视图的作用：\" class=\"headerlink\" title=\"视图的作用：\"></a>视图的作用：</h3><ul>\n<li><p>提高了重用性，就像是把一个查询封装到一个函数</p>\n</li>\n<li><p>对数据库重构时，对程序影响小</p>\n</li>\n<li><p>提高了安全性能</p>\n</li>\n<li><p>让查询时数据更加清晰</p>\n</li>\n</ul>\n"},{"title":"RDBMS索引","date":"2019-08-30T13:03:54.000Z","_content":"\n### 索引是一种特殊的文件(innoDB数据表上的索引是表空间的一个组成部分)，包含了表里所有记录的引用指针，就相当于书的目录，可以方便查找数据。\n\n---\n\n#### sql语句建立索引：\n\n```sql\nset profiling=1;  -- 开启运行时间监测\n-- 执行一些操作后：\nshow profiles;  -- 查看执行时间\n-- --\n-- 创建索引：\ncreate index index_name on table_name(字段名[(数值)]) ; -- （）中的数值是字符类型才需要，如果是数字类型不需要\n-- --\nshow index from table_name;  -- 查看某个表的索引\ndrop index index_name(索引名) on table_name;  -- 删除索引\n```\n\n---\n\n#### 创建索引，在使用sql查询时可以通过索引来查找，这样查找会比没有索引快很多，但是建立索引是在数据库表的数据很大很多的时候建立索引，如果数据记录不多，就没有必要建立索引。\n\n---\n\n#### 索引的原理实际上是通过算法，把各个数据记录分区，当查找某个记录时，就根据该记录在哪个分区，然后到这个分区里面找，这样就大大减少了查询的时间，效率更高。\n\n---\n\n> ### 建立表的时候，如果设置了主键/外键，那么数据库系统通常会自动为主键/外键创建索引~\n\n","source":"_posts/RDBMS索引.md","raw":"---\ntitle: RDBMS索引\ndate: 2019-08-30 21:03:54\ntags: RDBMS\n---\n\n### 索引是一种特殊的文件(innoDB数据表上的索引是表空间的一个组成部分)，包含了表里所有记录的引用指针，就相当于书的目录，可以方便查找数据。\n\n---\n\n#### sql语句建立索引：\n\n```sql\nset profiling=1;  -- 开启运行时间监测\n-- 执行一些操作后：\nshow profiles;  -- 查看执行时间\n-- --\n-- 创建索引：\ncreate index index_name on table_name(字段名[(数值)]) ; -- （）中的数值是字符类型才需要，如果是数字类型不需要\n-- --\nshow index from table_name;  -- 查看某个表的索引\ndrop index index_name(索引名) on table_name;  -- 删除索引\n```\n\n---\n\n#### 创建索引，在使用sql查询时可以通过索引来查找，这样查找会比没有索引快很多，但是建立索引是在数据库表的数据很大很多的时候建立索引，如果数据记录不多，就没有必要建立索引。\n\n---\n\n#### 索引的原理实际上是通过算法，把各个数据记录分区，当查找某个记录时，就根据该记录在哪个分区，然后到这个分区里面找，这样就大大减少了查询的时间，效率更高。\n\n---\n\n> ### 建立表的时候，如果设置了主键/外键，那么数据库系统通常会自动为主键/外键创建索引~\n\n","slug":"RDBMS索引","published":1,"updated":"2019-10-17T08:31:38.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7b30009ggvkx929bzs9","content":"<h3 id=\"索引是一种特殊的文件-innoDB数据表上的索引是表空间的一个组成部分-，包含了表里所有记录的引用指针，就相当于书的目录，可以方便查找数据。\"><a href=\"#索引是一种特殊的文件-innoDB数据表上的索引是表空间的一个组成部分-，包含了表里所有记录的引用指针，就相当于书的目录，可以方便查找数据。\" class=\"headerlink\" title=\"索引是一种特殊的文件(innoDB数据表上的索引是表空间的一个组成部分)，包含了表里所有记录的引用指针，就相当于书的目录，可以方便查找数据。\"></a>索引是一种特殊的文件(innoDB数据表上的索引是表空间的一个组成部分)，包含了表里所有记录的引用指针，就相当于书的目录，可以方便查找数据。</h3><hr>\n<h4 id=\"sql语句建立索引：\"><a href=\"#sql语句建立索引：\" class=\"headerlink\" title=\"sql语句建立索引：\"></a>sql语句建立索引：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> profiling=<span class=\"number\">1</span>;  <span class=\"comment\">-- 开启运行时间监测</span></span><br><span class=\"line\"><span class=\"comment\">-- 执行一些操作后：</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">profiles</span>;  <span class=\"comment\">-- 查看执行时间</span></span><br><span class=\"line\"><span class=\"comment\">-- --</span></span><br><span class=\"line\"><span class=\"comment\">-- 创建索引：</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> index_name <span class=\"keyword\">on</span> table_name(字段名[(数值)]) ; <span class=\"comment\">-- （）中的数值是字符类型才需要，如果是数字类型不需要</span></span><br><span class=\"line\"><span class=\"comment\">-- --</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">index</span> <span class=\"keyword\">from</span> table_name;  <span class=\"comment\">-- 查看某个表的索引</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">index</span> index_name(索引名) <span class=\"keyword\">on</span> table_name;  <span class=\"comment\">-- 删除索引</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"创建索引，在使用sql查询时可以通过索引来查找，这样查找会比没有索引快很多，但是建立索引是在数据库表的数据很大很多的时候建立索引，如果数据记录不多，就没有必要建立索引。\"><a href=\"#创建索引，在使用sql查询时可以通过索引来查找，这样查找会比没有索引快很多，但是建立索引是在数据库表的数据很大很多的时候建立索引，如果数据记录不多，就没有必要建立索引。\" class=\"headerlink\" title=\"创建索引，在使用sql查询时可以通过索引来查找，这样查找会比没有索引快很多，但是建立索引是在数据库表的数据很大很多的时候建立索引，如果数据记录不多，就没有必要建立索引。\"></a>创建索引，在使用sql查询时可以通过索引来查找，这样查找会比没有索引快很多，但是建立索引是在数据库表的数据很大很多的时候建立索引，如果数据记录不多，就没有必要建立索引。</h4><hr>\n<h4 id=\"索引的原理实际上是通过算法，把各个数据记录分区，当查找某个记录时，就根据该记录在哪个分区，然后到这个分区里面找，这样就大大减少了查询的时间，效率更高。\"><a href=\"#索引的原理实际上是通过算法，把各个数据记录分区，当查找某个记录时，就根据该记录在哪个分区，然后到这个分区里面找，这样就大大减少了查询的时间，效率更高。\" class=\"headerlink\" title=\"索引的原理实际上是通过算法，把各个数据记录分区，当查找某个记录时，就根据该记录在哪个分区，然后到这个分区里面找，这样就大大减少了查询的时间，效率更高。\"></a>索引的原理实际上是通过算法，把各个数据记录分区，当查找某个记录时，就根据该记录在哪个分区，然后到这个分区里面找，这样就大大减少了查询的时间，效率更高。</h4><hr>\n<blockquote>\n<h3 id=\"建立表的时候，如果设置了主键-外键，那么数据库系统通常会自动为主键-外键创建索引\"><a href=\"#建立表的时候，如果设置了主键-外键，那么数据库系统通常会自动为主键-外键创建索引\" class=\"headerlink\" title=\"建立表的时候，如果设置了主键/外键，那么数据库系统通常会自动为主键/外键创建索引~\"></a>建立表的时候，如果设置了主键/外键，那么数据库系统通常会自动为主键/外键创建索引~</h3></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"索引是一种特殊的文件-innoDB数据表上的索引是表空间的一个组成部分-，包含了表里所有记录的引用指针，就相当于书的目录，可以方便查找数据。\"><a href=\"#索引是一种特殊的文件-innoDB数据表上的索引是表空间的一个组成部分-，包含了表里所有记录的引用指针，就相当于书的目录，可以方便查找数据。\" class=\"headerlink\" title=\"索引是一种特殊的文件(innoDB数据表上的索引是表空间的一个组成部分)，包含了表里所有记录的引用指针，就相当于书的目录，可以方便查找数据。\"></a>索引是一种特殊的文件(innoDB数据表上的索引是表空间的一个组成部分)，包含了表里所有记录的引用指针，就相当于书的目录，可以方便查找数据。</h3><hr>\n<h4 id=\"sql语句建立索引：\"><a href=\"#sql语句建立索引：\" class=\"headerlink\" title=\"sql语句建立索引：\"></a>sql语句建立索引：</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> profiling=<span class=\"number\">1</span>;  <span class=\"comment\">-- 开启运行时间监测</span></span><br><span class=\"line\"><span class=\"comment\">-- 执行一些操作后：</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">profiles</span>;  <span class=\"comment\">-- 查看执行时间</span></span><br><span class=\"line\"><span class=\"comment\">-- --</span></span><br><span class=\"line\"><span class=\"comment\">-- 创建索引：</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> index_name <span class=\"keyword\">on</span> table_name(字段名[(数值)]) ; <span class=\"comment\">-- （）中的数值是字符类型才需要，如果是数字类型不需要</span></span><br><span class=\"line\"><span class=\"comment\">-- --</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">index</span> <span class=\"keyword\">from</span> table_name;  <span class=\"comment\">-- 查看某个表的索引</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">index</span> index_name(索引名) <span class=\"keyword\">on</span> table_name;  <span class=\"comment\">-- 删除索引</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"创建索引，在使用sql查询时可以通过索引来查找，这样查找会比没有索引快很多，但是建立索引是在数据库表的数据很大很多的时候建立索引，如果数据记录不多，就没有必要建立索引。\"><a href=\"#创建索引，在使用sql查询时可以通过索引来查找，这样查找会比没有索引快很多，但是建立索引是在数据库表的数据很大很多的时候建立索引，如果数据记录不多，就没有必要建立索引。\" class=\"headerlink\" title=\"创建索引，在使用sql查询时可以通过索引来查找，这样查找会比没有索引快很多，但是建立索引是在数据库表的数据很大很多的时候建立索引，如果数据记录不多，就没有必要建立索引。\"></a>创建索引，在使用sql查询时可以通过索引来查找，这样查找会比没有索引快很多，但是建立索引是在数据库表的数据很大很多的时候建立索引，如果数据记录不多，就没有必要建立索引。</h4><hr>\n<h4 id=\"索引的原理实际上是通过算法，把各个数据记录分区，当查找某个记录时，就根据该记录在哪个分区，然后到这个分区里面找，这样就大大减少了查询的时间，效率更高。\"><a href=\"#索引的原理实际上是通过算法，把各个数据记录分区，当查找某个记录时，就根据该记录在哪个分区，然后到这个分区里面找，这样就大大减少了查询的时间，效率更高。\" class=\"headerlink\" title=\"索引的原理实际上是通过算法，把各个数据记录分区，当查找某个记录时，就根据该记录在哪个分区，然后到这个分区里面找，这样就大大减少了查询的时间，效率更高。\"></a>索引的原理实际上是通过算法，把各个数据记录分区，当查找某个记录时，就根据该记录在哪个分区，然后到这个分区里面找，这样就大大减少了查询的时间，效率更高。</h4><hr>\n<blockquote>\n<h3 id=\"建立表的时候，如果设置了主键-外键，那么数据库系统通常会自动为主键-外键创建索引\"><a href=\"#建立表的时候，如果设置了主键-外键，那么数据库系统通常会自动为主键-外键创建索引\" class=\"headerlink\" title=\"建立表的时候，如果设置了主键/外键，那么数据库系统通常会自动为主键/外键创建索引~\"></a>建立表的时候，如果设置了主键/外键，那么数据库系统通常会自动为主键/外键创建索引~</h3></blockquote>\n"},{"title":"SQL语句","date":"2019-08-28T14:06:06.000Z","_content":"\n## RDBMS，通过SQL语句操作数据库\n\n---\n\n### ***SQL基本操作语句：***\n\n```sql\n登录mysql： mysql -uroot -p\n显示数据库： show databases;\n显示当前数据库版本： select version();\n显示当前时间： select now();\n执行sql文件： source xx.sql;\n创建数据库： create database database_name;\n删除数据库： drop database database_name;\n显示创建数据库的过程： show create database database_name;\n选择使用数据库： use database_name;\n显示当前使用的数据库： select database();\n显示当前数据库的表： show tables;\n创建表： create table table_name(\n\t\t字段名 数据类型 约束条件 默认值\n\t\t...\n\t\t...\n\t);\n注意：{\n\t基本约束条件有：\n\t\tunsigned : 无符号类型 【如：tinyint，-128-127，变成无符号类型，0-255】\n\t\tnull : 可以为空【默认】\n\t\tnot null : 不可为空\n\t\tprimary key : 主键\n\t\tauto_increment : 数值递增\n\t\tdefault xxx : 设置默认值为xxx\n}\n删除表： drop table table_name;\n修改表名： rename table old_table_name to  new_table_name;\n显示创建表的过程： show create table table_name;\n显示某个表结构： desc table_name;\n向表插入数据： insert into table_name(字段...) values(对应的值...);\n向表查询数据： select 字段名1, 字段名2, ... from table_name;\n向表添加字段： alter table table_name add 字段名 数据类型 约束条件 默认值;\n向表修改字段的类型和约束： alter table table_name modify 字段名 新的(数据类型 约束条件 默认值);\n向表修改字段名或者类型和约束条件： alter table table_name change 原字段名 新字段名 (数据类型 约束条件 默认值);\n向表删除字段： alter table table_name drop 字段名;\n向表修改记录信息： update table_name set 字段名1=新值， 字段名2=新值，... where 条件(id=？);\n向表删除记录： delete from table_name where 条件;\n```\n\n---\n\n### ***SQL查询语句：  -- []表示可有可无***\n\n```sql\n1. select * from table_name [where 条件1 and 条件2 or 条件3 and not 条件4];  -- where是条件查询\n2. select 字段名1, 字段名2,... from table_name [where 条件1 and 条件2 or 条件3 and not 条件4];\n3. select table_name.字段名1, table_name.字段名2,... from table_name [where 条件1 and 条件2 or 条件3 and not 条件4];\n4. select tn.字段名1, tn.字段名2,... from table_name as tn [where 条件1 and 条件2 or 条件3 and not 条件4];\n5. select 字段名1 as 别名, 字段名2 as 别名,... from table_name [where 条件1 and 条件2 or 条件3 and not 条件4];\n6. select distinct * from table_name [where 条件1 and 条件2 or 条件3 and not 条件4];  -- distinct是消除重复的结果\n7. select * from table_name [where 条件1 and 条件2 or 条件3 and not 条件4]; -- 使用and、or、not的多个条件查询\n8. select * from table_name where 字段名 like \"%关%键%字%\";  -- 模糊查询，%表示0个或多个任意字符，_表示一个任意字符\n9. select * from table_name where 字段名 rlike 正则表达式;  --  使用正则表达式来进行模糊查询，效率比较高\n10. select * from table_name where 字段名 [not] in (值1, 值2, ...);  -- 范围查询\n11. select * from table_name where 字段名 [not] between ... and ...; -- 范围查询\n12. select * from table_name where 字段名 is [not] null;  -- 空判断条件，是空或者不是空\n13. select * from table_name [where 条件] order by 字段名1 [, 字段名2, ...] [asc(默认)/desc] -- asc是默认值，是升序\n14. -- 聚合函数查询：{count(), max(), min(), avg(), sum(), round()} : \n    select count(字段名) from table_name [where 条件];  -- 取总条数\n    select max(字段名) from table_name [where 条件];  -- 取最大值\n    select min(字段名) from table_name [where 条件];  -- 取最小值\n    select avg(字段名) from table_name [where 条件];  -- 取平均值\n    select sum(字段名) from table_name [where 条件];  -- 取求和\n    select round(xxx.xxx, y) from table_name [where 条件];  -- 四色五入或取位，把 xxx.xxx 取 y 位小数\n15. -- 分组操作，一般和聚合函数一起使用 : \n    select 聚合函数, 分组字段/分组条件 from table_name [where 条件] group by 分组字段/分组条件;\n    select 分组字段/分组条件, group_concat(字段名1, [, 分隔符,] 字段名2, ...) from table_name [where 条件] group by 分组字段/分组条件;\n16. -- having是对查询结果[分组结果]的条件筛选操作，where是对原始表的全部数据进行筛选操作 : \n    select 分组字段/分组条件, ... from table_name [where 条件] group by 分组字段/分组条件 having 条件(集合函数条件或其他条件)\n17. -- limit(一般用来进行分页操作) ，注意：limit操作要放在语句最后: \n    select * from table_name [where 条件] limit [0, ] x个数;  -- 表示查询 x 个记录， 默认是从第一条记录开始\n18. -- 连接查询{\n    - 内连接查询 : 查询结果是两个表匹配到的数据 : (表名1 inner join 表名2 on 条件)\n    - 右连接查询 : 查询结果是两个表匹配到的数据，右表特有的数据，对于左边不存在的数据使用null填充 : (表名1 right join 表名2 on 条件)\n    - 左连接查询 : 查询结果是两个表匹配到的数据，左表特有的数据，对于右边不存在的数据使用null填充 : (表名1 left join 表名2 on 条件))\n      }\n      select * from 表1 inner join 表2 on 两个表的字段连接条件 [having 条件] [order by 条件];\n      select * from 表1 left join 表2 on 两个表的字段连接条件 [having 条件] [order by 条件];  \n      -- 右连接比较少用，如需要直接把左连接的表位置交换\n      -- 自关联查询，是同一个表的连接查询，如：省市级联表的自关联操作\n19. 子查询： 使用子查询的结果作为父查询的条件查询\n    select * from table_name where 字段名/条件=(select xxx from table_name where 条件);\n```\n\n---\n\n> ### sql基本操作差不多就是这些了～\n\n","source":"_posts/SQL语句.md","raw":"---\ntitle: SQL语句\ndate: 2019-08-28 22:06:06\ntags: RDBMS\n---\n\n## RDBMS，通过SQL语句操作数据库\n\n---\n\n### ***SQL基本操作语句：***\n\n```sql\n登录mysql： mysql -uroot -p\n显示数据库： show databases;\n显示当前数据库版本： select version();\n显示当前时间： select now();\n执行sql文件： source xx.sql;\n创建数据库： create database database_name;\n删除数据库： drop database database_name;\n显示创建数据库的过程： show create database database_name;\n选择使用数据库： use database_name;\n显示当前使用的数据库： select database();\n显示当前数据库的表： show tables;\n创建表： create table table_name(\n\t\t字段名 数据类型 约束条件 默认值\n\t\t...\n\t\t...\n\t);\n注意：{\n\t基本约束条件有：\n\t\tunsigned : 无符号类型 【如：tinyint，-128-127，变成无符号类型，0-255】\n\t\tnull : 可以为空【默认】\n\t\tnot null : 不可为空\n\t\tprimary key : 主键\n\t\tauto_increment : 数值递增\n\t\tdefault xxx : 设置默认值为xxx\n}\n删除表： drop table table_name;\n修改表名： rename table old_table_name to  new_table_name;\n显示创建表的过程： show create table table_name;\n显示某个表结构： desc table_name;\n向表插入数据： insert into table_name(字段...) values(对应的值...);\n向表查询数据： select 字段名1, 字段名2, ... from table_name;\n向表添加字段： alter table table_name add 字段名 数据类型 约束条件 默认值;\n向表修改字段的类型和约束： alter table table_name modify 字段名 新的(数据类型 约束条件 默认值);\n向表修改字段名或者类型和约束条件： alter table table_name change 原字段名 新字段名 (数据类型 约束条件 默认值);\n向表删除字段： alter table table_name drop 字段名;\n向表修改记录信息： update table_name set 字段名1=新值， 字段名2=新值，... where 条件(id=？);\n向表删除记录： delete from table_name where 条件;\n```\n\n---\n\n### ***SQL查询语句：  -- []表示可有可无***\n\n```sql\n1. select * from table_name [where 条件1 and 条件2 or 条件3 and not 条件4];  -- where是条件查询\n2. select 字段名1, 字段名2,... from table_name [where 条件1 and 条件2 or 条件3 and not 条件4];\n3. select table_name.字段名1, table_name.字段名2,... from table_name [where 条件1 and 条件2 or 条件3 and not 条件4];\n4. select tn.字段名1, tn.字段名2,... from table_name as tn [where 条件1 and 条件2 or 条件3 and not 条件4];\n5. select 字段名1 as 别名, 字段名2 as 别名,... from table_name [where 条件1 and 条件2 or 条件3 and not 条件4];\n6. select distinct * from table_name [where 条件1 and 条件2 or 条件3 and not 条件4];  -- distinct是消除重复的结果\n7. select * from table_name [where 条件1 and 条件2 or 条件3 and not 条件4]; -- 使用and、or、not的多个条件查询\n8. select * from table_name where 字段名 like \"%关%键%字%\";  -- 模糊查询，%表示0个或多个任意字符，_表示一个任意字符\n9. select * from table_name where 字段名 rlike 正则表达式;  --  使用正则表达式来进行模糊查询，效率比较高\n10. select * from table_name where 字段名 [not] in (值1, 值2, ...);  -- 范围查询\n11. select * from table_name where 字段名 [not] between ... and ...; -- 范围查询\n12. select * from table_name where 字段名 is [not] null;  -- 空判断条件，是空或者不是空\n13. select * from table_name [where 条件] order by 字段名1 [, 字段名2, ...] [asc(默认)/desc] -- asc是默认值，是升序\n14. -- 聚合函数查询：{count(), max(), min(), avg(), sum(), round()} : \n    select count(字段名) from table_name [where 条件];  -- 取总条数\n    select max(字段名) from table_name [where 条件];  -- 取最大值\n    select min(字段名) from table_name [where 条件];  -- 取最小值\n    select avg(字段名) from table_name [where 条件];  -- 取平均值\n    select sum(字段名) from table_name [where 条件];  -- 取求和\n    select round(xxx.xxx, y) from table_name [where 条件];  -- 四色五入或取位，把 xxx.xxx 取 y 位小数\n15. -- 分组操作，一般和聚合函数一起使用 : \n    select 聚合函数, 分组字段/分组条件 from table_name [where 条件] group by 分组字段/分组条件;\n    select 分组字段/分组条件, group_concat(字段名1, [, 分隔符,] 字段名2, ...) from table_name [where 条件] group by 分组字段/分组条件;\n16. -- having是对查询结果[分组结果]的条件筛选操作，where是对原始表的全部数据进行筛选操作 : \n    select 分组字段/分组条件, ... from table_name [where 条件] group by 分组字段/分组条件 having 条件(集合函数条件或其他条件)\n17. -- limit(一般用来进行分页操作) ，注意：limit操作要放在语句最后: \n    select * from table_name [where 条件] limit [0, ] x个数;  -- 表示查询 x 个记录， 默认是从第一条记录开始\n18. -- 连接查询{\n    - 内连接查询 : 查询结果是两个表匹配到的数据 : (表名1 inner join 表名2 on 条件)\n    - 右连接查询 : 查询结果是两个表匹配到的数据，右表特有的数据，对于左边不存在的数据使用null填充 : (表名1 right join 表名2 on 条件)\n    - 左连接查询 : 查询结果是两个表匹配到的数据，左表特有的数据，对于右边不存在的数据使用null填充 : (表名1 left join 表名2 on 条件))\n      }\n      select * from 表1 inner join 表2 on 两个表的字段连接条件 [having 条件] [order by 条件];\n      select * from 表1 left join 表2 on 两个表的字段连接条件 [having 条件] [order by 条件];  \n      -- 右连接比较少用，如需要直接把左连接的表位置交换\n      -- 自关联查询，是同一个表的连接查询，如：省市级联表的自关联操作\n19. 子查询： 使用子查询的结果作为父查询的条件查询\n    select * from table_name where 字段名/条件=(select xxx from table_name where 条件);\n```\n\n---\n\n> ### sql基本操作差不多就是这些了～\n\n","slug":"SQL语句","published":1,"updated":"2019-09-21T09:20:37.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7b5000bggvkfxsfkbj8","content":"<h2 id=\"RDBMS，通过SQL语句操作数据库\"><a href=\"#RDBMS，通过SQL语句操作数据库\" class=\"headerlink\" title=\"RDBMS，通过SQL语句操作数据库\"></a>RDBMS，通过SQL语句操作数据库</h2><hr>\n<h3 id=\"SQL基本操作语句：\"><a href=\"#SQL基本操作语句：\" class=\"headerlink\" title=\"SQL基本操作语句：\"></a><strong><em>SQL基本操作语句：</em></strong></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录mysql： mysql -uroot -p</span><br><span class=\"line\">显示数据库： <span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;</span><br><span class=\"line\">显示当前数据库版本： <span class=\"keyword\">select</span> <span class=\"keyword\">version</span>();</span><br><span class=\"line\">显示当前时间： <span class=\"keyword\">select</span> <span class=\"keyword\">now</span>();</span><br><span class=\"line\">执行sql文件： source xx.sql;</span><br><span class=\"line\">创建数据库： <span class=\"keyword\">create</span> <span class=\"keyword\">database</span> database_name;</span><br><span class=\"line\">删除数据库： <span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> database_name;</span><br><span class=\"line\">显示创建数据库的过程： <span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">database</span> database_name;</span><br><span class=\"line\">选择使用数据库： <span class=\"keyword\">use</span> database_name;</span><br><span class=\"line\">显示当前使用的数据库： <span class=\"keyword\">select</span> <span class=\"keyword\">database</span>();</span><br><span class=\"line\">显示当前数据库的表： <span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br><span class=\"line\">创建表： <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> table_name(</span><br><span class=\"line\">\t\t字段名 数据类型 约束条件 默认值</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t);</span><br><span class=\"line\">注意：&#123;</span><br><span class=\"line\">\t基本约束条件有：</span><br><span class=\"line\">\t\tunsigned : 无符号类型 【如：tinyint，-128-127，变成无符号类型，0-255】</span><br><span class=\"line\">\t\tnull : 可以为空【默认】</span><br><span class=\"line\">\t\tnot null : 不可为空</span><br><span class=\"line\">\t\tprimary key : 主键</span><br><span class=\"line\">\t\tauto_increment : 数值递增</span><br><span class=\"line\">\t\tdefault xxx : 设置默认值为xxx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">删除表： <span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> table_name;</span><br><span class=\"line\">修改表名： <span class=\"keyword\">rename</span> <span class=\"keyword\">table</span> old_table_name <span class=\"keyword\">to</span>  new_table_name;</span><br><span class=\"line\">显示创建表的过程： <span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> table_name;</span><br><span class=\"line\">显示某个表结构： desc table_name;</span><br><span class=\"line\">向表插入数据： <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> table_name(字段...) <span class=\"keyword\">values</span>(对应的值...);</span><br><span class=\"line\">向表查询数据： <span class=\"keyword\">select</span> 字段名<span class=\"number\">1</span>, 字段名<span class=\"number\">2</span>, ... <span class=\"keyword\">from</span> table_name;</span><br><span class=\"line\">向表添加字段： <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">add</span> 字段名 数据类型 约束条件 默认值;</span><br><span class=\"line\">向表修改字段的类型和约束： <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">modify</span> 字段名 新的(数据类型 约束条件 默认值);</span><br><span class=\"line\">向表修改字段名或者类型和约束条件： <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">change</span> 原字段名 新字段名 (数据类型 约束条件 默认值);</span><br><span class=\"line\">向表删除字段： <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">drop</span> 字段名;</span><br><span class=\"line\">向表修改记录信息： <span class=\"keyword\">update</span> table_name <span class=\"keyword\">set</span> 字段名<span class=\"number\">1</span>=新值， 字段名<span class=\"number\">2</span>=新值，... <span class=\"keyword\">where</span> 条件(<span class=\"keyword\">id</span>=？);</span><br><span class=\"line\">向表删除记录： <span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 条件;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"SQL查询语句：-–-表示可有可无\"><a href=\"#SQL查询语句：-–-表示可有可无\" class=\"headerlink\" title=\"SQL查询语句：  – []表示可有可无\"></a><strong><em>SQL查询语句：  – []表示可有可无</em></strong></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];  <span class=\"comment\">-- where是条件查询</span></span><br><span class=\"line\">2. <span class=\"keyword\">select</span> 字段名<span class=\"number\">1</span>, 字段名<span class=\"number\">2</span>,... <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];</span><br><span class=\"line\">3. <span class=\"keyword\">select</span> table_name.字段名<span class=\"number\">1</span>, table_name.字段名<span class=\"number\">2</span>,... <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];</span><br><span class=\"line\">4. <span class=\"keyword\">select</span> tn.字段名<span class=\"number\">1</span>, tn.字段名<span class=\"number\">2</span>,... <span class=\"keyword\">from</span> table_name <span class=\"keyword\">as</span> tn [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];</span><br><span class=\"line\">5. <span class=\"keyword\">select</span> 字段名<span class=\"number\">1</span> <span class=\"keyword\">as</span> 别名, 字段名<span class=\"number\">2</span> <span class=\"keyword\">as</span> 别名,... <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];</span><br><span class=\"line\">6. <span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> * <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];  <span class=\"comment\">-- distinct是消除重复的结果</span></span><br><span class=\"line\">7. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>]; <span class=\"comment\">-- 使用and、or、not的多个条件查询</span></span><br><span class=\"line\">8. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名 <span class=\"keyword\">like</span> <span class=\"string\">\"%关%键%字%\"</span>;  <span class=\"comment\">-- 模糊查询，%表示0个或多个任意字符，_表示一个任意字符</span></span><br><span class=\"line\">9. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名 <span class=\"keyword\">rlike</span> 正则表达式;  <span class=\"comment\">--  使用正则表达式来进行模糊查询，效率比较高</span></span><br><span class=\"line\">10. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名 [<span class=\"keyword\">not</span>] <span class=\"keyword\">in</span> (值<span class=\"number\">1</span>, 值<span class=\"number\">2</span>, ...);  <span class=\"comment\">-- 范围查询</span></span><br><span class=\"line\">11. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名 [<span class=\"keyword\">not</span>] <span class=\"keyword\">between</span> ... <span class=\"keyword\">and</span> ...; <span class=\"comment\">-- 范围查询</span></span><br><span class=\"line\">12. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名 <span class=\"keyword\">is</span> [<span class=\"keyword\">not</span>] <span class=\"literal\">null</span>;  <span class=\"comment\">-- 空判断条件，是空或者不是空</span></span><br><span class=\"line\">13. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 字段名<span class=\"number\">1</span> [, 字段名<span class=\"number\">2</span>, ...] [<span class=\"keyword\">asc</span>(默认)/<span class=\"keyword\">desc</span>] <span class=\"comment\">-- asc是默认值，是升序</span></span><br><span class=\"line\"><span class=\"number\">14.</span> <span class=\"comment\">-- 聚合函数查询：&#123;count(), max(), min(), avg(), sum(), round()&#125; : </span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(字段名) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 取总条数</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">max</span>(字段名) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 取最大值</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">min</span>(字段名) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 取最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">avg</span>(字段名) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 取平均值</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">sum</span>(字段名) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 取求和</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">round</span>(xxx.xxx, y) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 四色五入或取位，把 xxx.xxx 取 y 位小数</span></span><br><span class=\"line\">15. <span class=\"comment\">-- 分组操作，一般和聚合函数一起使用 : </span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> 聚合函数, 分组字段/分组条件 <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> 分组字段/分组条件;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> 分组字段/分组条件, <span class=\"keyword\">group_concat</span>(字段名<span class=\"number\">1</span>, [, 分隔符,] 字段名<span class=\"number\">2</span>, ...) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> 分组字段/分组条件;</span><br><span class=\"line\">16. <span class=\"comment\">-- having是对查询结果[分组结果]的条件筛选操作，where是对原始表的全部数据进行筛选操作 : </span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> 分组字段/分组条件, ... <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> 分组字段/分组条件 <span class=\"keyword\">having</span> 条件(集合函数条件或其他条件)</span><br><span class=\"line\"><span class=\"number\">17.</span> <span class=\"comment\">-- limit(一般用来进行分页操作) ，注意：limit操作要放在语句最后: </span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">limit</span> [<span class=\"number\">0</span>, ] x个数;  <span class=\"comment\">-- 表示查询 x 个记录， 默认是从第一条记录开始</span></span><br><span class=\"line\">18. <span class=\"comment\">-- 连接查询&#123;</span></span><br><span class=\"line\">    - 内连接查询 : 查询结果是两个表匹配到的数据 : (表名1 inner join 表名2 on 条件)</span><br><span class=\"line\">    - 右连接查询 : 查询结果是两个表匹配到的数据，右表特有的数据，对于左边不存在的数据使用null填充 : (表名1 right join 表名2 on 条件)</span><br><span class=\"line\">    - 左连接查询 : 查询结果是两个表匹配到的数据，左表特有的数据，对于右边不存在的数据使用null填充 : (表名1 left join 表名2 on 条件))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> 表<span class=\"number\">1</span> <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> 表<span class=\"number\">2</span> <span class=\"keyword\">on</span> 两个表的字段连接条件 [<span class=\"keyword\">having</span> 条件] [<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 条件];</span><br><span class=\"line\">      <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> 表<span class=\"number\">1</span> <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> 表<span class=\"number\">2</span> <span class=\"keyword\">on</span> 两个表的字段连接条件 [<span class=\"keyword\">having</span> 条件] [<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 条件];  </span><br><span class=\"line\">      <span class=\"comment\">-- 右连接比较少用，如需要直接把左连接的表位置交换</span></span><br><span class=\"line\">      <span class=\"comment\">-- 自关联查询，是同一个表的连接查询，如：省市级联表的自关联操作</span></span><br><span class=\"line\">19. 子查询： 使用子查询的结果作为父查询的条件查询</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名/条件=(<span class=\"keyword\">select</span> xxx <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 条件);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<h3 id=\"sql基本操作差不多就是这些了～\"><a href=\"#sql基本操作差不多就是这些了～\" class=\"headerlink\" title=\"sql基本操作差不多就是这些了～\"></a>sql基本操作差不多就是这些了～</h3></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"RDBMS，通过SQL语句操作数据库\"><a href=\"#RDBMS，通过SQL语句操作数据库\" class=\"headerlink\" title=\"RDBMS，通过SQL语句操作数据库\"></a>RDBMS，通过SQL语句操作数据库</h2><hr>\n<h3 id=\"SQL基本操作语句：\"><a href=\"#SQL基本操作语句：\" class=\"headerlink\" title=\"SQL基本操作语句：\"></a><strong><em>SQL基本操作语句：</em></strong></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">登录mysql： mysql -uroot -p</span><br><span class=\"line\">显示数据库： <span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;</span><br><span class=\"line\">显示当前数据库版本： <span class=\"keyword\">select</span> <span class=\"keyword\">version</span>();</span><br><span class=\"line\">显示当前时间： <span class=\"keyword\">select</span> <span class=\"keyword\">now</span>();</span><br><span class=\"line\">执行sql文件： source xx.sql;</span><br><span class=\"line\">创建数据库： <span class=\"keyword\">create</span> <span class=\"keyword\">database</span> database_name;</span><br><span class=\"line\">删除数据库： <span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> database_name;</span><br><span class=\"line\">显示创建数据库的过程： <span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">database</span> database_name;</span><br><span class=\"line\">选择使用数据库： <span class=\"keyword\">use</span> database_name;</span><br><span class=\"line\">显示当前使用的数据库： <span class=\"keyword\">select</span> <span class=\"keyword\">database</span>();</span><br><span class=\"line\">显示当前数据库的表： <span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br><span class=\"line\">创建表： <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> table_name(</span><br><span class=\"line\">\t\t字段名 数据类型 约束条件 默认值</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t);</span><br><span class=\"line\">注意：&#123;</span><br><span class=\"line\">\t基本约束条件有：</span><br><span class=\"line\">\t\tunsigned : 无符号类型 【如：tinyint，-128-127，变成无符号类型，0-255】</span><br><span class=\"line\">\t\tnull : 可以为空【默认】</span><br><span class=\"line\">\t\tnot null : 不可为空</span><br><span class=\"line\">\t\tprimary key : 主键</span><br><span class=\"line\">\t\tauto_increment : 数值递增</span><br><span class=\"line\">\t\tdefault xxx : 设置默认值为xxx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">删除表： <span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> table_name;</span><br><span class=\"line\">修改表名： <span class=\"keyword\">rename</span> <span class=\"keyword\">table</span> old_table_name <span class=\"keyword\">to</span>  new_table_name;</span><br><span class=\"line\">显示创建表的过程： <span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> table_name;</span><br><span class=\"line\">显示某个表结构： desc table_name;</span><br><span class=\"line\">向表插入数据： <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> table_name(字段...) <span class=\"keyword\">values</span>(对应的值...);</span><br><span class=\"line\">向表查询数据： <span class=\"keyword\">select</span> 字段名<span class=\"number\">1</span>, 字段名<span class=\"number\">2</span>, ... <span class=\"keyword\">from</span> table_name;</span><br><span class=\"line\">向表添加字段： <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">add</span> 字段名 数据类型 约束条件 默认值;</span><br><span class=\"line\">向表修改字段的类型和约束： <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">modify</span> 字段名 新的(数据类型 约束条件 默认值);</span><br><span class=\"line\">向表修改字段名或者类型和约束条件： <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">change</span> 原字段名 新字段名 (数据类型 约束条件 默认值);</span><br><span class=\"line\">向表删除字段： <span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name <span class=\"keyword\">drop</span> 字段名;</span><br><span class=\"line\">向表修改记录信息： <span class=\"keyword\">update</span> table_name <span class=\"keyword\">set</span> 字段名<span class=\"number\">1</span>=新值， 字段名<span class=\"number\">2</span>=新值，... <span class=\"keyword\">where</span> 条件(<span class=\"keyword\">id</span>=？);</span><br><span class=\"line\">向表删除记录： <span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 条件;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"SQL查询语句：-–-表示可有可无\"><a href=\"#SQL查询语句：-–-表示可有可无\" class=\"headerlink\" title=\"SQL查询语句：  – []表示可有可无\"></a><strong><em>SQL查询语句：  – []表示可有可无</em></strong></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];  <span class=\"comment\">-- where是条件查询</span></span><br><span class=\"line\">2. <span class=\"keyword\">select</span> 字段名<span class=\"number\">1</span>, 字段名<span class=\"number\">2</span>,... <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];</span><br><span class=\"line\">3. <span class=\"keyword\">select</span> table_name.字段名<span class=\"number\">1</span>, table_name.字段名<span class=\"number\">2</span>,... <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];</span><br><span class=\"line\">4. <span class=\"keyword\">select</span> tn.字段名<span class=\"number\">1</span>, tn.字段名<span class=\"number\">2</span>,... <span class=\"keyword\">from</span> table_name <span class=\"keyword\">as</span> tn [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];</span><br><span class=\"line\">5. <span class=\"keyword\">select</span> 字段名<span class=\"number\">1</span> <span class=\"keyword\">as</span> 别名, 字段名<span class=\"number\">2</span> <span class=\"keyword\">as</span> 别名,... <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];</span><br><span class=\"line\">6. <span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> * <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>];  <span class=\"comment\">-- distinct是消除重复的结果</span></span><br><span class=\"line\">7. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件<span class=\"number\">1</span> <span class=\"keyword\">and</span> 条件<span class=\"number\">2</span> <span class=\"keyword\">or</span> 条件<span class=\"number\">3</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> 条件<span class=\"number\">4</span>]; <span class=\"comment\">-- 使用and、or、not的多个条件查询</span></span><br><span class=\"line\">8. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名 <span class=\"keyword\">like</span> <span class=\"string\">\"%关%键%字%\"</span>;  <span class=\"comment\">-- 模糊查询，%表示0个或多个任意字符，_表示一个任意字符</span></span><br><span class=\"line\">9. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名 <span class=\"keyword\">rlike</span> 正则表达式;  <span class=\"comment\">--  使用正则表达式来进行模糊查询，效率比较高</span></span><br><span class=\"line\">10. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名 [<span class=\"keyword\">not</span>] <span class=\"keyword\">in</span> (值<span class=\"number\">1</span>, 值<span class=\"number\">2</span>, ...);  <span class=\"comment\">-- 范围查询</span></span><br><span class=\"line\">11. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名 [<span class=\"keyword\">not</span>] <span class=\"keyword\">between</span> ... <span class=\"keyword\">and</span> ...; <span class=\"comment\">-- 范围查询</span></span><br><span class=\"line\">12. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名 <span class=\"keyword\">is</span> [<span class=\"keyword\">not</span>] <span class=\"literal\">null</span>;  <span class=\"comment\">-- 空判断条件，是空或者不是空</span></span><br><span class=\"line\">13. <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 字段名<span class=\"number\">1</span> [, 字段名<span class=\"number\">2</span>, ...] [<span class=\"keyword\">asc</span>(默认)/<span class=\"keyword\">desc</span>] <span class=\"comment\">-- asc是默认值，是升序</span></span><br><span class=\"line\"><span class=\"number\">14.</span> <span class=\"comment\">-- 聚合函数查询：&#123;count(), max(), min(), avg(), sum(), round()&#125; : </span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(字段名) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 取总条数</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">max</span>(字段名) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 取最大值</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">min</span>(字段名) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 取最小值</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">avg</span>(字段名) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 取平均值</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">sum</span>(字段名) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 取求和</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">round</span>(xxx.xxx, y) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件];  <span class=\"comment\">-- 四色五入或取位，把 xxx.xxx 取 y 位小数</span></span><br><span class=\"line\">15. <span class=\"comment\">-- 分组操作，一般和聚合函数一起使用 : </span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> 聚合函数, 分组字段/分组条件 <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> 分组字段/分组条件;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> 分组字段/分组条件, <span class=\"keyword\">group_concat</span>(字段名<span class=\"number\">1</span>, [, 分隔符,] 字段名<span class=\"number\">2</span>, ...) <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> 分组字段/分组条件;</span><br><span class=\"line\">16. <span class=\"comment\">-- having是对查询结果[分组结果]的条件筛选操作，where是对原始表的全部数据进行筛选操作 : </span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> 分组字段/分组条件, ... <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> 分组字段/分组条件 <span class=\"keyword\">having</span> 条件(集合函数条件或其他条件)</span><br><span class=\"line\"><span class=\"number\">17.</span> <span class=\"comment\">-- limit(一般用来进行分页操作) ，注意：limit操作要放在语句最后: </span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name [<span class=\"keyword\">where</span> 条件] <span class=\"keyword\">limit</span> [<span class=\"number\">0</span>, ] x个数;  <span class=\"comment\">-- 表示查询 x 个记录， 默认是从第一条记录开始</span></span><br><span class=\"line\">18. <span class=\"comment\">-- 连接查询&#123;</span></span><br><span class=\"line\">    - 内连接查询 : 查询结果是两个表匹配到的数据 : (表名1 inner join 表名2 on 条件)</span><br><span class=\"line\">    - 右连接查询 : 查询结果是两个表匹配到的数据，右表特有的数据，对于左边不存在的数据使用null填充 : (表名1 right join 表名2 on 条件)</span><br><span class=\"line\">    - 左连接查询 : 查询结果是两个表匹配到的数据，左表特有的数据，对于右边不存在的数据使用null填充 : (表名1 left join 表名2 on 条件))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> 表<span class=\"number\">1</span> <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> 表<span class=\"number\">2</span> <span class=\"keyword\">on</span> 两个表的字段连接条件 [<span class=\"keyword\">having</span> 条件] [<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 条件];</span><br><span class=\"line\">      <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> 表<span class=\"number\">1</span> <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> 表<span class=\"number\">2</span> <span class=\"keyword\">on</span> 两个表的字段连接条件 [<span class=\"keyword\">having</span> 条件] [<span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 条件];  </span><br><span class=\"line\">      <span class=\"comment\">-- 右连接比较少用，如需要直接把左连接的表位置交换</span></span><br><span class=\"line\">      <span class=\"comment\">-- 自关联查询，是同一个表的连接查询，如：省市级联表的自关联操作</span></span><br><span class=\"line\">19. 子查询： 使用子查询的结果作为父查询的条件查询</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 字段名/条件=(<span class=\"keyword\">select</span> xxx <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> 条件);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<h3 id=\"sql基本操作差不多就是这些了～\"><a href=\"#sql基本操作差不多就是这些了～\" class=\"headerlink\" title=\"sql基本操作差不多就是这些了～\"></a>sql基本操作差不多就是这些了～</h3></blockquote>\n"},{"title":"javaScript变量声明方式","date":"2019-06-10T15:27:53.000Z","_content":"\n## javaScript声明变量，可以通过let、var、const来声明：\n\n* #### let：块级变量声明【***es6新增的声明变量方式*** 】\n\n  * ##### 作用域是块级作用域\n\n    ```bash\n    if(true){\n    \tlet a = 1;\n    \tconsole.log(a);\n    }\n    ```\n\n  * ##### 不存在变量提升\n\n    ```bash\n    console.log(a); //这里会报错：ReferenceError: a is not defined\n    let a = 1;\n    ```\n\n  *  ##### 不能重复定义\n\n    ```bash\n    let a = 1;\n    let a =2; //这里会报错：SyntaxError: Identifier 'a' has already been declared\n    ```\n\n  * ##### 存在暂时性死区\n\n    ```bash\n    let a = 1;\n    if(1){\n       console.log(a);  //这里会报错：ReferenceError: a is not defined,去掉这语句后，输出a结果为：2\n        let a = 2;\n        console.log(a);\n    }\n    ```\n\n- #### var 【es6前 就用来声明变量的方法】\n\n  * ##### var的作用域是函数作用域，在一个函数内利用var声明一个变量，则这个变量只在这个函数内有效\n\n    ```bash\n    function test(){\n     var a = 1;\n    console.log(a);\n    }\n    test(); // 输出结果：1\n    console.log(a); //这里会报错：ReferenceError: a is not defined\n    ```\n\n  * ##### 存在变量提升\n\n    ```bash\n    console.log(test);\n    var test = 1;\n    //不会报错，结果为：undefined\n    ```\n\n* #### const一般用来声明常量，且声明的常量是不允许改变的，只读属性，因此就要在声明的同时赋值。\n\n  * ##### const与let一样，都是块级作用域，存在暂时性死区，不存在变量提升，不允许重复定义\n\n  * ##### 声明的常量是不允许改变\n\n    ```bash\n    const a = 1;\n    a = 2; //这里会报错：TypeError: Assignment to constant variable.\n    ```\n\n---\n\n> > ***到此，javaScript三种变量声明就介绍完了......***\n\n","source":"_posts/javaScript变量声明方式.md","raw":"---\ntitle: javaScript变量声明方式\ndate: 2019-06-10 23:27:53\ntags: javaScript\n---\n\n## javaScript声明变量，可以通过let、var、const来声明：\n\n* #### let：块级变量声明【***es6新增的声明变量方式*** 】\n\n  * ##### 作用域是块级作用域\n\n    ```bash\n    if(true){\n    \tlet a = 1;\n    \tconsole.log(a);\n    }\n    ```\n\n  * ##### 不存在变量提升\n\n    ```bash\n    console.log(a); //这里会报错：ReferenceError: a is not defined\n    let a = 1;\n    ```\n\n  *  ##### 不能重复定义\n\n    ```bash\n    let a = 1;\n    let a =2; //这里会报错：SyntaxError: Identifier 'a' has already been declared\n    ```\n\n  * ##### 存在暂时性死区\n\n    ```bash\n    let a = 1;\n    if(1){\n       console.log(a);  //这里会报错：ReferenceError: a is not defined,去掉这语句后，输出a结果为：2\n        let a = 2;\n        console.log(a);\n    }\n    ```\n\n- #### var 【es6前 就用来声明变量的方法】\n\n  * ##### var的作用域是函数作用域，在一个函数内利用var声明一个变量，则这个变量只在这个函数内有效\n\n    ```bash\n    function test(){\n     var a = 1;\n    console.log(a);\n    }\n    test(); // 输出结果：1\n    console.log(a); //这里会报错：ReferenceError: a is not defined\n    ```\n\n  * ##### 存在变量提升\n\n    ```bash\n    console.log(test);\n    var test = 1;\n    //不会报错，结果为：undefined\n    ```\n\n* #### const一般用来声明常量，且声明的常量是不允许改变的，只读属性，因此就要在声明的同时赋值。\n\n  * ##### const与let一样，都是块级作用域，存在暂时性死区，不存在变量提升，不允许重复定义\n\n  * ##### 声明的常量是不允许改变\n\n    ```bash\n    const a = 1;\n    a = 2; //这里会报错：TypeError: Assignment to constant variable.\n    ```\n\n---\n\n> > ***到此，javaScript三种变量声明就介绍完了......***\n\n","slug":"javaScript变量声明方式","published":1,"updated":"2019-08-12T14:59:06.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7b7000dggvk4fus3c3b","content":"<h2 id=\"javaScript声明变量，可以通过let、var、const来声明：\"><a href=\"#javaScript声明变量，可以通过let、var、const来声明：\" class=\"headerlink\" title=\"javaScript声明变量，可以通过let、var、const来声明：\"></a>javaScript声明变量，可以通过let、var、const来声明：</h2><ul>\n<li><h4 id=\"let：块级变量声明【es6新增的声明变量方式-】\"><a href=\"#let：块级变量声明【es6新增的声明变量方式-】\" class=\"headerlink\" title=\"let：块级变量声明【es6新增的声明变量方式 】\"></a>let：块级变量声明【<strong><em>es6新增的声明变量方式</em></strong> 】</h4><ul>\n<li><h5 id=\"作用域是块级作用域\"><a href=\"#作用域是块级作用域\" class=\"headerlink\" title=\"作用域是块级作用域\"></a>作用域是块级作用域</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">let</span> a = 1;</span><br><span class=\"line\">\tconsole.log(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a); //这里会报错：ReferenceError: a is not defined</span><br><span class=\"line\"><span class=\"built_in\">let</span> a = 1;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"不能重复定义\"><a href=\"#不能重复定义\" class=\"headerlink\" title=\"不能重复定义\"></a>不能重复定义</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> a = 1;</span><br><span class=\"line\"><span class=\"built_in\">let</span> a =2; //这里会报错：SyntaxError: Identifier <span class=\"string\">'a'</span> has already been declared</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"存在暂时性死区\"><a href=\"#存在暂时性死区\" class=\"headerlink\" title=\"存在暂时性死区\"></a>存在暂时性死区</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> a = 1;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(1)&#123;</span><br><span class=\"line\">   console.log(a);  //这里会报错：ReferenceError: a is not defined,去掉这语句后，输出a结果为：2</span><br><span class=\"line\">    <span class=\"built_in\">let</span> a = 2;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"var-【es6前-就用来声明变量的方法】\"><a href=\"#var-【es6前-就用来声明变量的方法】\" class=\"headerlink\" title=\"var 【es6前 就用来声明变量的方法】\"></a>var 【es6前 就用来声明变量的方法】</h4><ul>\n<li><h5 id=\"var的作用域是函数作用域，在一个函数内利用var声明一个变量，则这个变量只在这个函数内有效\"><a href=\"#var的作用域是函数作用域，在一个函数内利用var声明一个变量，则这个变量只在这个函数内有效\" class=\"headerlink\" title=\"var的作用域是函数作用域，在一个函数内利用var声明一个变量，则这个变量只在这个函数内有效\"></a>var的作用域是函数作用域，在一个函数内利用var声明一个变量，则这个变量只在这个函数内有效</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">test</span></span>()&#123;</span><br><span class=\"line\"> var a = 1;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">test</span>(); // 输出结果：1</span><br><span class=\"line\">console.log(a); //这里会报错：ReferenceError: a is not defined</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"存在变量提升\"><a href=\"#存在变量提升\" class=\"headerlink\" title=\"存在变量提升\"></a>存在变量提升</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(<span class=\"built_in\">test</span>);</span><br><span class=\"line\">var <span class=\"built_in\">test</span> = 1;</span><br><span class=\"line\">//不会报错，结果为：undefined</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"const一般用来声明常量，且声明的常量是不允许改变的，只读属性，因此就要在声明的同时赋值。\"><a href=\"#const一般用来声明常量，且声明的常量是不允许改变的，只读属性，因此就要在声明的同时赋值。\" class=\"headerlink\" title=\"const一般用来声明常量，且声明的常量是不允许改变的，只读属性，因此就要在声明的同时赋值。\"></a>const一般用来声明常量，且声明的常量是不允许改变的，只读属性，因此就要在声明的同时赋值。</h4><ul>\n<li><h5 id=\"const与let一样，都是块级作用域，存在暂时性死区，不存在变量提升，不允许重复定义\"><a href=\"#const与let一样，都是块级作用域，存在暂时性死区，不存在变量提升，不允许重复定义\" class=\"headerlink\" title=\"const与let一样，都是块级作用域，存在暂时性死区，不存在变量提升，不允许重复定义\"></a>const与let一样，都是块级作用域，存在暂时性死区，不存在变量提升，不允许重复定义</h5></li>\n<li><h5 id=\"声明的常量是不允许改变\"><a href=\"#声明的常量是不允许改变\" class=\"headerlink\" title=\"声明的常量是不允许改变\"></a>声明的常量是不允许改变</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = 1;</span><br><span class=\"line\">a = 2; //这里会报错：TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<blockquote>\n<p><strong><em>到此，javaScript三种变量声明就介绍完了……</em></strong></p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"javaScript声明变量，可以通过let、var、const来声明：\"><a href=\"#javaScript声明变量，可以通过let、var、const来声明：\" class=\"headerlink\" title=\"javaScript声明变量，可以通过let、var、const来声明：\"></a>javaScript声明变量，可以通过let、var、const来声明：</h2><ul>\n<li><h4 id=\"let：块级变量声明【es6新增的声明变量方式-】\"><a href=\"#let：块级变量声明【es6新增的声明变量方式-】\" class=\"headerlink\" title=\"let：块级变量声明【es6新增的声明变量方式 】\"></a>let：块级变量声明【<strong><em>es6新增的声明变量方式</em></strong> 】</h4><ul>\n<li><h5 id=\"作用域是块级作用域\"><a href=\"#作用域是块级作用域\" class=\"headerlink\" title=\"作用域是块级作用域\"></a>作用域是块级作用域</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">let</span> a = 1;</span><br><span class=\"line\">\tconsole.log(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a); //这里会报错：ReferenceError: a is not defined</span><br><span class=\"line\"><span class=\"built_in\">let</span> a = 1;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"不能重复定义\"><a href=\"#不能重复定义\" class=\"headerlink\" title=\"不能重复定义\"></a>不能重复定义</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> a = 1;</span><br><span class=\"line\"><span class=\"built_in\">let</span> a =2; //这里会报错：SyntaxError: Identifier <span class=\"string\">'a'</span> has already been declared</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"存在暂时性死区\"><a href=\"#存在暂时性死区\" class=\"headerlink\" title=\"存在暂时性死区\"></a>存在暂时性死区</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> a = 1;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(1)&#123;</span><br><span class=\"line\">   console.log(a);  //这里会报错：ReferenceError: a is not defined,去掉这语句后，输出a结果为：2</span><br><span class=\"line\">    <span class=\"built_in\">let</span> a = 2;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"var-【es6前-就用来声明变量的方法】\"><a href=\"#var-【es6前-就用来声明变量的方法】\" class=\"headerlink\" title=\"var 【es6前 就用来声明变量的方法】\"></a>var 【es6前 就用来声明变量的方法】</h4><ul>\n<li><h5 id=\"var的作用域是函数作用域，在一个函数内利用var声明一个变量，则这个变量只在这个函数内有效\"><a href=\"#var的作用域是函数作用域，在一个函数内利用var声明一个变量，则这个变量只在这个函数内有效\" class=\"headerlink\" title=\"var的作用域是函数作用域，在一个函数内利用var声明一个变量，则这个变量只在这个函数内有效\"></a>var的作用域是函数作用域，在一个函数内利用var声明一个变量，则这个变量只在这个函数内有效</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">test</span></span>()&#123;</span><br><span class=\"line\"> var a = 1;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">test</span>(); // 输出结果：1</span><br><span class=\"line\">console.log(a); //这里会报错：ReferenceError: a is not defined</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"存在变量提升\"><a href=\"#存在变量提升\" class=\"headerlink\" title=\"存在变量提升\"></a>存在变量提升</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(<span class=\"built_in\">test</span>);</span><br><span class=\"line\">var <span class=\"built_in\">test</span> = 1;</span><br><span class=\"line\">//不会报错，结果为：undefined</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"const一般用来声明常量，且声明的常量是不允许改变的，只读属性，因此就要在声明的同时赋值。\"><a href=\"#const一般用来声明常量，且声明的常量是不允许改变的，只读属性，因此就要在声明的同时赋值。\" class=\"headerlink\" title=\"const一般用来声明常量，且声明的常量是不允许改变的，只读属性，因此就要在声明的同时赋值。\"></a>const一般用来声明常量，且声明的常量是不允许改变的，只读属性，因此就要在声明的同时赋值。</h4><ul>\n<li><h5 id=\"const与let一样，都是块级作用域，存在暂时性死区，不存在变量提升，不允许重复定义\"><a href=\"#const与let一样，都是块级作用域，存在暂时性死区，不存在变量提升，不允许重复定义\" class=\"headerlink\" title=\"const与let一样，都是块级作用域，存在暂时性死区，不存在变量提升，不允许重复定义\"></a>const与let一样，都是块级作用域，存在暂时性死区，不存在变量提升，不允许重复定义</h5></li>\n<li><h5 id=\"声明的常量是不允许改变\"><a href=\"#声明的常量是不允许改变\" class=\"headerlink\" title=\"声明的常量是不允许改变\"></a>声明的常量是不允许改变</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = 1;</span><br><span class=\"line\">a = 2; //这里会报错：TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<blockquote>\n<p><strong><em>到此，javaScript三种变量声明就介绍完了……</em></strong></p>\n</blockquote>\n</blockquote>\n"},{"title":"Linux主要目录","date":"2019-09-01T08:42:50.000Z","_content":"\n## Linux目录结构和window不一样，这里记录一下linux的主要目录和目录的存放文件类型\n\n### linux系统的文件管理是没有盘符这个概念的，所有文件都在`/`目录下\n\n#### 再根目录下的都是文件夹，每个文件存放的文件类型不一样：\n\n- / ：系统根目录，所有文件都从这里开始\n- /bin、/usr/bin ：存放可执行的二进制文件，例如常用的linux命令：ls、cat、tar、mv等\n- /boot ：存放linux启动文件，例如grub系统引导文件\n- /dev ：存放系统的设备文件，linux下设备是以文件形式挂载\n- /etc ：系统配置文件的存放目录，一般不在该目录存放二进制文件，重要的配置文件：\n  - /etc/inittab\n  - /etc/fstab\n  - /etc/init.d\n  - /etc/X11\n  - /etc/sysconfig\n  - /etc/xinetd.d\n\n- /home ：系统默认的用户家目录，新建用户时，用户的文件夹会建立在/home下面\n  - 使用 ~ 表示家目录\n  - cd 或者cd ~可以切换到家目录\n\n- /lib、/usr/lib、/usr/local/lib ：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助\n- /lost+fount ：系统异常产生错误时，会将一些遗失的片段放置于此目录下\n- /mnt /media ：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，但是挂载点一般可以自己选择\n- /opt ：给主机额外安装软件所摆放的目录\n- /root ：系统管理员的root的家目录\n- /proc ：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件：\n  - /proc/cpuinfo\n  - /proc/interrupts\n  - /proc/dma\n  - /proc/ioports\n  - /proc\n\n- /sbin、/usr/sbin、/usr/local/sbin ：放置系统管理员使用的可执行命令\n- /tmp ：一般用户或正在执行的程序临时存放文件的目录\n- /usr ：应用程序存放目录：\n  - /usr/bin：存放应用程序\n  - /usr/share：存放共享数据\n  - /usr/lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件\n  - /usr/local：存放软件升级包\n  - /usr/share/doc：系统说明文件存放目录\n  - /usr/share/man：程序说明文件存放目录\n\n- /var ：放置系统执行过程中经常变化的文件：\n  - /var/log：随时更改的日志文件\n  - /var/spool/mail：邮件存放的目录\n  - /var/run：程序或服务启动后，其 PID 存放在该目录下\n\n---\n\n","source":"_posts/Linux主要目录.md","raw":"---\ntitle: Linux主要目录\ndate: 2019-09-01 16:42:50\ntags: linux\n---\n\n## Linux目录结构和window不一样，这里记录一下linux的主要目录和目录的存放文件类型\n\n### linux系统的文件管理是没有盘符这个概念的，所有文件都在`/`目录下\n\n#### 再根目录下的都是文件夹，每个文件存放的文件类型不一样：\n\n- / ：系统根目录，所有文件都从这里开始\n- /bin、/usr/bin ：存放可执行的二进制文件，例如常用的linux命令：ls、cat、tar、mv等\n- /boot ：存放linux启动文件，例如grub系统引导文件\n- /dev ：存放系统的设备文件，linux下设备是以文件形式挂载\n- /etc ：系统配置文件的存放目录，一般不在该目录存放二进制文件，重要的配置文件：\n  - /etc/inittab\n  - /etc/fstab\n  - /etc/init.d\n  - /etc/X11\n  - /etc/sysconfig\n  - /etc/xinetd.d\n\n- /home ：系统默认的用户家目录，新建用户时，用户的文件夹会建立在/home下面\n  - 使用 ~ 表示家目录\n  - cd 或者cd ~可以切换到家目录\n\n- /lib、/usr/lib、/usr/local/lib ：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助\n- /lost+fount ：系统异常产生错误时，会将一些遗失的片段放置于此目录下\n- /mnt /media ：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，但是挂载点一般可以自己选择\n- /opt ：给主机额外安装软件所摆放的目录\n- /root ：系统管理员的root的家目录\n- /proc ：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件：\n  - /proc/cpuinfo\n  - /proc/interrupts\n  - /proc/dma\n  - /proc/ioports\n  - /proc\n\n- /sbin、/usr/sbin、/usr/local/sbin ：放置系统管理员使用的可执行命令\n- /tmp ：一般用户或正在执行的程序临时存放文件的目录\n- /usr ：应用程序存放目录：\n  - /usr/bin：存放应用程序\n  - /usr/share：存放共享数据\n  - /usr/lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件\n  - /usr/local：存放软件升级包\n  - /usr/share/doc：系统说明文件存放目录\n  - /usr/share/man：程序说明文件存放目录\n\n- /var ：放置系统执行过程中经常变化的文件：\n  - /var/log：随时更改的日志文件\n  - /var/spool/mail：邮件存放的目录\n  - /var/run：程序或服务启动后，其 PID 存放在该目录下\n\n---\n\n","slug":"Linux主要目录","published":1,"updated":"2019-10-17T09:19:21.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7b8000fggvkjyguve7l","content":"<h2 id=\"Linux目录结构和window不一样，这里记录一下linux的主要目录和目录的存放文件类型\"><a href=\"#Linux目录结构和window不一样，这里记录一下linux的主要目录和目录的存放文件类型\" class=\"headerlink\" title=\"Linux目录结构和window不一样，这里记录一下linux的主要目录和目录的存放文件类型\"></a>Linux目录结构和window不一样，这里记录一下linux的主要目录和目录的存放文件类型</h2><h3 id=\"linux系统的文件管理是没有盘符这个概念的，所有文件都在-目录下\"><a href=\"#linux系统的文件管理是没有盘符这个概念的，所有文件都在-目录下\" class=\"headerlink\" title=\"linux系统的文件管理是没有盘符这个概念的，所有文件都在/目录下\"></a>linux系统的文件管理是没有盘符这个概念的，所有文件都在<code>/</code>目录下</h3><h4 id=\"再根目录下的都是文件夹，每个文件存放的文件类型不一样：\"><a href=\"#再根目录下的都是文件夹，每个文件存放的文件类型不一样：\" class=\"headerlink\" title=\"再根目录下的都是文件夹，每个文件存放的文件类型不一样：\"></a>再根目录下的都是文件夹，每个文件存放的文件类型不一样：</h4><ul>\n<li><p>/ ：系统根目录，所有文件都从这里开始</p>\n</li>\n<li><p>/bin、/usr/bin ：存放可执行的二进制文件，例如常用的linux命令：ls、cat、tar、mv等</p>\n</li>\n<li><p>/boot ：存放linux启动文件，例如grub系统引导文件</p>\n</li>\n<li><p>/dev ：存放系统的设备文件，linux下设备是以文件形式挂载</p>\n</li>\n<li><p>/etc ：系统配置文件的存放目录，一般不在该目录存放二进制文件，重要的配置文件：</p>\n<ul>\n<li>/etc/inittab</li>\n<li>/etc/fstab</li>\n<li>/etc/init.d</li>\n<li>/etc/X11</li>\n<li>/etc/sysconfig</li>\n<li>/etc/xinetd.d</li>\n</ul>\n</li>\n<li><p>/home ：系统默认的用户家目录，新建用户时，用户的文件夹会建立在/home下面</p>\n<ul>\n<li>使用 ~ 表示家目录</li>\n<li>cd 或者cd ~可以切换到家目录</li>\n</ul>\n</li>\n<li><p>/lib、/usr/lib、/usr/local/lib ：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助</p>\n</li>\n<li><p>/lost+fount ：系统异常产生错误时，会将一些遗失的片段放置于此目录下</p>\n</li>\n<li><p>/mnt /media ：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，但是挂载点一般可以自己选择</p>\n</li>\n<li><p>/opt ：给主机额外安装软件所摆放的目录</p>\n</li>\n<li><p>/root ：系统管理员的root的家目录</p>\n</li>\n<li><p>/proc ：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件：</p>\n<ul>\n<li>/proc/cpuinfo</li>\n<li>/proc/interrupts</li>\n<li>/proc/dma</li>\n<li>/proc/ioports</li>\n<li>/proc</li>\n</ul>\n</li>\n<li><p>/sbin、/usr/sbin、/usr/local/sbin ：放置系统管理员使用的可执行命令</p>\n</li>\n<li><p>/tmp ：一般用户或正在执行的程序临时存放文件的目录</p>\n</li>\n<li><p>/usr ：应用程序存放目录：</p>\n<ul>\n<li>/usr/bin：存放应用程序</li>\n<li>/usr/share：存放共享数据</li>\n<li>/usr/lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件</li>\n<li>/usr/local：存放软件升级包</li>\n<li>/usr/share/doc：系统说明文件存放目录</li>\n<li>/usr/share/man：程序说明文件存放目录</li>\n</ul>\n</li>\n<li><p>/var ：放置系统执行过程中经常变化的文件：</p>\n<ul>\n<li>/var/log：随时更改的日志文件</li>\n<li>/var/spool/mail：邮件存放的目录</li>\n<li>/var/run：程序或服务启动后，其 PID 存放在该目录下</li>\n</ul>\n</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux目录结构和window不一样，这里记录一下linux的主要目录和目录的存放文件类型\"><a href=\"#Linux目录结构和window不一样，这里记录一下linux的主要目录和目录的存放文件类型\" class=\"headerlink\" title=\"Linux目录结构和window不一样，这里记录一下linux的主要目录和目录的存放文件类型\"></a>Linux目录结构和window不一样，这里记录一下linux的主要目录和目录的存放文件类型</h2><h3 id=\"linux系统的文件管理是没有盘符这个概念的，所有文件都在-目录下\"><a href=\"#linux系统的文件管理是没有盘符这个概念的，所有文件都在-目录下\" class=\"headerlink\" title=\"linux系统的文件管理是没有盘符这个概念的，所有文件都在/目录下\"></a>linux系统的文件管理是没有盘符这个概念的，所有文件都在<code>/</code>目录下</h3><h4 id=\"再根目录下的都是文件夹，每个文件存放的文件类型不一样：\"><a href=\"#再根目录下的都是文件夹，每个文件存放的文件类型不一样：\" class=\"headerlink\" title=\"再根目录下的都是文件夹，每个文件存放的文件类型不一样：\"></a>再根目录下的都是文件夹，每个文件存放的文件类型不一样：</h4><ul>\n<li><p>/ ：系统根目录，所有文件都从这里开始</p>\n</li>\n<li><p>/bin、/usr/bin ：存放可执行的二进制文件，例如常用的linux命令：ls、cat、tar、mv等</p>\n</li>\n<li><p>/boot ：存放linux启动文件，例如grub系统引导文件</p>\n</li>\n<li><p>/dev ：存放系统的设备文件，linux下设备是以文件形式挂载</p>\n</li>\n<li><p>/etc ：系统配置文件的存放目录，一般不在该目录存放二进制文件，重要的配置文件：</p>\n<ul>\n<li>/etc/inittab</li>\n<li>/etc/fstab</li>\n<li>/etc/init.d</li>\n<li>/etc/X11</li>\n<li>/etc/sysconfig</li>\n<li>/etc/xinetd.d</li>\n</ul>\n</li>\n<li><p>/home ：系统默认的用户家目录，新建用户时，用户的文件夹会建立在/home下面</p>\n<ul>\n<li>使用 ~ 表示家目录</li>\n<li>cd 或者cd ~可以切换到家目录</li>\n</ul>\n</li>\n<li><p>/lib、/usr/lib、/usr/local/lib ：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助</p>\n</li>\n<li><p>/lost+fount ：系统异常产生错误时，会将一些遗失的片段放置于此目录下</p>\n</li>\n<li><p>/mnt /media ：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，但是挂载点一般可以自己选择</p>\n</li>\n<li><p>/opt ：给主机额外安装软件所摆放的目录</p>\n</li>\n<li><p>/root ：系统管理员的root的家目录</p>\n</li>\n<li><p>/proc ：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件：</p>\n<ul>\n<li>/proc/cpuinfo</li>\n<li>/proc/interrupts</li>\n<li>/proc/dma</li>\n<li>/proc/ioports</li>\n<li>/proc</li>\n</ul>\n</li>\n<li><p>/sbin、/usr/sbin、/usr/local/sbin ：放置系统管理员使用的可执行命令</p>\n</li>\n<li><p>/tmp ：一般用户或正在执行的程序临时存放文件的目录</p>\n</li>\n<li><p>/usr ：应用程序存放目录：</p>\n<ul>\n<li>/usr/bin：存放应用程序</li>\n<li>/usr/share：存放共享数据</li>\n<li>/usr/lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件</li>\n<li>/usr/local：存放软件升级包</li>\n<li>/usr/share/doc：系统说明文件存放目录</li>\n<li>/usr/share/man：程序说明文件存放目录</li>\n</ul>\n</li>\n<li><p>/var ：放置系统执行过程中经常变化的文件：</p>\n<ul>\n<li>/var/log：随时更改的日志文件</li>\n<li>/var/spool/mail：邮件存放的目录</li>\n<li>/var/run：程序或服务启动后，其 PID 存放在该目录下</li>\n</ul>\n</li>\n</ul>\n<hr>\n"},{"title":"linux基本命令","date":"2019-09-02T15:59:06.000Z","_content":"\n## Linux 基本命令\n\n#### linux常用命令：\n\n- ls 列出该目录下的文件\n- pwd 显示当前所在目录\n- cd [目录名] 切换目录\n- touch [文件名] 更新文件修改时间，如果文件不存在就创建新的文件\n- mkdir 创建新的文件夹\n- rm [文件名] 删除文件\n- clear 清屏\n\n---\n\n### 一、文件和目录操作的常用命令\n\n#### 终端使用技巧：\n\n##### 1.使用 tab 键自动补全或提示 文件名、目录、命令\n\n##### 2.使用上下光标切换历史命令\n\n##### 3.不想输入命令时，使用ctrl+c终止命令\n\n---\n\n* 查看目录内容\n\n```bash\nls [路径]  # list\n# 参数和作用：\n-a 显示指定目录下所有子目录和文件，包括隐藏文件  # 在linux中，以 . 开头的文件就是隐藏文件\n-l 以列表的方式显示文件的详细信息\n-h 一般是和 -l 一起使用，以更人性化的方式显示文件的大小 \n\n# ls和通配符的使用\n* 代表任意个数的任意字符\n? 代表任意一个字符\n[] 表示匹配字符组中的任意一个字符\n[abc] 匹配a b c 中的任意一个字符\n[a-z] 匹配从a到z范围内的任意一个字符\n```\n\n* 切换目录\n\n```bash\ncd [路径]  # change directory\ncd/cd ~  # 切换到当前用户的主目录\ncd .  # 进入当前目录\ncd ..  # 切换到上一级目录\ncd -  # 在最近两次工作目录之间来回切换\n```\n\n* 创建和删除操作\n\n```bash\ntouch  文件名  # 如果文件不存在就创建空白文件，文件存在就更新文件的末次修改时日期\n\nrm 文件/目录  # remove\n# 参数：\n-f 强制删除，忽略不存在的文件不作提示\n-r 递归删除目录下的内容，删除文件夹时要加上该参数\n\nmkdir 目录  # 创建一个新的目录，make directory\n# 参数：\n-p 递归创建目录\n\ntree  # 以树状图列出目录的文件目录结构\n# 参数：\n-d 只显示目录\n```\n\n* 拷贝和移动文件\n\n```bash\ncp 源文件 目标文件  # copy\n# 参数:\n-i 覆盖文件前提示\n-r 递归复制目录文件下的所有子目录和文件\n\nmv 源文件 目标文件  # move\n# 参数：\n-i 覆盖文件前提示\n```\n\n* 查看文件文件内容\n\n```bash\ncat  # 直接查看文件内容\n# 参数：\n-b 对非空输出行编号\n-n 对输出的所有行编号\n\nmore  # 分屏显示文件内容\n# 查看操作：\nb 回滚一屏\nf 前滚一屏\nenter 一次滚动手册页的一行\nq 退出\n/word 搜索word字符串\n\ngrep  # 搜索文本或文件名\n# 参数：\n-n 显示匹配行和行号\n-v 显示不包换匹配文本的所有行（相当于求反）\n-i 忽略大小写\n^a 行首，搜索以a开头的行\nb$ 行尾，搜索以b结尾的行\n```\n\n* 其他\n\n```bash\necho  # 在终端中显示参数指定的文字，通常会和 重定向 联合使用\n\n重定向： > 和 >>\n> 表示输出，会覆盖文件原有的内容\n>> 表示追加，会把内容添加到已有文件的末尾\n\n管道： |   #把前面的命令的输出结果作为后面命令的输入\n例如：cat 文件 | grep a  # 查找文件中含有a的行\n\nln 源文件 目标文件  # 建立硬链接\nln -s 源文件 目标文件  # 建立软链接\n```\n\n---\n\n### 二、远程管理常用命令\n\n- 关机/或重启\n\n```bash\nshutdown 选项 时间  # 不指定选项和参数，默认表示 1 分钟之后 关闭电脑\n# 参数：\n-r\t重新启动\n\n shutdown -r now  # 立即重启电脑\n shutdown now  # 立即关闭电脑\n shutdown +10  # 10分钟后关闭电脑\n shutdown 16:26  # 今天的16:26分关闭电脑\n shutdown -c  # 取消关机计划\n```\n\n- 查看或配置网卡信息\n\n```bash\nifconfig  # 查看/配置计算机当前的网卡配置信息\nping ip地址  # 检测到目标 ip地址 的连接是否正常\n```\n\n- 远程登录和复制文件\n\n```bash\nssh -p port 用户名@ip  # 链接远程服务器，port是端口号，使用 -p 来指定\n# SSH 服务器 的默认端口号是 22，如果是默认端口号，在连接的时候，可以省略\nscp -P 用户名@ip:文件名或路径 用户名@ip:文件名或路径  # 远程复制文件，注意这里指定端口号时使用 -P 来指定\n# 添加 -r 递归复制文件夹下面的所有文件\nexit  # 退出用户登录\n```\n\n- 配置免密码登录\n\n```bash\nssh-keygen  # 生成ssh秘钥\nssh-copy-id -p port user@remote  # 上传公钥到服务器\n\n# 配置登录别名：\ngedit ~/.ssh/config  # 打开并编辑该文件，输入：\n\nHost ubuntu  # 指定别名为 ubuntu\n    HostName ip地址  # 这里指定ip地址\n    User itheima  # 指定服务器的用户名\n    Port 22  # 指定链接端口\n \n # 配置好后，使用 ssh ubuntu就可以远程链接，scp 命令也可以使用\n```\n\n---\n\n### 三、用户权限相关命令\n\n> 更新\n\n","source":"_posts/linux基本命令.md","raw":"---\ntitle: linux基本命令\ndate: 2019-09-02 23:59:06\ntags: linux\n---\n\n## Linux 基本命令\n\n#### linux常用命令：\n\n- ls 列出该目录下的文件\n- pwd 显示当前所在目录\n- cd [目录名] 切换目录\n- touch [文件名] 更新文件修改时间，如果文件不存在就创建新的文件\n- mkdir 创建新的文件夹\n- rm [文件名] 删除文件\n- clear 清屏\n\n---\n\n### 一、文件和目录操作的常用命令\n\n#### 终端使用技巧：\n\n##### 1.使用 tab 键自动补全或提示 文件名、目录、命令\n\n##### 2.使用上下光标切换历史命令\n\n##### 3.不想输入命令时，使用ctrl+c终止命令\n\n---\n\n* 查看目录内容\n\n```bash\nls [路径]  # list\n# 参数和作用：\n-a 显示指定目录下所有子目录和文件，包括隐藏文件  # 在linux中，以 . 开头的文件就是隐藏文件\n-l 以列表的方式显示文件的详细信息\n-h 一般是和 -l 一起使用，以更人性化的方式显示文件的大小 \n\n# ls和通配符的使用\n* 代表任意个数的任意字符\n? 代表任意一个字符\n[] 表示匹配字符组中的任意一个字符\n[abc] 匹配a b c 中的任意一个字符\n[a-z] 匹配从a到z范围内的任意一个字符\n```\n\n* 切换目录\n\n```bash\ncd [路径]  # change directory\ncd/cd ~  # 切换到当前用户的主目录\ncd .  # 进入当前目录\ncd ..  # 切换到上一级目录\ncd -  # 在最近两次工作目录之间来回切换\n```\n\n* 创建和删除操作\n\n```bash\ntouch  文件名  # 如果文件不存在就创建空白文件，文件存在就更新文件的末次修改时日期\n\nrm 文件/目录  # remove\n# 参数：\n-f 强制删除，忽略不存在的文件不作提示\n-r 递归删除目录下的内容，删除文件夹时要加上该参数\n\nmkdir 目录  # 创建一个新的目录，make directory\n# 参数：\n-p 递归创建目录\n\ntree  # 以树状图列出目录的文件目录结构\n# 参数：\n-d 只显示目录\n```\n\n* 拷贝和移动文件\n\n```bash\ncp 源文件 目标文件  # copy\n# 参数:\n-i 覆盖文件前提示\n-r 递归复制目录文件下的所有子目录和文件\n\nmv 源文件 目标文件  # move\n# 参数：\n-i 覆盖文件前提示\n```\n\n* 查看文件文件内容\n\n```bash\ncat  # 直接查看文件内容\n# 参数：\n-b 对非空输出行编号\n-n 对输出的所有行编号\n\nmore  # 分屏显示文件内容\n# 查看操作：\nb 回滚一屏\nf 前滚一屏\nenter 一次滚动手册页的一行\nq 退出\n/word 搜索word字符串\n\ngrep  # 搜索文本或文件名\n# 参数：\n-n 显示匹配行和行号\n-v 显示不包换匹配文本的所有行（相当于求反）\n-i 忽略大小写\n^a 行首，搜索以a开头的行\nb$ 行尾，搜索以b结尾的行\n```\n\n* 其他\n\n```bash\necho  # 在终端中显示参数指定的文字，通常会和 重定向 联合使用\n\n重定向： > 和 >>\n> 表示输出，会覆盖文件原有的内容\n>> 表示追加，会把内容添加到已有文件的末尾\n\n管道： |   #把前面的命令的输出结果作为后面命令的输入\n例如：cat 文件 | grep a  # 查找文件中含有a的行\n\nln 源文件 目标文件  # 建立硬链接\nln -s 源文件 目标文件  # 建立软链接\n```\n\n---\n\n### 二、远程管理常用命令\n\n- 关机/或重启\n\n```bash\nshutdown 选项 时间  # 不指定选项和参数，默认表示 1 分钟之后 关闭电脑\n# 参数：\n-r\t重新启动\n\n shutdown -r now  # 立即重启电脑\n shutdown now  # 立即关闭电脑\n shutdown +10  # 10分钟后关闭电脑\n shutdown 16:26  # 今天的16:26分关闭电脑\n shutdown -c  # 取消关机计划\n```\n\n- 查看或配置网卡信息\n\n```bash\nifconfig  # 查看/配置计算机当前的网卡配置信息\nping ip地址  # 检测到目标 ip地址 的连接是否正常\n```\n\n- 远程登录和复制文件\n\n```bash\nssh -p port 用户名@ip  # 链接远程服务器，port是端口号，使用 -p 来指定\n# SSH 服务器 的默认端口号是 22，如果是默认端口号，在连接的时候，可以省略\nscp -P 用户名@ip:文件名或路径 用户名@ip:文件名或路径  # 远程复制文件，注意这里指定端口号时使用 -P 来指定\n# 添加 -r 递归复制文件夹下面的所有文件\nexit  # 退出用户登录\n```\n\n- 配置免密码登录\n\n```bash\nssh-keygen  # 生成ssh秘钥\nssh-copy-id -p port user@remote  # 上传公钥到服务器\n\n# 配置登录别名：\ngedit ~/.ssh/config  # 打开并编辑该文件，输入：\n\nHost ubuntu  # 指定别名为 ubuntu\n    HostName ip地址  # 这里指定ip地址\n    User itheima  # 指定服务器的用户名\n    Port 22  # 指定链接端口\n \n # 配置好后，使用 ssh ubuntu就可以远程链接，scp 命令也可以使用\n```\n\n---\n\n### 三、用户权限相关命令\n\n> 更新\n\n","slug":"linux基本命令","published":1,"updated":"2020-10-14T13:13:34.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7ba000hggvk533wsqyq","content":"<h2 id=\"Linux-基本命令\"><a href=\"#Linux-基本命令\" class=\"headerlink\" title=\"Linux 基本命令\"></a>Linux 基本命令</h2><h4 id=\"linux常用命令：\"><a href=\"#linux常用命令：\" class=\"headerlink\" title=\"linux常用命令：\"></a>linux常用命令：</h4><ul>\n<li>ls 列出该目录下的文件</li>\n<li>pwd 显示当前所在目录</li>\n<li>cd [目录名] 切换目录</li>\n<li>touch [文件名] 更新文件修改时间，如果文件不存在就创建新的文件</li>\n<li>mkdir 创建新的文件夹</li>\n<li>rm [文件名] 删除文件</li>\n<li>clear 清屏</li>\n</ul>\n<hr>\n<h3 id=\"一、文件和目录操作的常用命令\"><a href=\"#一、文件和目录操作的常用命令\" class=\"headerlink\" title=\"一、文件和目录操作的常用命令\"></a>一、文件和目录操作的常用命令</h3><h4 id=\"终端使用技巧：\"><a href=\"#终端使用技巧：\" class=\"headerlink\" title=\"终端使用技巧：\"></a>终端使用技巧：</h4><h5 id=\"1-使用-tab-键自动补全或提示-文件名、目录、命令\"><a href=\"#1-使用-tab-键自动补全或提示-文件名、目录、命令\" class=\"headerlink\" title=\"1.使用 tab 键自动补全或提示 文件名、目录、命令\"></a>1.使用 tab 键自动补全或提示 文件名、目录、命令</h5><h5 id=\"2-使用上下光标切换历史命令\"><a href=\"#2-使用上下光标切换历史命令\" class=\"headerlink\" title=\"2.使用上下光标切换历史命令\"></a>2.使用上下光标切换历史命令</h5><h5 id=\"3-不想输入命令时，使用ctrl-c终止命令\"><a href=\"#3-不想输入命令时，使用ctrl-c终止命令\" class=\"headerlink\" title=\"3.不想输入命令时，使用ctrl+c终止命令\"></a>3.不想输入命令时，使用ctrl+c终止命令</h5><hr>\n<ul>\n<li>查看目录内容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [路径]  <span class=\"comment\"># list</span></span><br><span class=\"line\"><span class=\"comment\"># 参数和作用：</span></span><br><span class=\"line\">-a 显示指定目录下所有子目录和文件，包括隐藏文件  <span class=\"comment\"># 在linux中，以 . 开头的文件就是隐藏文件</span></span><br><span class=\"line\">-l 以列表的方式显示文件的详细信息</span><br><span class=\"line\">-h 一般是和 -l 一起使用，以更人性化的方式显示文件的大小 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ls和通配符的使用</span></span><br><span class=\"line\">* 代表任意个数的任意字符</span><br><span class=\"line\">? 代表任意一个字符</span><br><span class=\"line\">[] 表示匹配字符组中的任意一个字符</span><br><span class=\"line\">[abc] 匹配a b c 中的任意一个字符</span><br><span class=\"line\">[a-z] 匹配从a到z范围内的任意一个字符</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> [路径]  <span class=\"comment\"># change directory</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span>/<span class=\"built_in\">cd</span> ~  <span class=\"comment\"># 切换到当前用户的主目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> .  <span class=\"comment\"># 进入当前目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..  <span class=\"comment\"># 切换到上一级目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> -  <span class=\"comment\"># 在最近两次工作目录之间来回切换</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建和删除操作</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch  文件名  <span class=\"comment\"># 如果文件不存在就创建空白文件，文件存在就更新文件的末次修改时日期</span></span><br><span class=\"line\"></span><br><span class=\"line\">rm 文件/目录  <span class=\"comment\"># remove</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-f 强制删除，忽略不存在的文件不作提示</span><br><span class=\"line\">-r 递归删除目录下的内容，删除文件夹时要加上该参数</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir 目录  <span class=\"comment\"># 创建一个新的目录，make directory</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-p 递归创建目录</span><br><span class=\"line\"></span><br><span class=\"line\">tree  <span class=\"comment\"># 以树状图列出目录的文件目录结构</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-d 只显示目录</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拷贝和移动文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp 源文件 目标文件  <span class=\"comment\"># copy</span></span><br><span class=\"line\"><span class=\"comment\"># 参数:</span></span><br><span class=\"line\">-i 覆盖文件前提示</span><br><span class=\"line\">-r 递归复制目录文件下的所有子目录和文件</span><br><span class=\"line\"></span><br><span class=\"line\">mv 源文件 目标文件  <span class=\"comment\"># move</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-i 覆盖文件前提示</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看文件文件内容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat  <span class=\"comment\"># 直接查看文件内容</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-b 对非空输出行编号</span><br><span class=\"line\">-n 对输出的所有行编号</span><br><span class=\"line\"></span><br><span class=\"line\">more  <span class=\"comment\"># 分屏显示文件内容</span></span><br><span class=\"line\"><span class=\"comment\"># 查看操作：</span></span><br><span class=\"line\">b 回滚一屏</span><br><span class=\"line\">f 前滚一屏</span><br><span class=\"line\">enter 一次滚动手册页的一行</span><br><span class=\"line\">q 退出</span><br><span class=\"line\">/word 搜索word字符串</span><br><span class=\"line\"></span><br><span class=\"line\">grep  <span class=\"comment\"># 搜索文本或文件名</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-n 显示匹配行和行号</span><br><span class=\"line\">-v 显示不包换匹配文本的所有行（相当于求反）</span><br><span class=\"line\">-i 忽略大小写</span><br><span class=\"line\">^a 行首，搜索以a开头的行</span><br><span class=\"line\">b$ 行尾，搜索以b结尾的行</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span>  <span class=\"comment\"># 在终端中显示参数指定的文字，通常会和 重定向 联合使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">重定向： &gt; 和 &gt;&gt;</span><br><span class=\"line\">&gt; 表示输出，会覆盖文件原有的内容</span><br><span class=\"line\">&gt;&gt; 表示追加，会把内容添加到已有文件的末尾</span><br><span class=\"line\"></span><br><span class=\"line\">管道： |   <span class=\"comment\">#把前面的命令的输出结果作为后面命令的输入</span></span><br><span class=\"line\">例如：cat 文件 | grep a  <span class=\"comment\"># 查找文件中含有a的行</span></span><br><span class=\"line\"></span><br><span class=\"line\">ln 源文件 目标文件  <span class=\"comment\"># 建立硬链接</span></span><br><span class=\"line\">ln -s 源文件 目标文件  <span class=\"comment\"># 建立软链接</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"二、远程管理常用命令\"><a href=\"#二、远程管理常用命令\" class=\"headerlink\" title=\"二、远程管理常用命令\"></a>二、远程管理常用命令</h3><ul>\n<li>关机/或重启</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown 选项 时间  <span class=\"comment\"># 不指定选项和参数，默认表示 1 分钟之后 关闭电脑</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-r\t重新启动</span><br><span class=\"line\"></span><br><span class=\"line\"> shutdown -r now  <span class=\"comment\"># 立即重启电脑</span></span><br><span class=\"line\"> shutdown now  <span class=\"comment\"># 立即关闭电脑</span></span><br><span class=\"line\"> shutdown +10  <span class=\"comment\"># 10分钟后关闭电脑</span></span><br><span class=\"line\"> shutdown 16:26  <span class=\"comment\"># 今天的16:26分关闭电脑</span></span><br><span class=\"line\"> shutdown -c  <span class=\"comment\"># 取消关机计划</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看或配置网卡信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig  <span class=\"comment\"># 查看/配置计算机当前的网卡配置信息</span></span><br><span class=\"line\">ping ip地址  <span class=\"comment\"># 检测到目标 ip地址 的连接是否正常</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>远程登录和复制文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p port 用户名@ip  <span class=\"comment\"># 链接远程服务器，port是端口号，使用 -p 来指定</span></span><br><span class=\"line\"><span class=\"comment\"># SSH 服务器 的默认端口号是 22，如果是默认端口号，在连接的时候，可以省略</span></span><br><span class=\"line\">scp -P 用户名@ip:文件名或路径 用户名@ip:文件名或路径  <span class=\"comment\"># 远程复制文件，注意这里指定端口号时使用 -P 来指定</span></span><br><span class=\"line\"><span class=\"comment\"># 添加 -r 递归复制文件夹下面的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span>  <span class=\"comment\"># 退出用户登录</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置免密码登录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen  <span class=\"comment\"># 生成ssh秘钥</span></span><br><span class=\"line\">ssh-copy-id -p port user@remote  <span class=\"comment\"># 上传公钥到服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置登录别名：</span></span><br><span class=\"line\">gedit ~/.ssh/config  <span class=\"comment\"># 打开并编辑该文件，输入：</span></span><br><span class=\"line\"></span><br><span class=\"line\">Host ubuntu  <span class=\"comment\"># 指定别名为 ubuntu</span></span><br><span class=\"line\">    HostName ip地址  <span class=\"comment\"># 这里指定ip地址</span></span><br><span class=\"line\">    User itheima  <span class=\"comment\"># 指定服务器的用户名</span></span><br><span class=\"line\">    Port 22  <span class=\"comment\"># 指定链接端口</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># 配置好后，使用 ssh ubuntu就可以远程链接，scp 命令也可以使用</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"三、用户权限相关命令\"><a href=\"#三、用户权限相关命令\" class=\"headerlink\" title=\"三、用户权限相关命令\"></a>三、用户权限相关命令</h3><blockquote>\n<p>更新</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux-基本命令\"><a href=\"#Linux-基本命令\" class=\"headerlink\" title=\"Linux 基本命令\"></a>Linux 基本命令</h2><h4 id=\"linux常用命令：\"><a href=\"#linux常用命令：\" class=\"headerlink\" title=\"linux常用命令：\"></a>linux常用命令：</h4><ul>\n<li>ls 列出该目录下的文件</li>\n<li>pwd 显示当前所在目录</li>\n<li>cd [目录名] 切换目录</li>\n<li>touch [文件名] 更新文件修改时间，如果文件不存在就创建新的文件</li>\n<li>mkdir 创建新的文件夹</li>\n<li>rm [文件名] 删除文件</li>\n<li>clear 清屏</li>\n</ul>\n<hr>\n<h3 id=\"一、文件和目录操作的常用命令\"><a href=\"#一、文件和目录操作的常用命令\" class=\"headerlink\" title=\"一、文件和目录操作的常用命令\"></a>一、文件和目录操作的常用命令</h3><h4 id=\"终端使用技巧：\"><a href=\"#终端使用技巧：\" class=\"headerlink\" title=\"终端使用技巧：\"></a>终端使用技巧：</h4><h5 id=\"1-使用-tab-键自动补全或提示-文件名、目录、命令\"><a href=\"#1-使用-tab-键自动补全或提示-文件名、目录、命令\" class=\"headerlink\" title=\"1.使用 tab 键自动补全或提示 文件名、目录、命令\"></a>1.使用 tab 键自动补全或提示 文件名、目录、命令</h5><h5 id=\"2-使用上下光标切换历史命令\"><a href=\"#2-使用上下光标切换历史命令\" class=\"headerlink\" title=\"2.使用上下光标切换历史命令\"></a>2.使用上下光标切换历史命令</h5><h5 id=\"3-不想输入命令时，使用ctrl-c终止命令\"><a href=\"#3-不想输入命令时，使用ctrl-c终止命令\" class=\"headerlink\" title=\"3.不想输入命令时，使用ctrl+c终止命令\"></a>3.不想输入命令时，使用ctrl+c终止命令</h5><hr>\n<ul>\n<li>查看目录内容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls [路径]  <span class=\"comment\"># list</span></span><br><span class=\"line\"><span class=\"comment\"># 参数和作用：</span></span><br><span class=\"line\">-a 显示指定目录下所有子目录和文件，包括隐藏文件  <span class=\"comment\"># 在linux中，以 . 开头的文件就是隐藏文件</span></span><br><span class=\"line\">-l 以列表的方式显示文件的详细信息</span><br><span class=\"line\">-h 一般是和 -l 一起使用，以更人性化的方式显示文件的大小 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ls和通配符的使用</span></span><br><span class=\"line\">* 代表任意个数的任意字符</span><br><span class=\"line\">? 代表任意一个字符</span><br><span class=\"line\">[] 表示匹配字符组中的任意一个字符</span><br><span class=\"line\">[abc] 匹配a b c 中的任意一个字符</span><br><span class=\"line\">[a-z] 匹配从a到z范围内的任意一个字符</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> [路径]  <span class=\"comment\"># change directory</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span>/<span class=\"built_in\">cd</span> ~  <span class=\"comment\"># 切换到当前用户的主目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> .  <span class=\"comment\"># 进入当前目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..  <span class=\"comment\"># 切换到上一级目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> -  <span class=\"comment\"># 在最近两次工作目录之间来回切换</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建和删除操作</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch  文件名  <span class=\"comment\"># 如果文件不存在就创建空白文件，文件存在就更新文件的末次修改时日期</span></span><br><span class=\"line\"></span><br><span class=\"line\">rm 文件/目录  <span class=\"comment\"># remove</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-f 强制删除，忽略不存在的文件不作提示</span><br><span class=\"line\">-r 递归删除目录下的内容，删除文件夹时要加上该参数</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir 目录  <span class=\"comment\"># 创建一个新的目录，make directory</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-p 递归创建目录</span><br><span class=\"line\"></span><br><span class=\"line\">tree  <span class=\"comment\"># 以树状图列出目录的文件目录结构</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-d 只显示目录</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拷贝和移动文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp 源文件 目标文件  <span class=\"comment\"># copy</span></span><br><span class=\"line\"><span class=\"comment\"># 参数:</span></span><br><span class=\"line\">-i 覆盖文件前提示</span><br><span class=\"line\">-r 递归复制目录文件下的所有子目录和文件</span><br><span class=\"line\"></span><br><span class=\"line\">mv 源文件 目标文件  <span class=\"comment\"># move</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-i 覆盖文件前提示</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看文件文件内容</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat  <span class=\"comment\"># 直接查看文件内容</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-b 对非空输出行编号</span><br><span class=\"line\">-n 对输出的所有行编号</span><br><span class=\"line\"></span><br><span class=\"line\">more  <span class=\"comment\"># 分屏显示文件内容</span></span><br><span class=\"line\"><span class=\"comment\"># 查看操作：</span></span><br><span class=\"line\">b 回滚一屏</span><br><span class=\"line\">f 前滚一屏</span><br><span class=\"line\">enter 一次滚动手册页的一行</span><br><span class=\"line\">q 退出</span><br><span class=\"line\">/word 搜索word字符串</span><br><span class=\"line\"></span><br><span class=\"line\">grep  <span class=\"comment\"># 搜索文本或文件名</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-n 显示匹配行和行号</span><br><span class=\"line\">-v 显示不包换匹配文本的所有行（相当于求反）</span><br><span class=\"line\">-i 忽略大小写</span><br><span class=\"line\">^a 行首，搜索以a开头的行</span><br><span class=\"line\">b$ 行尾，搜索以b结尾的行</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span>  <span class=\"comment\"># 在终端中显示参数指定的文字，通常会和 重定向 联合使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">重定向： &gt; 和 &gt;&gt;</span><br><span class=\"line\">&gt; 表示输出，会覆盖文件原有的内容</span><br><span class=\"line\">&gt;&gt; 表示追加，会把内容添加到已有文件的末尾</span><br><span class=\"line\"></span><br><span class=\"line\">管道： |   <span class=\"comment\">#把前面的命令的输出结果作为后面命令的输入</span></span><br><span class=\"line\">例如：cat 文件 | grep a  <span class=\"comment\"># 查找文件中含有a的行</span></span><br><span class=\"line\"></span><br><span class=\"line\">ln 源文件 目标文件  <span class=\"comment\"># 建立硬链接</span></span><br><span class=\"line\">ln -s 源文件 目标文件  <span class=\"comment\"># 建立软链接</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"二、远程管理常用命令\"><a href=\"#二、远程管理常用命令\" class=\"headerlink\" title=\"二、远程管理常用命令\"></a>二、远程管理常用命令</h3><ul>\n<li>关机/或重启</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shutdown 选项 时间  <span class=\"comment\"># 不指定选项和参数，默认表示 1 分钟之后 关闭电脑</span></span><br><span class=\"line\"><span class=\"comment\"># 参数：</span></span><br><span class=\"line\">-r\t重新启动</span><br><span class=\"line\"></span><br><span class=\"line\"> shutdown -r now  <span class=\"comment\"># 立即重启电脑</span></span><br><span class=\"line\"> shutdown now  <span class=\"comment\"># 立即关闭电脑</span></span><br><span class=\"line\"> shutdown +10  <span class=\"comment\"># 10分钟后关闭电脑</span></span><br><span class=\"line\"> shutdown 16:26  <span class=\"comment\"># 今天的16:26分关闭电脑</span></span><br><span class=\"line\"> shutdown -c  <span class=\"comment\"># 取消关机计划</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看或配置网卡信息</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig  <span class=\"comment\"># 查看/配置计算机当前的网卡配置信息</span></span><br><span class=\"line\">ping ip地址  <span class=\"comment\"># 检测到目标 ip地址 的连接是否正常</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>远程登录和复制文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p port 用户名@ip  <span class=\"comment\"># 链接远程服务器，port是端口号，使用 -p 来指定</span></span><br><span class=\"line\"><span class=\"comment\"># SSH 服务器 的默认端口号是 22，如果是默认端口号，在连接的时候，可以省略</span></span><br><span class=\"line\">scp -P 用户名@ip:文件名或路径 用户名@ip:文件名或路径  <span class=\"comment\"># 远程复制文件，注意这里指定端口号时使用 -P 来指定</span></span><br><span class=\"line\"><span class=\"comment\"># 添加 -r 递归复制文件夹下面的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span>  <span class=\"comment\"># 退出用户登录</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置免密码登录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen  <span class=\"comment\"># 生成ssh秘钥</span></span><br><span class=\"line\">ssh-copy-id -p port user@remote  <span class=\"comment\"># 上传公钥到服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置登录别名：</span></span><br><span class=\"line\">gedit ~/.ssh/config  <span class=\"comment\"># 打开并编辑该文件，输入：</span></span><br><span class=\"line\"></span><br><span class=\"line\">Host ubuntu  <span class=\"comment\"># 指定别名为 ubuntu</span></span><br><span class=\"line\">    HostName ip地址  <span class=\"comment\"># 这里指定ip地址</span></span><br><span class=\"line\">    User itheima  <span class=\"comment\"># 指定服务器的用户名</span></span><br><span class=\"line\">    Port 22  <span class=\"comment\"># 指定链接端口</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># 配置好后，使用 ssh ubuntu就可以远程链接，scp 命令也可以使用</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"三、用户权限相关命令\"><a href=\"#三、用户权限相关命令\" class=\"headerlink\" title=\"三、用户权限相关命令\"></a>三、用户权限相关命令</h3><blockquote>\n<p>更新</p>\n</blockquote>\n"},{"title":"上传项目到github","date":"2019-08-15T16:19:27.000Z","_content":"\n## 把个人的项目上传到github仓库\n\n#### 一、注册github账户：\n\n*GitHub官网网址：<https://github.com/>*\n\n注册过程比较简单，这里不详细介绍了～\n\n#### 二、设置SSHKey\n\n##### 本地的Git仓库和GitHub网站仓库之间的传输是通过SSH加密的，所以要设置SSH KEY.\n\n```bash\n$ ssh-keygen -t rsa -C \"youremail@email.com\" \n# \"youremail@email.com\"  是你注册github的邮箱地址\n# 后面基本是一直回车， 但是有一个地方会让你输入密码，这是你sshkey的密码\n```\n\n##### 这里是让你输入密码：【输入两次确保密码设置正确】\n\n{% asset_img 上传项目到github1.png 这里输入密码 %}\n\n##### SSHKey创建成功后，会在你的用户目录的.ssh文件夹下生成`id_rsa`**和**`id_rsa.pub`文件。\n\n##### 这是SSH Key的秘钥对，其中`id_rsa`是私钥，不能泄露，`id_rsa.pub`是公钥，可以告诉其他人。\n\n```bash\n$ vim id_rsa.pub\n#复制文件内的内容\n```\n\n##### 登录GitHub，点击右上角头像，Settings -> Personal settings -> SSH and GPG keys。在SSH Keys标签右方点击New SSH Key。 这里会弹出两个文本框，其中的Title，读者可以随意命名。另一个Key文本框，就是粘贴刚才复制的内容。\n\n#### 三、上传内容\n\n```bash\n$ git --version #检查是否安装了git\n# 如果没安装，就先安装 ： sudo apt-get install git\n$ cd /你的项目文件根目录\n$ git init #初始化命令，这个命令可以把当前目录变成git可以管理的仓库。\n$ git add file #添加文件到暂存区,file为文件名\n$ git add . #把文件夹所有文件都添加\n$ git status #该指令可以查看当前的分支以及添加文件的情况。\n$ git commit -m \"first commit\"   # -m后的内容是添加的描述，提交新版本\n```\n\n使用push命令上传文件：\n\n```bash\n$ git push git@github.com:wooyee-ldq/chat-IM.git master\n#仓库是第一次进行push时使用该命令，如果不是第一次则使用下面命令：\n$ git push origin 分支名\n# git@github.com:wooyee-ldq/chat-IM.git 这个是你的仓库download那里的ssh地址\n```\n\n```bash\n$ git remote add origin git@github.com:wooyee-ldq/chat-IM.git\n# 更改远程仓库名称为：origin  ，默认远程仓库名就是 origin\n$ git remote rm origin #删除远程仓库\n```\n\n##### 遇到错误：\n\n```bash\nTo github.com:wooyee-ldq/chat-IM.git\n ! [rejected]        master -> master (non-fast-forward)\nerror: 无法推送一些引用到 'git@github.com:wooyee-ldq/chat-IM.git'\n提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。\n提示：再次推送前，先与远程变更合并（如 'git pull ...'）。详见\n提示：'git push --help' 中的 'Note about fast-forwards' 小节。\n```\n\n##### 一个解决办法：\n\n```bash\n$ git pull --rebase chatim master\n来自 github.com:wooyee-ldq/chat-IM\n * branch            master     -> FETCH_HEAD\n首先，回退分支以便在上面重放您的工作...\n应用：first commit for blog_ejs\n应用：add readme file\n使用索引来重建一个（三方合并的）基础目录树...\n回落到基础版本上打补丁及进行三方合并...\n没有变更 —— 补丁已经应用过。\n```\n\n##### 然后再次上传成功了：\n\n```bash\n$ git push origin  master\n对象计数中: 2817, 完成.\nDelta compression using up to 4 threads.\n压缩对象中: 100% (2476/2476), 完成.\n写入对象中: 100% (2817/2817), 3.57 MiB | 1.30 MiB/s, 完成.\nTotal 2817 (delta 482), reused 0 (delta 0)\nremote: Resolving deltas: 100% (482/482), done.\nTo github.com:wooyee-ldq/chat-IM.git\n   9b5ab20..0d9c6a5  master -> master\n```\n\n> push结束后，在GitHub端的对应仓库上刷新一下，会看到你的项目文件，说明项目内容已经上传成功~\n>\n> > 到此，上传项目到github完成...\n\n\n\n","source":"_posts/上传项目到github.md","raw":"---\ntitle: 上传项目到github\ndate: 2019-08-16 00:19:27\ntags: git\n---\n\n## 把个人的项目上传到github仓库\n\n#### 一、注册github账户：\n\n*GitHub官网网址：<https://github.com/>*\n\n注册过程比较简单，这里不详细介绍了～\n\n#### 二、设置SSHKey\n\n##### 本地的Git仓库和GitHub网站仓库之间的传输是通过SSH加密的，所以要设置SSH KEY.\n\n```bash\n$ ssh-keygen -t rsa -C \"youremail@email.com\" \n# \"youremail@email.com\"  是你注册github的邮箱地址\n# 后面基本是一直回车， 但是有一个地方会让你输入密码，这是你sshkey的密码\n```\n\n##### 这里是让你输入密码：【输入两次确保密码设置正确】\n\n{% asset_img 上传项目到github1.png 这里输入密码 %}\n\n##### SSHKey创建成功后，会在你的用户目录的.ssh文件夹下生成`id_rsa`**和**`id_rsa.pub`文件。\n\n##### 这是SSH Key的秘钥对，其中`id_rsa`是私钥，不能泄露，`id_rsa.pub`是公钥，可以告诉其他人。\n\n```bash\n$ vim id_rsa.pub\n#复制文件内的内容\n```\n\n##### 登录GitHub，点击右上角头像，Settings -> Personal settings -> SSH and GPG keys。在SSH Keys标签右方点击New SSH Key。 这里会弹出两个文本框，其中的Title，读者可以随意命名。另一个Key文本框，就是粘贴刚才复制的内容。\n\n#### 三、上传内容\n\n```bash\n$ git --version #检查是否安装了git\n# 如果没安装，就先安装 ： sudo apt-get install git\n$ cd /你的项目文件根目录\n$ git init #初始化命令，这个命令可以把当前目录变成git可以管理的仓库。\n$ git add file #添加文件到暂存区,file为文件名\n$ git add . #把文件夹所有文件都添加\n$ git status #该指令可以查看当前的分支以及添加文件的情况。\n$ git commit -m \"first commit\"   # -m后的内容是添加的描述，提交新版本\n```\n\n使用push命令上传文件：\n\n```bash\n$ git push git@github.com:wooyee-ldq/chat-IM.git master\n#仓库是第一次进行push时使用该命令，如果不是第一次则使用下面命令：\n$ git push origin 分支名\n# git@github.com:wooyee-ldq/chat-IM.git 这个是你的仓库download那里的ssh地址\n```\n\n```bash\n$ git remote add origin git@github.com:wooyee-ldq/chat-IM.git\n# 更改远程仓库名称为：origin  ，默认远程仓库名就是 origin\n$ git remote rm origin #删除远程仓库\n```\n\n##### 遇到错误：\n\n```bash\nTo github.com:wooyee-ldq/chat-IM.git\n ! [rejected]        master -> master (non-fast-forward)\nerror: 无法推送一些引用到 'git@github.com:wooyee-ldq/chat-IM.git'\n提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。\n提示：再次推送前，先与远程变更合并（如 'git pull ...'）。详见\n提示：'git push --help' 中的 'Note about fast-forwards' 小节。\n```\n\n##### 一个解决办法：\n\n```bash\n$ git pull --rebase chatim master\n来自 github.com:wooyee-ldq/chat-IM\n * branch            master     -> FETCH_HEAD\n首先，回退分支以便在上面重放您的工作...\n应用：first commit for blog_ejs\n应用：add readme file\n使用索引来重建一个（三方合并的）基础目录树...\n回落到基础版本上打补丁及进行三方合并...\n没有变更 —— 补丁已经应用过。\n```\n\n##### 然后再次上传成功了：\n\n```bash\n$ git push origin  master\n对象计数中: 2817, 完成.\nDelta compression using up to 4 threads.\n压缩对象中: 100% (2476/2476), 完成.\n写入对象中: 100% (2817/2817), 3.57 MiB | 1.30 MiB/s, 完成.\nTotal 2817 (delta 482), reused 0 (delta 0)\nremote: Resolving deltas: 100% (482/482), done.\nTo github.com:wooyee-ldq/chat-IM.git\n   9b5ab20..0d9c6a5  master -> master\n```\n\n> push结束后，在GitHub端的对应仓库上刷新一下，会看到你的项目文件，说明项目内容已经上传成功~\n>\n> > 到此，上传项目到github完成...\n\n\n\n","slug":"上传项目到github","published":1,"updated":"2019-09-30T12:45:27.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7bc000jggvku6zyo9hk","content":"<h2 id=\"把个人的项目上传到github仓库\"><a href=\"#把个人的项目上传到github仓库\" class=\"headerlink\" title=\"把个人的项目上传到github仓库\"></a>把个人的项目上传到github仓库</h2><h4 id=\"一、注册github账户：\"><a href=\"#一、注册github账户：\" class=\"headerlink\" title=\"一、注册github账户：\"></a>一、注册github账户：</h4><p><em>GitHub官网网址：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></em></p>\n<p>注册过程比较简单，这里不详细介绍了～</p>\n<h4 id=\"二、设置SSHKey\"><a href=\"#二、设置SSHKey\" class=\"headerlink\" title=\"二、设置SSHKey\"></a>二、设置SSHKey</h4><h5 id=\"本地的Git仓库和GitHub网站仓库之间的传输是通过SSH加密的，所以要设置SSH-KEY\"><a href=\"#本地的Git仓库和GitHub网站仓库之间的传输是通过SSH加密的，所以要设置SSH-KEY\" class=\"headerlink\" title=\"本地的Git仓库和GitHub网站仓库之间的传输是通过SSH加密的，所以要设置SSH KEY.\"></a>本地的Git仓库和GitHub网站仓库之间的传输是通过SSH加密的，所以要设置SSH KEY.</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"youremail@email.com\"</span> </span><br><span class=\"line\"><span class=\"comment\"># \"youremail@email.com\"  是你注册github的邮箱地址</span></span><br><span class=\"line\"><span class=\"comment\"># 后面基本是一直回车， 但是有一个地方会让你输入密码，这是你sshkey的密码</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"这里是让你输入密码：【输入两次确保密码设置正确】\"><a href=\"#这里是让你输入密码：【输入两次确保密码设置正确】\" class=\"headerlink\" title=\"这里是让你输入密码：【输入两次确保密码设置正确】\"></a>这里是让你输入密码：【输入两次确保密码设置正确】</h5><img src=\"/blog/上传项目到github/上传项目到github1.png\" title=\"这里输入密码\">\n\n<h5 id=\"SSHKey创建成功后，会在你的用户目录的-ssh文件夹下生成id-rsa和id-rsa-pub文件。\"><a href=\"#SSHKey创建成功后，会在你的用户目录的-ssh文件夹下生成id-rsa和id-rsa-pub文件。\" class=\"headerlink\" title=\"SSHKey创建成功后，会在你的用户目录的.ssh文件夹下生成id_rsa和id_rsa.pub文件。\"></a>SSHKey创建成功后，会在你的用户目录的.ssh文件夹下生成<code>id_rsa</code><strong>和</strong><code>id_rsa.pub</code>文件。</h5><h5 id=\"这是SSH-Key的秘钥对，其中id-rsa是私钥，不能泄露，id-rsa-pub是公钥，可以告诉其他人。\"><a href=\"#这是SSH-Key的秘钥对，其中id-rsa是私钥，不能泄露，id-rsa-pub是公钥，可以告诉其他人。\" class=\"headerlink\" title=\"这是SSH Key的秘钥对，其中id_rsa是私钥，不能泄露，id_rsa.pub是公钥，可以告诉其他人。\"></a>这是SSH Key的秘钥对，其中<code>id_rsa</code>是私钥，不能泄露，<code>id_rsa.pub</code>是公钥，可以告诉其他人。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim id_rsa.pub</span><br><span class=\"line\"><span class=\"comment\">#复制文件内的内容</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"登录GitHub，点击右上角头像，Settings-gt-Personal-settings-gt-SSH-and-GPG-keys。在SSH-Keys标签右方点击New-SSH-Key。-这里会弹出两个文本框，其中的Title，读者可以随意命名。另一个Key文本框，就是粘贴刚才复制的内容。\"><a href=\"#登录GitHub，点击右上角头像，Settings-gt-Personal-settings-gt-SSH-and-GPG-keys。在SSH-Keys标签右方点击New-SSH-Key。-这里会弹出两个文本框，其中的Title，读者可以随意命名。另一个Key文本框，就是粘贴刚才复制的内容。\" class=\"headerlink\" title=\"登录GitHub，点击右上角头像，Settings -&gt; Personal settings -&gt; SSH and GPG keys。在SSH Keys标签右方点击New SSH Key。 这里会弹出两个文本框，其中的Title，读者可以随意命名。另一个Key文本框，就是粘贴刚才复制的内容。\"></a>登录GitHub，点击右上角头像，Settings -&gt; Personal settings -&gt; SSH and GPG keys。在SSH Keys标签右方点击New SSH Key。 这里会弹出两个文本框，其中的Title，读者可以随意命名。另一个Key文本框，就是粘贴刚才复制的内容。</h5><h4 id=\"三、上传内容\"><a href=\"#三、上传内容\" class=\"headerlink\" title=\"三、上传内容\"></a>三、上传内容</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version <span class=\"comment\">#检查是否安装了git</span></span><br><span class=\"line\"><span class=\"comment\"># 如果没安装，就先安装 ： sudo apt-get install git</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /你的项目文件根目录</span><br><span class=\"line\">$ git init <span class=\"comment\">#初始化命令，这个命令可以把当前目录变成git可以管理的仓库。</span></span><br><span class=\"line\">$ git add file <span class=\"comment\">#添加文件到暂存区,file为文件名</span></span><br><span class=\"line\">$ git add . <span class=\"comment\">#把文件夹所有文件都添加</span></span><br><span class=\"line\">$ git status <span class=\"comment\">#该指令可以查看当前的分支以及添加文件的情况。</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"first commit\"</span>   <span class=\"comment\"># -m后的内容是添加的描述，提交新版本</span></span><br></pre></td></tr></table></figure>\n\n<p>使用push命令上传文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push git@github.com:wooyee-ldq/chat-IM.git master</span><br><span class=\"line\"><span class=\"comment\">#仓库是第一次进行push时使用该命令，如果不是第一次则使用下面命令：</span></span><br><span class=\"line\">$ git push origin 分支名</span><br><span class=\"line\"><span class=\"comment\"># git@github.com:wooyee-ldq/chat-IM.git 这个是你的仓库download那里的ssh地址</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:wooyee-ldq/chat-IM.git</span><br><span class=\"line\"><span class=\"comment\"># 更改远程仓库名称为：origin  ，默认远程仓库名就是 origin</span></span><br><span class=\"line\">$ git remote rm origin <span class=\"comment\">#删除远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"遇到错误：\"><a href=\"#遇到错误：\" class=\"headerlink\" title=\"遇到错误：\"></a>遇到错误：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To github.com:wooyee-ldq/chat-IM.git</span><br><span class=\"line\"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class=\"line\">error: 无法推送一些引用到 <span class=\"string\">'git@github.com:wooyee-ldq/chat-IM.git'</span></span><br><span class=\"line\">提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。</span><br><span class=\"line\">提示：再次推送前，先与远程变更合并（如 <span class=\"string\">'git pull ...'</span>）。详见</span><br><span class=\"line\">提示：<span class=\"string\">'git push --help'</span> 中的 <span class=\"string\">'Note about fast-forwards'</span> 小节。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"一个解决办法：\"><a href=\"#一个解决办法：\" class=\"headerlink\" title=\"一个解决办法：\"></a>一个解决办法：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull --rebase chatim master</span><br><span class=\"line\">来自 github.com:wooyee-ldq/chat-IM</span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\">首先，回退分支以便在上面重放您的工作...</span><br><span class=\"line\">应用：first commit <span class=\"keyword\">for</span> blog_ejs</span><br><span class=\"line\">应用：add readme file</span><br><span class=\"line\">使用索引来重建一个（三方合并的）基础目录树...</span><br><span class=\"line\">回落到基础版本上打补丁及进行三方合并...</span><br><span class=\"line\">没有变更 —— 补丁已经应用过。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后再次上传成功了：\"><a href=\"#然后再次上传成功了：\" class=\"headerlink\" title=\"然后再次上传成功了：\"></a>然后再次上传成功了：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin  master</span><br><span class=\"line\">对象计数中: 2817, 完成.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">压缩对象中: 100% (2476/2476), 完成.</span><br><span class=\"line\">写入对象中: 100% (2817/2817), 3.57 MiB | 1.30 MiB/s, 完成.</span><br><span class=\"line\">Total 2817 (delta 482), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (482/482), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">To github.com:wooyee-ldq/chat-IM.git</span><br><span class=\"line\">   9b5ab20..0d9c6a5  master -&gt; master</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>push结束后，在GitHub端的对应仓库上刷新一下，会看到你的项目文件，说明项目内容已经上传成功~</p>\n<blockquote>\n<p>到此，上传项目到github完成…</p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"把个人的项目上传到github仓库\"><a href=\"#把个人的项目上传到github仓库\" class=\"headerlink\" title=\"把个人的项目上传到github仓库\"></a>把个人的项目上传到github仓库</h2><h4 id=\"一、注册github账户：\"><a href=\"#一、注册github账户：\" class=\"headerlink\" title=\"一、注册github账户：\"></a>一、注册github账户：</h4><p><em>GitHub官网网址：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></em></p>\n<p>注册过程比较简单，这里不详细介绍了～</p>\n<h4 id=\"二、设置SSHKey\"><a href=\"#二、设置SSHKey\" class=\"headerlink\" title=\"二、设置SSHKey\"></a>二、设置SSHKey</h4><h5 id=\"本地的Git仓库和GitHub网站仓库之间的传输是通过SSH加密的，所以要设置SSH-KEY\"><a href=\"#本地的Git仓库和GitHub网站仓库之间的传输是通过SSH加密的，所以要设置SSH-KEY\" class=\"headerlink\" title=\"本地的Git仓库和GitHub网站仓库之间的传输是通过SSH加密的，所以要设置SSH KEY.\"></a>本地的Git仓库和GitHub网站仓库之间的传输是通过SSH加密的，所以要设置SSH KEY.</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"youremail@email.com\"</span> </span><br><span class=\"line\"><span class=\"comment\"># \"youremail@email.com\"  是你注册github的邮箱地址</span></span><br><span class=\"line\"><span class=\"comment\"># 后面基本是一直回车， 但是有一个地方会让你输入密码，这是你sshkey的密码</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"这里是让你输入密码：【输入两次确保密码设置正确】\"><a href=\"#这里是让你输入密码：【输入两次确保密码设置正确】\" class=\"headerlink\" title=\"这里是让你输入密码：【输入两次确保密码设置正确】\"></a>这里是让你输入密码：【输入两次确保密码设置正确】</h5><img src=\"/blog/上传项目到github/上传项目到github1.png\" title=\"这里输入密码\">\n\n<h5 id=\"SSHKey创建成功后，会在你的用户目录的-ssh文件夹下生成id-rsa和id-rsa-pub文件。\"><a href=\"#SSHKey创建成功后，会在你的用户目录的-ssh文件夹下生成id-rsa和id-rsa-pub文件。\" class=\"headerlink\" title=\"SSHKey创建成功后，会在你的用户目录的.ssh文件夹下生成id_rsa和id_rsa.pub文件。\"></a>SSHKey创建成功后，会在你的用户目录的.ssh文件夹下生成<code>id_rsa</code><strong>和</strong><code>id_rsa.pub</code>文件。</h5><h5 id=\"这是SSH-Key的秘钥对，其中id-rsa是私钥，不能泄露，id-rsa-pub是公钥，可以告诉其他人。\"><a href=\"#这是SSH-Key的秘钥对，其中id-rsa是私钥，不能泄露，id-rsa-pub是公钥，可以告诉其他人。\" class=\"headerlink\" title=\"这是SSH Key的秘钥对，其中id_rsa是私钥，不能泄露，id_rsa.pub是公钥，可以告诉其他人。\"></a>这是SSH Key的秘钥对，其中<code>id_rsa</code>是私钥，不能泄露，<code>id_rsa.pub</code>是公钥，可以告诉其他人。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim id_rsa.pub</span><br><span class=\"line\"><span class=\"comment\">#复制文件内的内容</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"登录GitHub，点击右上角头像，Settings-gt-Personal-settings-gt-SSH-and-GPG-keys。在SSH-Keys标签右方点击New-SSH-Key。-这里会弹出两个文本框，其中的Title，读者可以随意命名。另一个Key文本框，就是粘贴刚才复制的内容。\"><a href=\"#登录GitHub，点击右上角头像，Settings-gt-Personal-settings-gt-SSH-and-GPG-keys。在SSH-Keys标签右方点击New-SSH-Key。-这里会弹出两个文本框，其中的Title，读者可以随意命名。另一个Key文本框，就是粘贴刚才复制的内容。\" class=\"headerlink\" title=\"登录GitHub，点击右上角头像，Settings -&gt; Personal settings -&gt; SSH and GPG keys。在SSH Keys标签右方点击New SSH Key。 这里会弹出两个文本框，其中的Title，读者可以随意命名。另一个Key文本框，就是粘贴刚才复制的内容。\"></a>登录GitHub，点击右上角头像，Settings -&gt; Personal settings -&gt; SSH and GPG keys。在SSH Keys标签右方点击New SSH Key。 这里会弹出两个文本框，其中的Title，读者可以随意命名。另一个Key文本框，就是粘贴刚才复制的内容。</h5><h4 id=\"三、上传内容\"><a href=\"#三、上传内容\" class=\"headerlink\" title=\"三、上传内容\"></a>三、上传内容</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version <span class=\"comment\">#检查是否安装了git</span></span><br><span class=\"line\"><span class=\"comment\"># 如果没安装，就先安装 ： sudo apt-get install git</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /你的项目文件根目录</span><br><span class=\"line\">$ git init <span class=\"comment\">#初始化命令，这个命令可以把当前目录变成git可以管理的仓库。</span></span><br><span class=\"line\">$ git add file <span class=\"comment\">#添加文件到暂存区,file为文件名</span></span><br><span class=\"line\">$ git add . <span class=\"comment\">#把文件夹所有文件都添加</span></span><br><span class=\"line\">$ git status <span class=\"comment\">#该指令可以查看当前的分支以及添加文件的情况。</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"first commit\"</span>   <span class=\"comment\"># -m后的内容是添加的描述，提交新版本</span></span><br></pre></td></tr></table></figure>\n\n<p>使用push命令上传文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push git@github.com:wooyee-ldq/chat-IM.git master</span><br><span class=\"line\"><span class=\"comment\">#仓库是第一次进行push时使用该命令，如果不是第一次则使用下面命令：</span></span><br><span class=\"line\">$ git push origin 分支名</span><br><span class=\"line\"><span class=\"comment\"># git@github.com:wooyee-ldq/chat-IM.git 这个是你的仓库download那里的ssh地址</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:wooyee-ldq/chat-IM.git</span><br><span class=\"line\"><span class=\"comment\"># 更改远程仓库名称为：origin  ，默认远程仓库名就是 origin</span></span><br><span class=\"line\">$ git remote rm origin <span class=\"comment\">#删除远程仓库</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"遇到错误：\"><a href=\"#遇到错误：\" class=\"headerlink\" title=\"遇到错误：\"></a>遇到错误：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">To github.com:wooyee-ldq/chat-IM.git</span><br><span class=\"line\"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class=\"line\">error: 无法推送一些引用到 <span class=\"string\">'git@github.com:wooyee-ldq/chat-IM.git'</span></span><br><span class=\"line\">提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。</span><br><span class=\"line\">提示：再次推送前，先与远程变更合并（如 <span class=\"string\">'git pull ...'</span>）。详见</span><br><span class=\"line\">提示：<span class=\"string\">'git push --help'</span> 中的 <span class=\"string\">'Note about fast-forwards'</span> 小节。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"一个解决办法：\"><a href=\"#一个解决办法：\" class=\"headerlink\" title=\"一个解决办法：\"></a>一个解决办法：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull --rebase chatim master</span><br><span class=\"line\">来自 github.com:wooyee-ldq/chat-IM</span><br><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\">首先，回退分支以便在上面重放您的工作...</span><br><span class=\"line\">应用：first commit <span class=\"keyword\">for</span> blog_ejs</span><br><span class=\"line\">应用：add readme file</span><br><span class=\"line\">使用索引来重建一个（三方合并的）基础目录树...</span><br><span class=\"line\">回落到基础版本上打补丁及进行三方合并...</span><br><span class=\"line\">没有变更 —— 补丁已经应用过。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后再次上传成功了：\"><a href=\"#然后再次上传成功了：\" class=\"headerlink\" title=\"然后再次上传成功了：\"></a>然后再次上传成功了：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin  master</span><br><span class=\"line\">对象计数中: 2817, 完成.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">压缩对象中: 100% (2476/2476), 完成.</span><br><span class=\"line\">写入对象中: 100% (2817/2817), 3.57 MiB | 1.30 MiB/s, 完成.</span><br><span class=\"line\">Total 2817 (delta 482), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (482/482), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">To github.com:wooyee-ldq/chat-IM.git</span><br><span class=\"line\">   9b5ab20..0d9c6a5  master -&gt; master</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>push结束后，在GitHub端的对应仓库上刷新一下，会看到你的项目文件，说明项目内容已经上传成功~</p>\n<blockquote>\n<p>到此，上传项目到github完成…</p>\n</blockquote>\n</blockquote>\n"},{"title":"mongodb常用的数据库操作命令","date":"2019-08-06T15:31:51.000Z","_content":"\n#### mongodb作为NoSQL中一个比较流行和使用广泛的数据库，因为是非关系型数据库，所以mongodb的查询并不是使用sql语句。\n\n#### ***下面简单介绍一下mongodb操作数据库的常用命令：***\n\n```bash\n#首先打开mongodb服务，然后进入mongo shell\n$ sudo systemctl start mongod\n$ mongo\n>\n#这里简单介绍一下数据库的打开和关闭，这里介绍两种方式：\n> service mongod start\t#打开mongodb数据库\n> service mongod stop\t#关闭mongodb数据库\n> sudo systemctl start mongod\t#打开数据库\n> sudo systemctl stop mongod\t#关闭数据库\n```\n\n```bash\n#输出可用的命令列表：\n> help\n#输出数据库服务器上面数据库的名称到连接的控制台上【默认是localhost:27017】，也就是显示数据库列表：\n> show dbs\n```\n\n```bash\n#切换到某个数据库【db_name是数据库的名称】：\n> use db_name\n#创建数据库【同切换其实一样，只是如果不存在切换的数据库就是创建了】：\n> use dataBase_name\n#删除数据库：\n> db.dropDatabase()\t#删除当前选择的数据库\n```\n\n```bash\n#mongodb创建集合：\n> use db_name\t#选择要创建集合的数据库\n> db.createCollection(name, options)\n>#参数：name指的是集合名称，options是可选参数，是指定内存大小和索引的选项\n>\n#删除集合：\n> db.collection_name.drop() ##这种方式在一些复杂的集合名称使用时会报错\n#删除集合，还可以使用下面这种：\n> db.getCollection(\"collection_name\").drop();\n```\n\n```bash\n#显示当前数据库集合的列表：\n> show collections\n#查找集合中所有匹配条件的数据：\n> db.collection_name.find(query)\n#查找集合中一条匹配条件的数据【返回第一条匹配的数据】：\n> db.collection_name.findOne(query)\n#在collection_name集合中插入一条数据：\n> db.collection_name.insert(document)\n#保存一条数据到collection_name集合中[简写为：upsert(no_id)或者insert(with_id)]：\n> db.collection_name.save(document)\n#用data数据更新匹配条件的collection_name集合中的数据：\n> db.collection_name.update(query, {$set: data})\n#删除collection_name集合中所有匹配条件的数据：\n> db.collection_name.remove(query)\n#输出参数文档：\n>printjson(document)\n```\n\n```bash\n#还可以编写javaScript脚本来操作脚本，比如存储变量或赋值等：\n> var a = db.collection_name.findOne()\n> printjson(a)\n> a.text = 'hello world!'\n> printjson(a)\n> db.collection_name.save(a)\n>#这样就修改了a对应的这条数据，这里是增加了text键对应\"hello world!\"的值\n```\n\n```bash\n#创建数据库集合索引：\n> db.collection_name.ensureIndex({KEY:1})\t#这里的KEY值是你要创建的索引字段，1为升序，-1为降序。\n```\n\n#### 索引还有复合索引的用法，也就是索引有多个。\n\n* 集合中索引最多是64个\n* 索引名长度不可超过125个字符\n* 一个复合索引最多可以有31个字段\n\n```bash\n#mongodb聚合【aggregate() 方法】：\n> db.collection_name.aggregate(options)\n```\n\n#### 聚合的有关参数表达式：\n\n{% asset_img options.png%}\n\n#### *mongodb数据库操作的基本简单命令大概就是以上了...*\n\n","source":"_posts/mongodb常用的数据库操作命令.md","raw":"---\ntitle: mongodb常用的数据库操作命令\ndate: 2019-08-06 23:31:51\ntags: [\"mongodb\",\"nodejs\"]\n---\n\n#### mongodb作为NoSQL中一个比较流行和使用广泛的数据库，因为是非关系型数据库，所以mongodb的查询并不是使用sql语句。\n\n#### ***下面简单介绍一下mongodb操作数据库的常用命令：***\n\n```bash\n#首先打开mongodb服务，然后进入mongo shell\n$ sudo systemctl start mongod\n$ mongo\n>\n#这里简单介绍一下数据库的打开和关闭，这里介绍两种方式：\n> service mongod start\t#打开mongodb数据库\n> service mongod stop\t#关闭mongodb数据库\n> sudo systemctl start mongod\t#打开数据库\n> sudo systemctl stop mongod\t#关闭数据库\n```\n\n```bash\n#输出可用的命令列表：\n> help\n#输出数据库服务器上面数据库的名称到连接的控制台上【默认是localhost:27017】，也就是显示数据库列表：\n> show dbs\n```\n\n```bash\n#切换到某个数据库【db_name是数据库的名称】：\n> use db_name\n#创建数据库【同切换其实一样，只是如果不存在切换的数据库就是创建了】：\n> use dataBase_name\n#删除数据库：\n> db.dropDatabase()\t#删除当前选择的数据库\n```\n\n```bash\n#mongodb创建集合：\n> use db_name\t#选择要创建集合的数据库\n> db.createCollection(name, options)\n>#参数：name指的是集合名称，options是可选参数，是指定内存大小和索引的选项\n>\n#删除集合：\n> db.collection_name.drop() ##这种方式在一些复杂的集合名称使用时会报错\n#删除集合，还可以使用下面这种：\n> db.getCollection(\"collection_name\").drop();\n```\n\n```bash\n#显示当前数据库集合的列表：\n> show collections\n#查找集合中所有匹配条件的数据：\n> db.collection_name.find(query)\n#查找集合中一条匹配条件的数据【返回第一条匹配的数据】：\n> db.collection_name.findOne(query)\n#在collection_name集合中插入一条数据：\n> db.collection_name.insert(document)\n#保存一条数据到collection_name集合中[简写为：upsert(no_id)或者insert(with_id)]：\n> db.collection_name.save(document)\n#用data数据更新匹配条件的collection_name集合中的数据：\n> db.collection_name.update(query, {$set: data})\n#删除collection_name集合中所有匹配条件的数据：\n> db.collection_name.remove(query)\n#输出参数文档：\n>printjson(document)\n```\n\n```bash\n#还可以编写javaScript脚本来操作脚本，比如存储变量或赋值等：\n> var a = db.collection_name.findOne()\n> printjson(a)\n> a.text = 'hello world!'\n> printjson(a)\n> db.collection_name.save(a)\n>#这样就修改了a对应的这条数据，这里是增加了text键对应\"hello world!\"的值\n```\n\n```bash\n#创建数据库集合索引：\n> db.collection_name.ensureIndex({KEY:1})\t#这里的KEY值是你要创建的索引字段，1为升序，-1为降序。\n```\n\n#### 索引还有复合索引的用法，也就是索引有多个。\n\n* 集合中索引最多是64个\n* 索引名长度不可超过125个字符\n* 一个复合索引最多可以有31个字段\n\n```bash\n#mongodb聚合【aggregate() 方法】：\n> db.collection_name.aggregate(options)\n```\n\n#### 聚合的有关参数表达式：\n\n{% asset_img options.png%}\n\n#### *mongodb数据库操作的基本简单命令大概就是以上了...*\n\n","slug":"mongodb常用的数据库操作命令","published":1,"updated":"2019-08-24T10:16:35.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7be000lggvk1svu9yu7","content":"<h4 id=\"mongodb作为NoSQL中一个比较流行和使用广泛的数据库，因为是非关系型数据库，所以mongodb的查询并不是使用sql语句。\"><a href=\"#mongodb作为NoSQL中一个比较流行和使用广泛的数据库，因为是非关系型数据库，所以mongodb的查询并不是使用sql语句。\" class=\"headerlink\" title=\"mongodb作为NoSQL中一个比较流行和使用广泛的数据库，因为是非关系型数据库，所以mongodb的查询并不是使用sql语句。\"></a>mongodb作为NoSQL中一个比较流行和使用广泛的数据库，因为是非关系型数据库，所以mongodb的查询并不是使用sql语句。</h4><h4 id=\"下面简单介绍一下mongodb操作数据库的常用命令：\"><a href=\"#下面简单介绍一下mongodb操作数据库的常用命令：\" class=\"headerlink\" title=\"下面简单介绍一下mongodb操作数据库的常用命令：\"></a><strong><em>下面简单介绍一下mongodb操作数据库的常用命令：</em></strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#首先打开mongodb服务，然后进入mongo shell</span></span><br><span class=\"line\">$ sudo systemctl start mongod</span><br><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt;</span><br><span class=\"line\"><span class=\"comment\">#这里简单介绍一下数据库的打开和关闭，这里介绍两种方式：</span></span><br><span class=\"line\">&gt; service mongod start\t<span class=\"comment\">#打开mongodb数据库</span></span><br><span class=\"line\">&gt; service mongod stop\t<span class=\"comment\">#关闭mongodb数据库</span></span><br><span class=\"line\">&gt; sudo systemctl start mongod\t<span class=\"comment\">#打开数据库</span></span><br><span class=\"line\">&gt; sudo systemctl stop mongod\t<span class=\"comment\">#关闭数据库</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#输出可用的命令列表：</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\">#输出数据库服务器上面数据库的名称到连接的控制台上【默认是localhost:27017】，也就是显示数据库列表：</span></span><br><span class=\"line\">&gt; show dbs</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#切换到某个数据库【db_name是数据库的名称】：</span></span><br><span class=\"line\">&gt; use db_name</span><br><span class=\"line\"><span class=\"comment\">#创建数据库【同切换其实一样，只是如果不存在切换的数据库就是创建了】：</span></span><br><span class=\"line\">&gt; use dataBase_name</span><br><span class=\"line\"><span class=\"comment\">#删除数据库：</span></span><br><span class=\"line\">&gt; db.dropDatabase()\t<span class=\"comment\">#删除当前选择的数据库</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mongodb创建集合：</span></span><br><span class=\"line\">&gt; use db_name\t<span class=\"comment\">#选择要创建集合的数据库</span></span><br><span class=\"line\">&gt; db.createCollection(name, options)</span><br><span class=\"line\">&gt;<span class=\"comment\">#参数：name指的是集合名称，options是可选参数，是指定内存大小和索引的选项</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\"><span class=\"comment\">#删除集合：</span></span><br><span class=\"line\">&gt; db.collection_name.drop() <span class=\"comment\">##这种方式在一些复杂的集合名称使用时会报错</span></span><br><span class=\"line\"><span class=\"comment\">#删除集合，还可以使用下面这种：</span></span><br><span class=\"line\">&gt; db.getCollection(<span class=\"string\">\"collection_name\"</span>).drop();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#显示当前数据库集合的列表：</span></span><br><span class=\"line\">&gt; show collections</span><br><span class=\"line\"><span class=\"comment\">#查找集合中所有匹配条件的数据：</span></span><br><span class=\"line\">&gt; db.collection_name.find(query)</span><br><span class=\"line\"><span class=\"comment\">#查找集合中一条匹配条件的数据【返回第一条匹配的数据】：</span></span><br><span class=\"line\">&gt; db.collection_name.findOne(query)</span><br><span class=\"line\"><span class=\"comment\">#在collection_name集合中插入一条数据：</span></span><br><span class=\"line\">&gt; db.collection_name.insert(document)</span><br><span class=\"line\"><span class=\"comment\">#保存一条数据到collection_name集合中[简写为：upsert(no_id)或者insert(with_id)]：</span></span><br><span class=\"line\">&gt; db.collection_name.save(document)</span><br><span class=\"line\"><span class=\"comment\">#用data数据更新匹配条件的collection_name集合中的数据：</span></span><br><span class=\"line\">&gt; db.collection_name.update(query, &#123;<span class=\"variable\">$set</span>: data&#125;)</span><br><span class=\"line\"><span class=\"comment\">#删除collection_name集合中所有匹配条件的数据：</span></span><br><span class=\"line\">&gt; db.collection_name.remove(query)</span><br><span class=\"line\"><span class=\"comment\">#输出参数文档：</span></span><br><span class=\"line\">&gt;printjson(document)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#还可以编写javaScript脚本来操作脚本，比如存储变量或赋值等：</span></span><br><span class=\"line\">&gt; var a = db.collection_name.findOne()</span><br><span class=\"line\">&gt; printjson(a)</span><br><span class=\"line\">&gt; a.text = <span class=\"string\">'hello world!'</span></span><br><span class=\"line\">&gt; printjson(a)</span><br><span class=\"line\">&gt; db.collection_name.save(a)</span><br><span class=\"line\">&gt;<span class=\"comment\">#这样就修改了a对应的这条数据，这里是增加了text键对应\"hello world!\"的值</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建数据库集合索引：</span></span><br><span class=\"line\">&gt; db.collection_name.ensureIndex(&#123;KEY:1&#125;)\t<span class=\"comment\">#这里的KEY值是你要创建的索引字段，1为升序，-1为降序。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"索引还有复合索引的用法，也就是索引有多个。\"><a href=\"#索引还有复合索引的用法，也就是索引有多个。\" class=\"headerlink\" title=\"索引还有复合索引的用法，也就是索引有多个。\"></a>索引还有复合索引的用法，也就是索引有多个。</h4><ul>\n<li>集合中索引最多是64个</li>\n<li>索引名长度不可超过125个字符</li>\n<li>一个复合索引最多可以有31个字段</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mongodb聚合【aggregate() 方法】：</span></span><br><span class=\"line\">&gt; db.collection_name.aggregate(options)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"聚合的有关参数表达式：\"><a href=\"#聚合的有关参数表达式：\" class=\"headerlink\" title=\"聚合的有关参数表达式：\"></a>聚合的有关参数表达式：</h4><img src=\"/blog/mongodb常用的数据库操作命令/options.png\">\n\n<h4 id=\"mongodb数据库操作的基本简单命令大概就是以上了…\"><a href=\"#mongodb数据库操作的基本简单命令大概就是以上了…\" class=\"headerlink\" title=\"mongodb数据库操作的基本简单命令大概就是以上了…\"></a><em>mongodb数据库操作的基本简单命令大概就是以上了…</em></h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"mongodb作为NoSQL中一个比较流行和使用广泛的数据库，因为是非关系型数据库，所以mongodb的查询并不是使用sql语句。\"><a href=\"#mongodb作为NoSQL中一个比较流行和使用广泛的数据库，因为是非关系型数据库，所以mongodb的查询并不是使用sql语句。\" class=\"headerlink\" title=\"mongodb作为NoSQL中一个比较流行和使用广泛的数据库，因为是非关系型数据库，所以mongodb的查询并不是使用sql语句。\"></a>mongodb作为NoSQL中一个比较流行和使用广泛的数据库，因为是非关系型数据库，所以mongodb的查询并不是使用sql语句。</h4><h4 id=\"下面简单介绍一下mongodb操作数据库的常用命令：\"><a href=\"#下面简单介绍一下mongodb操作数据库的常用命令：\" class=\"headerlink\" title=\"下面简单介绍一下mongodb操作数据库的常用命令：\"></a><strong><em>下面简单介绍一下mongodb操作数据库的常用命令：</em></strong></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#首先打开mongodb服务，然后进入mongo shell</span></span><br><span class=\"line\">$ sudo systemctl start mongod</span><br><span class=\"line\">$ mongo</span><br><span class=\"line\">&gt;</span><br><span class=\"line\"><span class=\"comment\">#这里简单介绍一下数据库的打开和关闭，这里介绍两种方式：</span></span><br><span class=\"line\">&gt; service mongod start\t<span class=\"comment\">#打开mongodb数据库</span></span><br><span class=\"line\">&gt; service mongod stop\t<span class=\"comment\">#关闭mongodb数据库</span></span><br><span class=\"line\">&gt; sudo systemctl start mongod\t<span class=\"comment\">#打开数据库</span></span><br><span class=\"line\">&gt; sudo systemctl stop mongod\t<span class=\"comment\">#关闭数据库</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#输出可用的命令列表：</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\">#输出数据库服务器上面数据库的名称到连接的控制台上【默认是localhost:27017】，也就是显示数据库列表：</span></span><br><span class=\"line\">&gt; show dbs</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#切换到某个数据库【db_name是数据库的名称】：</span></span><br><span class=\"line\">&gt; use db_name</span><br><span class=\"line\"><span class=\"comment\">#创建数据库【同切换其实一样，只是如果不存在切换的数据库就是创建了】：</span></span><br><span class=\"line\">&gt; use dataBase_name</span><br><span class=\"line\"><span class=\"comment\">#删除数据库：</span></span><br><span class=\"line\">&gt; db.dropDatabase()\t<span class=\"comment\">#删除当前选择的数据库</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mongodb创建集合：</span></span><br><span class=\"line\">&gt; use db_name\t<span class=\"comment\">#选择要创建集合的数据库</span></span><br><span class=\"line\">&gt; db.createCollection(name, options)</span><br><span class=\"line\">&gt;<span class=\"comment\">#参数：name指的是集合名称，options是可选参数，是指定内存大小和索引的选项</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\"><span class=\"comment\">#删除集合：</span></span><br><span class=\"line\">&gt; db.collection_name.drop() <span class=\"comment\">##这种方式在一些复杂的集合名称使用时会报错</span></span><br><span class=\"line\"><span class=\"comment\">#删除集合，还可以使用下面这种：</span></span><br><span class=\"line\">&gt; db.getCollection(<span class=\"string\">\"collection_name\"</span>).drop();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#显示当前数据库集合的列表：</span></span><br><span class=\"line\">&gt; show collections</span><br><span class=\"line\"><span class=\"comment\">#查找集合中所有匹配条件的数据：</span></span><br><span class=\"line\">&gt; db.collection_name.find(query)</span><br><span class=\"line\"><span class=\"comment\">#查找集合中一条匹配条件的数据【返回第一条匹配的数据】：</span></span><br><span class=\"line\">&gt; db.collection_name.findOne(query)</span><br><span class=\"line\"><span class=\"comment\">#在collection_name集合中插入一条数据：</span></span><br><span class=\"line\">&gt; db.collection_name.insert(document)</span><br><span class=\"line\"><span class=\"comment\">#保存一条数据到collection_name集合中[简写为：upsert(no_id)或者insert(with_id)]：</span></span><br><span class=\"line\">&gt; db.collection_name.save(document)</span><br><span class=\"line\"><span class=\"comment\">#用data数据更新匹配条件的collection_name集合中的数据：</span></span><br><span class=\"line\">&gt; db.collection_name.update(query, &#123;<span class=\"variable\">$set</span>: data&#125;)</span><br><span class=\"line\"><span class=\"comment\">#删除collection_name集合中所有匹配条件的数据：</span></span><br><span class=\"line\">&gt; db.collection_name.remove(query)</span><br><span class=\"line\"><span class=\"comment\">#输出参数文档：</span></span><br><span class=\"line\">&gt;printjson(document)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#还可以编写javaScript脚本来操作脚本，比如存储变量或赋值等：</span></span><br><span class=\"line\">&gt; var a = db.collection_name.findOne()</span><br><span class=\"line\">&gt; printjson(a)</span><br><span class=\"line\">&gt; a.text = <span class=\"string\">'hello world!'</span></span><br><span class=\"line\">&gt; printjson(a)</span><br><span class=\"line\">&gt; db.collection_name.save(a)</span><br><span class=\"line\">&gt;<span class=\"comment\">#这样就修改了a对应的这条数据，这里是增加了text键对应\"hello world!\"的值</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建数据库集合索引：</span></span><br><span class=\"line\">&gt; db.collection_name.ensureIndex(&#123;KEY:1&#125;)\t<span class=\"comment\">#这里的KEY值是你要创建的索引字段，1为升序，-1为降序。</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"索引还有复合索引的用法，也就是索引有多个。\"><a href=\"#索引还有复合索引的用法，也就是索引有多个。\" class=\"headerlink\" title=\"索引还有复合索引的用法，也就是索引有多个。\"></a>索引还有复合索引的用法，也就是索引有多个。</h4><ul>\n<li>集合中索引最多是64个</li>\n<li>索引名长度不可超过125个字符</li>\n<li>一个复合索引最多可以有31个字段</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mongodb聚合【aggregate() 方法】：</span></span><br><span class=\"line\">&gt; db.collection_name.aggregate(options)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"聚合的有关参数表达式：\"><a href=\"#聚合的有关参数表达式：\" class=\"headerlink\" title=\"聚合的有关参数表达式：\"></a>聚合的有关参数表达式：</h4><img src=\"/blog/mongodb常用的数据库操作命令/options.png\">\n\n<h4 id=\"mongodb数据库操作的基本简单命令大概就是以上了…\"><a href=\"#mongodb数据库操作的基本简单命令大概就是以上了…\" class=\"headerlink\" title=\"mongodb数据库操作的基本简单命令大概就是以上了…\"></a><em>mongodb数据库操作的基本简单命令大概就是以上了…</em></h4>"},{"title":"使用hexo搭建个人博客并部署到github","date":"2019-07-30T15:06:48.000Z","_content":"\n## 使用[Hexo](<https://hexo.io/zh-cn/docs/>)博客框架搭建自己的个人博客并不需要学会nodejs，html，css等内容。其中nodejs只是作为hexo框架的运行环境。\n\n## *下面是各个步骤：*\n\n## 一.安装node.js\n\n#### **Linux:**\n\n#### 1. 官网下载[node.js](<https://nodejs.org/en/>).tar.xz安装包；这里有我之前下载的[安装包](https://pan.baidu.com/s/1zj9yjueD9IR9hTg6HttFJg)，密码: 7flj\n\n#### 2.把安装包移动或复制到你想要安装的目录下\n\n#### 3.Ctrl+Alt+t 或者 鼠标右键 '打开终端'，下面是在终端的代码：\n\n```bash\ncd 你的安装包所在目录\nxz -d nodejs.tar.xz\ntar -xvf nodejs.tar\n```\n\n#### 4.上面的代码是解压安装包，解压好之后需要配置环境变量：\n\n```bash\nvim /etc/profile   #打开配置文件，添加以下内容：\n\n#set path for nodejs\nexport NODE_HOME=/nodejs的安装目录\nexport PATH=$NODE_HOME/bin:$PATH\n```\n\n#### 5.使环境变量生效\n\n```bash\nsource /etc/profile    #使得环境变量生效\n```\n\n#### 6.检查nodejs是否安装成功\n\n```bash\n#检查nodejs是否安装成功：\n$ node --version\t#检查nodejs的版本\n$ node --help\t#显示nodejs的帮助信息\n$ npm --version\t#检查npm的版本\n$ npm --help\t#显示npm的帮助信息\n```\n\n#### **Window:**\n\n#### 1.官网下载[node.js](<https://nodejs.org/en/>)的window安装包。\n\n#### 2.双击nodejs安装包，选择安装位置等，勾选添加到path。\n\n#### 3.window的安装比较简单，这里不在详细叙述。\n\n#### 4.安装完成后，在运行窗口（win+R 打开）输入 cmd ，打开命令行窗口，输入命令检查nodejs的安装（直接在开始菜单右键打开power shell也可以）：\n\n```bash\n> node --version\t#检查nodejs的版本\n> npm --version\t\t#检查npm的版本\n```\n\n## 二.注册Github和创建存储库\n\n#### 1.[Github官网](https://github.com)注册账户，如果已注册自行忽略。\n\n#### 2.登录账户，创建一个： ***你的用户名.github.io*** 的存储库。\n\n{% asset_img github1.png%}\n\n{% asset_img github2.png%}\n\n## 三.安装Git和配置Github\n\n#### **Linux:**（这里是官方Linux各种版本的[安装](https://git-scm.com/download/linux)，我这里是基于ubuntu）\n\n#### 1.打开终端，输入：\n\n```bash\n$ sudo apt-get update\n$ sudo apt-get install git\n```\n\n#### 2.配置git的个人信息和配置SSH\n\n```bash\n$ git config --global user.name \"你的github用户名\"\n$ git config --global user.email \"你注册的邮箱地址\"\n$ ssh-keygen -t rsa -C \"你注册的邮箱地址\"\t#生成SSH\n$ vim ~/.ssh/id_rsa.pub\t\t#打开生成的文件，复制里面的所有内容\n```\n\n##### 打开github,点击右上⻆自己的头像,点击settings,再点击SSH,之后添加new ssh key,最后把复制的信息都粘贴进去,title可以写，然后测试是否成功配置：\n\n```bash\n$ ssh -T git@github.com\n#显示下面内容就是成功了\nHi! You ve successfully authenticated, but GitHub does not provide shell access.\n```\n\n#### **window:**\n\n#### 1.直接官网下载[安装包](https://git-scm.com/download/win)，双击运行安装。\n\n#### 2.打开Git Bash命令窗口\n\n#### 3.配置git的方法和上面linux的相似，建议读者可以参考<https://blog.csdn.net/robertzhouxh/article/details/9887063>\n\n## 四.安装Hexo和使用Hexo创建博客项目\n\n#### **Linux&Window:**\n\n#### 1.安装hexo，打开终端【window打开cmd命令行窗口或power shell窗口】，输入：\n\n```bash\n$ npm install hexo -g\n```\n\n#### 2.使用hexo创建你的博客项目，终端输入：\n\n```bash\n$ hexo init blog\t#这里blog是你要创建的项目根目录\n```\n\n#### 3.安装 hexo-deployer-git\n\n```bash\n$ cd /../blog\t#进入你的博客项目根目录\n$ npm install hexo-deployer-git -save\n```\n\n#### 4.创建文章(在你的博客项目根目录)\n\n```bash\n$ hexo new \"newPost\"\n```\n\n#### 5.生成静态文件\n\n```bash\n$ hexo generate\n```\n\n#### 6.此时，在部署之前，读者可以输入以下命令来在本地电脑运行服务：\n\n```bash\n$ hexo server\n#然后浏览器打开localhost:3000就可以预览自己的博客\n```\n\n#### 7.部署前还要配置一下_config.yml文件：\n\n```bash\n#该文件是前面生成的项目根目录下的_config.yml文件：\n$ cd blog #项目根目录\n$ vim _config.yml\n#打开文件后，添加以下内容：\n\t# Deployment\n\t## Docs: https://hexo.io/docs/deployment.html\n\tdeploy:\n \t \ttype: git\n \t\trepo: git@github.com:wooyee-ldq/wooyee-ldq.github.io.git\t#这里要填你github项目download那里的ssh地址\n \t\tbranch: master\n```\n\n#### 8.配置好_config.yml后，部署博客到github\n\n```bash\n$ hexo deploy\n```\n\n#### 9.浏览器输入地址：***你的用户名.github.io*** 便可以浏览你的博客了，hexo会有个hello world 的默认文章，那里有一些hexo操作的教程和官网教程地址。 \n\n---\n\n> > 到此，你创建了一个博客并部署到了github，还不现在就写篇文章发表到博客！！！关于如何编写文章(你的项目根目录/source/_post文件夹下面的md文件)，读者可以参考[markdown语法编写博客文章](https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/)！！！\n\n\n\n\n\n\n\n","source":"_posts/使用hexo搭建个人博客并部署到github.md","raw":"---\ntitle: 使用hexo搭建个人博客并部署到github\ndate: 2019-07-30 23:06:48\ntags: Hexo\n---\n\n## 使用[Hexo](<https://hexo.io/zh-cn/docs/>)博客框架搭建自己的个人博客并不需要学会nodejs，html，css等内容。其中nodejs只是作为hexo框架的运行环境。\n\n## *下面是各个步骤：*\n\n## 一.安装node.js\n\n#### **Linux:**\n\n#### 1. 官网下载[node.js](<https://nodejs.org/en/>).tar.xz安装包；这里有我之前下载的[安装包](https://pan.baidu.com/s/1zj9yjueD9IR9hTg6HttFJg)，密码: 7flj\n\n#### 2.把安装包移动或复制到你想要安装的目录下\n\n#### 3.Ctrl+Alt+t 或者 鼠标右键 '打开终端'，下面是在终端的代码：\n\n```bash\ncd 你的安装包所在目录\nxz -d nodejs.tar.xz\ntar -xvf nodejs.tar\n```\n\n#### 4.上面的代码是解压安装包，解压好之后需要配置环境变量：\n\n```bash\nvim /etc/profile   #打开配置文件，添加以下内容：\n\n#set path for nodejs\nexport NODE_HOME=/nodejs的安装目录\nexport PATH=$NODE_HOME/bin:$PATH\n```\n\n#### 5.使环境变量生效\n\n```bash\nsource /etc/profile    #使得环境变量生效\n```\n\n#### 6.检查nodejs是否安装成功\n\n```bash\n#检查nodejs是否安装成功：\n$ node --version\t#检查nodejs的版本\n$ node --help\t#显示nodejs的帮助信息\n$ npm --version\t#检查npm的版本\n$ npm --help\t#显示npm的帮助信息\n```\n\n#### **Window:**\n\n#### 1.官网下载[node.js](<https://nodejs.org/en/>)的window安装包。\n\n#### 2.双击nodejs安装包，选择安装位置等，勾选添加到path。\n\n#### 3.window的安装比较简单，这里不在详细叙述。\n\n#### 4.安装完成后，在运行窗口（win+R 打开）输入 cmd ，打开命令行窗口，输入命令检查nodejs的安装（直接在开始菜单右键打开power shell也可以）：\n\n```bash\n> node --version\t#检查nodejs的版本\n> npm --version\t\t#检查npm的版本\n```\n\n## 二.注册Github和创建存储库\n\n#### 1.[Github官网](https://github.com)注册账户，如果已注册自行忽略。\n\n#### 2.登录账户，创建一个： ***你的用户名.github.io*** 的存储库。\n\n{% asset_img github1.png%}\n\n{% asset_img github2.png%}\n\n## 三.安装Git和配置Github\n\n#### **Linux:**（这里是官方Linux各种版本的[安装](https://git-scm.com/download/linux)，我这里是基于ubuntu）\n\n#### 1.打开终端，输入：\n\n```bash\n$ sudo apt-get update\n$ sudo apt-get install git\n```\n\n#### 2.配置git的个人信息和配置SSH\n\n```bash\n$ git config --global user.name \"你的github用户名\"\n$ git config --global user.email \"你注册的邮箱地址\"\n$ ssh-keygen -t rsa -C \"你注册的邮箱地址\"\t#生成SSH\n$ vim ~/.ssh/id_rsa.pub\t\t#打开生成的文件，复制里面的所有内容\n```\n\n##### 打开github,点击右上⻆自己的头像,点击settings,再点击SSH,之后添加new ssh key,最后把复制的信息都粘贴进去,title可以写，然后测试是否成功配置：\n\n```bash\n$ ssh -T git@github.com\n#显示下面内容就是成功了\nHi! You ve successfully authenticated, but GitHub does not provide shell access.\n```\n\n#### **window:**\n\n#### 1.直接官网下载[安装包](https://git-scm.com/download/win)，双击运行安装。\n\n#### 2.打开Git Bash命令窗口\n\n#### 3.配置git的方法和上面linux的相似，建议读者可以参考<https://blog.csdn.net/robertzhouxh/article/details/9887063>\n\n## 四.安装Hexo和使用Hexo创建博客项目\n\n#### **Linux&Window:**\n\n#### 1.安装hexo，打开终端【window打开cmd命令行窗口或power shell窗口】，输入：\n\n```bash\n$ npm install hexo -g\n```\n\n#### 2.使用hexo创建你的博客项目，终端输入：\n\n```bash\n$ hexo init blog\t#这里blog是你要创建的项目根目录\n```\n\n#### 3.安装 hexo-deployer-git\n\n```bash\n$ cd /../blog\t#进入你的博客项目根目录\n$ npm install hexo-deployer-git -save\n```\n\n#### 4.创建文章(在你的博客项目根目录)\n\n```bash\n$ hexo new \"newPost\"\n```\n\n#### 5.生成静态文件\n\n```bash\n$ hexo generate\n```\n\n#### 6.此时，在部署之前，读者可以输入以下命令来在本地电脑运行服务：\n\n```bash\n$ hexo server\n#然后浏览器打开localhost:3000就可以预览自己的博客\n```\n\n#### 7.部署前还要配置一下_config.yml文件：\n\n```bash\n#该文件是前面生成的项目根目录下的_config.yml文件：\n$ cd blog #项目根目录\n$ vim _config.yml\n#打开文件后，添加以下内容：\n\t# Deployment\n\t## Docs: https://hexo.io/docs/deployment.html\n\tdeploy:\n \t \ttype: git\n \t\trepo: git@github.com:wooyee-ldq/wooyee-ldq.github.io.git\t#这里要填你github项目download那里的ssh地址\n \t\tbranch: master\n```\n\n#### 8.配置好_config.yml后，部署博客到github\n\n```bash\n$ hexo deploy\n```\n\n#### 9.浏览器输入地址：***你的用户名.github.io*** 便可以浏览你的博客了，hexo会有个hello world 的默认文章，那里有一些hexo操作的教程和官网教程地址。 \n\n---\n\n> > 到此，你创建了一个博客并部署到了github，还不现在就写篇文章发表到博客！！！关于如何编写文章(你的项目根目录/source/_post文件夹下面的md文件)，读者可以参考[markdown语法编写博客文章](https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/)！！！\n\n\n\n\n\n\n\n","slug":"使用hexo搭建个人博客并部署到github","published":1,"updated":"2019-08-10T16:40:18.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7bf000mggvkosu3vk2z","content":"<h2 id=\"使用Hexo博客框架搭建自己的个人博客并不需要学会nodejs，html，css等内容。其中nodejs只是作为hexo框架的运行环境。\"><a href=\"#使用Hexo博客框架搭建自己的个人博客并不需要学会nodejs，html，css等内容。其中nodejs只是作为hexo框架的运行环境。\" class=\"headerlink\" title=\"使用Hexo博客框架搭建自己的个人博客并不需要学会nodejs，html，css等内容。其中nodejs只是作为hexo框架的运行环境。\"></a>使用<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a>博客框架搭建自己的个人博客并不需要学会nodejs，html，css等内容。其中nodejs只是作为hexo框架的运行环境。</h2><h2 id=\"下面是各个步骤：\"><a href=\"#下面是各个步骤：\" class=\"headerlink\" title=\"下面是各个步骤：\"></a><em>下面是各个步骤：</em></h2><h2 id=\"一-安装node-js\"><a href=\"#一-安装node-js\" class=\"headerlink\" title=\"一.安装node.js\"></a>一.安装node.js</h2><h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux:\"></a><strong>Linux:</strong></h4><h4 id=\"1-官网下载node-js-tar-xz安装包；这里有我之前下载的安装包，密码-7flj\"><a href=\"#1-官网下载node-js-tar-xz安装包；这里有我之前下载的安装包，密码-7flj\" class=\"headerlink\" title=\"1. 官网下载node.js.tar.xz安装包；这里有我之前下载的安装包，密码: 7flj\"></a>1. 官网下载<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js</a>.tar.xz安装包；这里有我之前下载的<a href=\"https://pan.baidu.com/s/1zj9yjueD9IR9hTg6HttFJg\" target=\"_blank\" rel=\"noopener\">安装包</a>，密码: 7flj</h4><h4 id=\"2-把安装包移动或复制到你想要安装的目录下\"><a href=\"#2-把安装包移动或复制到你想要安装的目录下\" class=\"headerlink\" title=\"2.把安装包移动或复制到你想要安装的目录下\"></a>2.把安装包移动或复制到你想要安装的目录下</h4><h4 id=\"3-Ctrl-Alt-t-或者-鼠标右键-‘打开终端’，下面是在终端的代码：\"><a href=\"#3-Ctrl-Alt-t-或者-鼠标右键-‘打开终端’，下面是在终端的代码：\" class=\"headerlink\" title=\"3.Ctrl+Alt+t 或者 鼠标右键 ‘打开终端’，下面是在终端的代码：\"></a>3.Ctrl+Alt+t 或者 鼠标右键 ‘打开终端’，下面是在终端的代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> 你的安装包所在目录</span><br><span class=\"line\">xz -d nodejs.tar.xz</span><br><span class=\"line\">tar -xvf nodejs.tar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-上面的代码是解压安装包，解压好之后需要配置环境变量：\"><a href=\"#4-上面的代码是解压安装包，解压好之后需要配置环境变量：\" class=\"headerlink\" title=\"4.上面的代码是解压安装包，解压好之后需要配置环境变量：\"></a>4.上面的代码是解压安装包，解压好之后需要配置环境变量：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile   <span class=\"comment\">#打开配置文件，添加以下内容：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#set path for nodejs</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_HOME=/nodejs的安装目录</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODE_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-使环境变量生效\"><a href=\"#5-使环境变量生效\" class=\"headerlink\" title=\"5.使环境变量生效\"></a>5.使环境变量生效</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile    <span class=\"comment\">#使得环境变量生效</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-检查nodejs是否安装成功\"><a href=\"#6-检查nodejs是否安装成功\" class=\"headerlink\" title=\"6.检查nodejs是否安装成功\"></a>6.检查nodejs是否安装成功</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#检查nodejs是否安装成功：</span></span><br><span class=\"line\">$ node --version\t<span class=\"comment\">#检查nodejs的版本</span></span><br><span class=\"line\">$ node --<span class=\"built_in\">help</span>\t<span class=\"comment\">#显示nodejs的帮助信息</span></span><br><span class=\"line\">$ npm --version\t<span class=\"comment\">#检查npm的版本</span></span><br><span class=\"line\">$ npm --<span class=\"built_in\">help</span>\t<span class=\"comment\">#显示npm的帮助信息</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Window\"><a href=\"#Window\" class=\"headerlink\" title=\"Window:\"></a><strong>Window:</strong></h4><h4 id=\"1-官网下载node-js的window安装包。\"><a href=\"#1-官网下载node-js的window安装包。\" class=\"headerlink\" title=\"1.官网下载node.js的window安装包。\"></a>1.官网下载<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js</a>的window安装包。</h4><h4 id=\"2-双击nodejs安装包，选择安装位置等，勾选添加到path。\"><a href=\"#2-双击nodejs安装包，选择安装位置等，勾选添加到path。\" class=\"headerlink\" title=\"2.双击nodejs安装包，选择安装位置等，勾选添加到path。\"></a>2.双击nodejs安装包，选择安装位置等，勾选添加到path。</h4><h4 id=\"3-window的安装比较简单，这里不在详细叙述。\"><a href=\"#3-window的安装比较简单，这里不在详细叙述。\" class=\"headerlink\" title=\"3.window的安装比较简单，这里不在详细叙述。\"></a>3.window的安装比较简单，这里不在详细叙述。</h4><h4 id=\"4-安装完成后，在运行窗口（win-R-打开）输入-cmd-，打开命令行窗口，输入命令检查nodejs的安装（直接在开始菜单右键打开power-shell也可以）：\"><a href=\"#4-安装完成后，在运行窗口（win-R-打开）输入-cmd-，打开命令行窗口，输入命令检查nodejs的安装（直接在开始菜单右键打开power-shell也可以）：\" class=\"headerlink\" title=\"4.安装完成后，在运行窗口（win+R 打开）输入 cmd ，打开命令行窗口，输入命令检查nodejs的安装（直接在开始菜单右键打开power shell也可以）：\"></a>4.安装完成后，在运行窗口（win+R 打开）输入 cmd ，打开命令行窗口，输入命令检查nodejs的安装（直接在开始菜单右键打开power shell也可以）：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node --version\t<span class=\"comment\">#检查nodejs的版本</span></span><br><span class=\"line\">&gt; npm --version\t\t<span class=\"comment\">#检查npm的版本</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二-注册Github和创建存储库\"><a href=\"#二-注册Github和创建存储库\" class=\"headerlink\" title=\"二.注册Github和创建存储库\"></a>二.注册Github和创建存储库</h2><h4 id=\"1-Github官网注册账户，如果已注册自行忽略。\"><a href=\"#1-Github官网注册账户，如果已注册自行忽略。\" class=\"headerlink\" title=\"1.Github官网注册账户，如果已注册自行忽略。\"></a>1.<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">Github官网</a>注册账户，如果已注册自行忽略。</h4><h4 id=\"2-登录账户，创建一个：-你的用户名-github-io-的存储库。\"><a href=\"#2-登录账户，创建一个：-你的用户名-github-io-的存储库。\" class=\"headerlink\" title=\"2.登录账户，创建一个： 你的用户名.github.io 的存储库。\"></a>2.登录账户，创建一个： <strong><em>你的用户名.github.io</em></strong> 的存储库。</h4><img src=\"/blog/使用hexo搭建个人博客并部署到github/github1.png\">\n\n<img src=\"/blog/使用hexo搭建个人博客并部署到github/github2.png\">\n\n<h2 id=\"三-安装Git和配置Github\"><a href=\"#三-安装Git和配置Github\" class=\"headerlink\" title=\"三.安装Git和配置Github\"></a>三.安装Git和配置Github</h2><h4 id=\"Linux-（这里是官方Linux各种版本的安装，我这里是基于ubuntu）\"><a href=\"#Linux-（这里是官方Linux各种版本的安装，我这里是基于ubuntu）\" class=\"headerlink\" title=\"Linux:（这里是官方Linux各种版本的安装，我这里是基于ubuntu）\"></a><strong>Linux:</strong>（这里是官方Linux各种版本的<a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">安装</a>，我这里是基于ubuntu）</h4><h4 id=\"1-打开终端，输入：\"><a href=\"#1-打开终端，输入：\" class=\"headerlink\" title=\"1.打开终端，输入：\"></a>1.打开终端，输入：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-配置git的个人信息和配置SSH\"><a href=\"#2-配置git的个人信息和配置SSH\" class=\"headerlink\" title=\"2.配置git的个人信息和配置SSH\"></a>2.配置git的个人信息和配置SSH</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"你的github用户名\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"你注册的邮箱地址\"</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"你注册的邮箱地址\"</span>\t<span class=\"comment\">#生成SSH</span></span><br><span class=\"line\">$ vim ~/.ssh/id_rsa.pub\t\t<span class=\"comment\">#打开生成的文件，复制里面的所有内容</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"打开github-点击右上⻆自己的头像-点击settings-再点击SSH-之后添加new-ssh-key-最后把复制的信息都粘贴进去-title可以写，然后测试是否成功配置：\"><a href=\"#打开github-点击右上⻆自己的头像-点击settings-再点击SSH-之后添加new-ssh-key-最后把复制的信息都粘贴进去-title可以写，然后测试是否成功配置：\" class=\"headerlink\" title=\"打开github,点击右上⻆自己的头像,点击settings,再点击SSH,之后添加new ssh key,最后把复制的信息都粘贴进去,title可以写，然后测试是否成功配置：\"></a>打开github,点击右上⻆自己的头像,点击settings,再点击SSH,之后添加new ssh key,最后把复制的信息都粘贴进去,title可以写，然后测试是否成功配置：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\"><span class=\"comment\">#显示下面内容就是成功了</span></span><br><span class=\"line\">Hi! You ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window:\"></a><strong>window:</strong></h4><h4 id=\"1-直接官网下载安装包，双击运行安装。\"><a href=\"#1-直接官网下载安装包，双击运行安装。\" class=\"headerlink\" title=\"1.直接官网下载安装包，双击运行安装。\"></a>1.直接官网下载<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">安装包</a>，双击运行安装。</h4><h4 id=\"2-打开Git-Bash命令窗口\"><a href=\"#2-打开Git-Bash命令窗口\" class=\"headerlink\" title=\"2.打开Git Bash命令窗口\"></a>2.打开Git Bash命令窗口</h4><h4 id=\"3-配置git的方法和上面linux的相似，建议读者可以参考https-blog-csdn-net-robertzhouxh-article-details-9887063\"><a href=\"#3-配置git的方法和上面linux的相似，建议读者可以参考https-blog-csdn-net-robertzhouxh-article-details-9887063\" class=\"headerlink\" title=\"3.配置git的方法和上面linux的相似，建议读者可以参考https://blog.csdn.net/robertzhouxh/article/details/9887063\"></a>3.配置git的方法和上面linux的相似，建议读者可以参考<a href=\"https://blog.csdn.net/robertzhouxh/article/details/9887063\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/robertzhouxh/article/details/9887063</a></h4><h2 id=\"四-安装Hexo和使用Hexo创建博客项目\"><a href=\"#四-安装Hexo和使用Hexo创建博客项目\" class=\"headerlink\" title=\"四.安装Hexo和使用Hexo创建博客项目\"></a>四.安装Hexo和使用Hexo创建博客项目</h2><h4 id=\"Linux-amp-Window\"><a href=\"#Linux-amp-Window\" class=\"headerlink\" title=\"Linux&amp;Window:\"></a><strong>Linux&amp;Window:</strong></h4><h4 id=\"1-安装hexo，打开终端【window打开cmd命令行窗口或power-shell窗口】，输入：\"><a href=\"#1-安装hexo，打开终端【window打开cmd命令行窗口或power-shell窗口】，输入：\" class=\"headerlink\" title=\"1.安装hexo，打开终端【window打开cmd命令行窗口或power shell窗口】，输入：\"></a>1.安装hexo，打开终端【window打开cmd命令行窗口或power shell窗口】，输入：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo -g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-使用hexo创建你的博客项目，终端输入：\"><a href=\"#2-使用hexo创建你的博客项目，终端输入：\" class=\"headerlink\" title=\"2.使用hexo创建你的博客项目，终端输入：\"></a>2.使用hexo创建你的博客项目，终端输入：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog\t<span class=\"comment\">#这里blog是你要创建的项目根目录</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-安装-hexo-deployer-git\"><a href=\"#3-安装-hexo-deployer-git\" class=\"headerlink\" title=\"3.安装 hexo-deployer-git\"></a>3.安装 hexo-deployer-git</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /../blog\t<span class=\"comment\">#进入你的博客项目根目录</span></span><br><span class=\"line\">$ npm install hexo-deployer-git -save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-创建文章-在你的博客项目根目录\"><a href=\"#4-创建文章-在你的博客项目根目录\" class=\"headerlink\" title=\"4.创建文章(在你的博客项目根目录)\"></a>4.创建文章(在你的博客项目根目录)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"newPost\"</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-生成静态文件\"><a href=\"#5-生成静态文件\" class=\"headerlink\" title=\"5.生成静态文件\"></a>5.生成静态文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-此时，在部署之前，读者可以输入以下命令来在本地电脑运行服务：\"><a href=\"#6-此时，在部署之前，读者可以输入以下命令来在本地电脑运行服务：\" class=\"headerlink\" title=\"6.此时，在部署之前，读者可以输入以下命令来在本地电脑运行服务：\"></a>6.此时，在部署之前，读者可以输入以下命令来在本地电脑运行服务：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\"><span class=\"comment\">#然后浏览器打开localhost:3000就可以预览自己的博客</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-部署前还要配置一下-config-yml文件：\"><a href=\"#7-部署前还要配置一下-config-yml文件：\" class=\"headerlink\" title=\"7.部署前还要配置一下_config.yml文件：\"></a>7.部署前还要配置一下_config.yml文件：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#该文件是前面生成的项目根目录下的_config.yml文件：</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog <span class=\"comment\">#项目根目录</span></span><br><span class=\"line\">$ vim _config.yml</span><br><span class=\"line\"><span class=\"comment\">#打开文件后，添加以下内容：</span></span><br><span class=\"line\">\t<span class=\"comment\"># Deployment</span></span><br><span class=\"line\">\t<span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">\tdeploy:</span><br><span class=\"line\"> \t \t<span class=\"built_in\">type</span>: git</span><br><span class=\"line\"> \t\trepo: git@github.com:wooyee-ldq/wooyee-ldq.github.io.git\t<span class=\"comment\">#这里要填你github项目download那里的ssh地址</span></span><br><span class=\"line\"> \t\tbranch: master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-配置好-config-yml后，部署博客到github\"><a href=\"#8-配置好-config-yml后，部署博客到github\" class=\"headerlink\" title=\"8.配置好_config.yml后，部署博客到github\"></a>8.配置好_config.yml后，部署博客到github</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-浏览器输入地址：你的用户名-github-io-便可以浏览你的博客了，hexo会有个hello-world-的默认文章，那里有一些hexo操作的教程和官网教程地址。\"><a href=\"#9-浏览器输入地址：你的用户名-github-io-便可以浏览你的博客了，hexo会有个hello-world-的默认文章，那里有一些hexo操作的教程和官网教程地址。\" class=\"headerlink\" title=\"9.浏览器输入地址：你的用户名.github.io 便可以浏览你的博客了，hexo会有个hello world 的默认文章，那里有一些hexo操作的教程和官网教程地址。\"></a>9.浏览器输入地址：<strong><em>你的用户名.github.io</em></strong> 便可以浏览你的博客了，hexo会有个hello world 的默认文章，那里有一些hexo操作的教程和官网教程地址。</h4><hr>\n<blockquote>\n<blockquote>\n<p>到此，你创建了一个博客并部署到了github，还不现在就写篇文章发表到博客！！！关于如何编写文章(你的项目根目录/source/_post文件夹下面的md文件)，读者可以参考<a href=\"https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\" target=\"_blank\" rel=\"noopener\">markdown语法编写博客文章</a>！！！</p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用Hexo博客框架搭建自己的个人博客并不需要学会nodejs，html，css等内容。其中nodejs只是作为hexo框架的运行环境。\"><a href=\"#使用Hexo博客框架搭建自己的个人博客并不需要学会nodejs，html，css等内容。其中nodejs只是作为hexo框架的运行环境。\" class=\"headerlink\" title=\"使用Hexo博客框架搭建自己的个人博客并不需要学会nodejs，html，css等内容。其中nodejs只是作为hexo框架的运行环境。\"></a>使用<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a>博客框架搭建自己的个人博客并不需要学会nodejs，html，css等内容。其中nodejs只是作为hexo框架的运行环境。</h2><h2 id=\"下面是各个步骤：\"><a href=\"#下面是各个步骤：\" class=\"headerlink\" title=\"下面是各个步骤：\"></a><em>下面是各个步骤：</em></h2><h2 id=\"一-安装node-js\"><a href=\"#一-安装node-js\" class=\"headerlink\" title=\"一.安装node.js\"></a>一.安装node.js</h2><h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux:\"></a><strong>Linux:</strong></h4><h4 id=\"1-官网下载node-js-tar-xz安装包；这里有我之前下载的安装包，密码-7flj\"><a href=\"#1-官网下载node-js-tar-xz安装包；这里有我之前下载的安装包，密码-7flj\" class=\"headerlink\" title=\"1. 官网下载node.js.tar.xz安装包；这里有我之前下载的安装包，密码: 7flj\"></a>1. 官网下载<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js</a>.tar.xz安装包；这里有我之前下载的<a href=\"https://pan.baidu.com/s/1zj9yjueD9IR9hTg6HttFJg\" target=\"_blank\" rel=\"noopener\">安装包</a>，密码: 7flj</h4><h4 id=\"2-把安装包移动或复制到你想要安装的目录下\"><a href=\"#2-把安装包移动或复制到你想要安装的目录下\" class=\"headerlink\" title=\"2.把安装包移动或复制到你想要安装的目录下\"></a>2.把安装包移动或复制到你想要安装的目录下</h4><h4 id=\"3-Ctrl-Alt-t-或者-鼠标右键-‘打开终端’，下面是在终端的代码：\"><a href=\"#3-Ctrl-Alt-t-或者-鼠标右键-‘打开终端’，下面是在终端的代码：\" class=\"headerlink\" title=\"3.Ctrl+Alt+t 或者 鼠标右键 ‘打开终端’，下面是在终端的代码：\"></a>3.Ctrl+Alt+t 或者 鼠标右键 ‘打开终端’，下面是在终端的代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> 你的安装包所在目录</span><br><span class=\"line\">xz -d nodejs.tar.xz</span><br><span class=\"line\">tar -xvf nodejs.tar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-上面的代码是解压安装包，解压好之后需要配置环境变量：\"><a href=\"#4-上面的代码是解压安装包，解压好之后需要配置环境变量：\" class=\"headerlink\" title=\"4.上面的代码是解压安装包，解压好之后需要配置环境变量：\"></a>4.上面的代码是解压安装包，解压好之后需要配置环境变量：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile   <span class=\"comment\">#打开配置文件，添加以下内容：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#set path for nodejs</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODE_HOME=/nodejs的安装目录</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODE_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-使环境变量生效\"><a href=\"#5-使环境变量生效\" class=\"headerlink\" title=\"5.使环境变量生效\"></a>5.使环境变量生效</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile    <span class=\"comment\">#使得环境变量生效</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-检查nodejs是否安装成功\"><a href=\"#6-检查nodejs是否安装成功\" class=\"headerlink\" title=\"6.检查nodejs是否安装成功\"></a>6.检查nodejs是否安装成功</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#检查nodejs是否安装成功：</span></span><br><span class=\"line\">$ node --version\t<span class=\"comment\">#检查nodejs的版本</span></span><br><span class=\"line\">$ node --<span class=\"built_in\">help</span>\t<span class=\"comment\">#显示nodejs的帮助信息</span></span><br><span class=\"line\">$ npm --version\t<span class=\"comment\">#检查npm的版本</span></span><br><span class=\"line\">$ npm --<span class=\"built_in\">help</span>\t<span class=\"comment\">#显示npm的帮助信息</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Window\"><a href=\"#Window\" class=\"headerlink\" title=\"Window:\"></a><strong>Window:</strong></h4><h4 id=\"1-官网下载node-js的window安装包。\"><a href=\"#1-官网下载node-js的window安装包。\" class=\"headerlink\" title=\"1.官网下载node.js的window安装包。\"></a>1.官网下载<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js</a>的window安装包。</h4><h4 id=\"2-双击nodejs安装包，选择安装位置等，勾选添加到path。\"><a href=\"#2-双击nodejs安装包，选择安装位置等，勾选添加到path。\" class=\"headerlink\" title=\"2.双击nodejs安装包，选择安装位置等，勾选添加到path。\"></a>2.双击nodejs安装包，选择安装位置等，勾选添加到path。</h4><h4 id=\"3-window的安装比较简单，这里不在详细叙述。\"><a href=\"#3-window的安装比较简单，这里不在详细叙述。\" class=\"headerlink\" title=\"3.window的安装比较简单，这里不在详细叙述。\"></a>3.window的安装比较简单，这里不在详细叙述。</h4><h4 id=\"4-安装完成后，在运行窗口（win-R-打开）输入-cmd-，打开命令行窗口，输入命令检查nodejs的安装（直接在开始菜单右键打开power-shell也可以）：\"><a href=\"#4-安装完成后，在运行窗口（win-R-打开）输入-cmd-，打开命令行窗口，输入命令检查nodejs的安装（直接在开始菜单右键打开power-shell也可以）：\" class=\"headerlink\" title=\"4.安装完成后，在运行窗口（win+R 打开）输入 cmd ，打开命令行窗口，输入命令检查nodejs的安装（直接在开始菜单右键打开power shell也可以）：\"></a>4.安装完成后，在运行窗口（win+R 打开）输入 cmd ，打开命令行窗口，输入命令检查nodejs的安装（直接在开始菜单右键打开power shell也可以）：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node --version\t<span class=\"comment\">#检查nodejs的版本</span></span><br><span class=\"line\">&gt; npm --version\t\t<span class=\"comment\">#检查npm的版本</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二-注册Github和创建存储库\"><a href=\"#二-注册Github和创建存储库\" class=\"headerlink\" title=\"二.注册Github和创建存储库\"></a>二.注册Github和创建存储库</h2><h4 id=\"1-Github官网注册账户，如果已注册自行忽略。\"><a href=\"#1-Github官网注册账户，如果已注册自行忽略。\" class=\"headerlink\" title=\"1.Github官网注册账户，如果已注册自行忽略。\"></a>1.<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">Github官网</a>注册账户，如果已注册自行忽略。</h4><h4 id=\"2-登录账户，创建一个：-你的用户名-github-io-的存储库。\"><a href=\"#2-登录账户，创建一个：-你的用户名-github-io-的存储库。\" class=\"headerlink\" title=\"2.登录账户，创建一个： 你的用户名.github.io 的存储库。\"></a>2.登录账户，创建一个： <strong><em>你的用户名.github.io</em></strong> 的存储库。</h4><img src=\"/blog/使用hexo搭建个人博客并部署到github/github1.png\">\n\n<img src=\"/blog/使用hexo搭建个人博客并部署到github/github2.png\">\n\n<h2 id=\"三-安装Git和配置Github\"><a href=\"#三-安装Git和配置Github\" class=\"headerlink\" title=\"三.安装Git和配置Github\"></a>三.安装Git和配置Github</h2><h4 id=\"Linux-（这里是官方Linux各种版本的安装，我这里是基于ubuntu）\"><a href=\"#Linux-（这里是官方Linux各种版本的安装，我这里是基于ubuntu）\" class=\"headerlink\" title=\"Linux:（这里是官方Linux各种版本的安装，我这里是基于ubuntu）\"></a><strong>Linux:</strong>（这里是官方Linux各种版本的<a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">安装</a>，我这里是基于ubuntu）</h4><h4 id=\"1-打开终端，输入：\"><a href=\"#1-打开终端，输入：\" class=\"headerlink\" title=\"1.打开终端，输入：\"></a>1.打开终端，输入：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-配置git的个人信息和配置SSH\"><a href=\"#2-配置git的个人信息和配置SSH\" class=\"headerlink\" title=\"2.配置git的个人信息和配置SSH\"></a>2.配置git的个人信息和配置SSH</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"你的github用户名\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"你注册的邮箱地址\"</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"你注册的邮箱地址\"</span>\t<span class=\"comment\">#生成SSH</span></span><br><span class=\"line\">$ vim ~/.ssh/id_rsa.pub\t\t<span class=\"comment\">#打开生成的文件，复制里面的所有内容</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"打开github-点击右上⻆自己的头像-点击settings-再点击SSH-之后添加new-ssh-key-最后把复制的信息都粘贴进去-title可以写，然后测试是否成功配置：\"><a href=\"#打开github-点击右上⻆自己的头像-点击settings-再点击SSH-之后添加new-ssh-key-最后把复制的信息都粘贴进去-title可以写，然后测试是否成功配置：\" class=\"headerlink\" title=\"打开github,点击右上⻆自己的头像,点击settings,再点击SSH,之后添加new ssh key,最后把复制的信息都粘贴进去,title可以写，然后测试是否成功配置：\"></a>打开github,点击右上⻆自己的头像,点击settings,再点击SSH,之后添加new ssh key,最后把复制的信息都粘贴进去,title可以写，然后测试是否成功配置：</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\"><span class=\"comment\">#显示下面内容就是成功了</span></span><br><span class=\"line\">Hi! You ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window:\"></a><strong>window:</strong></h4><h4 id=\"1-直接官网下载安装包，双击运行安装。\"><a href=\"#1-直接官网下载安装包，双击运行安装。\" class=\"headerlink\" title=\"1.直接官网下载安装包，双击运行安装。\"></a>1.直接官网下载<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">安装包</a>，双击运行安装。</h4><h4 id=\"2-打开Git-Bash命令窗口\"><a href=\"#2-打开Git-Bash命令窗口\" class=\"headerlink\" title=\"2.打开Git Bash命令窗口\"></a>2.打开Git Bash命令窗口</h4><h4 id=\"3-配置git的方法和上面linux的相似，建议读者可以参考https-blog-csdn-net-robertzhouxh-article-details-9887063\"><a href=\"#3-配置git的方法和上面linux的相似，建议读者可以参考https-blog-csdn-net-robertzhouxh-article-details-9887063\" class=\"headerlink\" title=\"3.配置git的方法和上面linux的相似，建议读者可以参考https://blog.csdn.net/robertzhouxh/article/details/9887063\"></a>3.配置git的方法和上面linux的相似，建议读者可以参考<a href=\"https://blog.csdn.net/robertzhouxh/article/details/9887063\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/robertzhouxh/article/details/9887063</a></h4><h2 id=\"四-安装Hexo和使用Hexo创建博客项目\"><a href=\"#四-安装Hexo和使用Hexo创建博客项目\" class=\"headerlink\" title=\"四.安装Hexo和使用Hexo创建博客项目\"></a>四.安装Hexo和使用Hexo创建博客项目</h2><h4 id=\"Linux-amp-Window\"><a href=\"#Linux-amp-Window\" class=\"headerlink\" title=\"Linux&amp;Window:\"></a><strong>Linux&amp;Window:</strong></h4><h4 id=\"1-安装hexo，打开终端【window打开cmd命令行窗口或power-shell窗口】，输入：\"><a href=\"#1-安装hexo，打开终端【window打开cmd命令行窗口或power-shell窗口】，输入：\" class=\"headerlink\" title=\"1.安装hexo，打开终端【window打开cmd命令行窗口或power shell窗口】，输入：\"></a>1.安装hexo，打开终端【window打开cmd命令行窗口或power shell窗口】，输入：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo -g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-使用hexo创建你的博客项目，终端输入：\"><a href=\"#2-使用hexo创建你的博客项目，终端输入：\" class=\"headerlink\" title=\"2.使用hexo创建你的博客项目，终端输入：\"></a>2.使用hexo创建你的博客项目，终端输入：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog\t<span class=\"comment\">#这里blog是你要创建的项目根目录</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-安装-hexo-deployer-git\"><a href=\"#3-安装-hexo-deployer-git\" class=\"headerlink\" title=\"3.安装 hexo-deployer-git\"></a>3.安装 hexo-deployer-git</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /../blog\t<span class=\"comment\">#进入你的博客项目根目录</span></span><br><span class=\"line\">$ npm install hexo-deployer-git -save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-创建文章-在你的博客项目根目录\"><a href=\"#4-创建文章-在你的博客项目根目录\" class=\"headerlink\" title=\"4.创建文章(在你的博客项目根目录)\"></a>4.创建文章(在你的博客项目根目录)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"newPost\"</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-生成静态文件\"><a href=\"#5-生成静态文件\" class=\"headerlink\" title=\"5.生成静态文件\"></a>5.生成静态文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-此时，在部署之前，读者可以输入以下命令来在本地电脑运行服务：\"><a href=\"#6-此时，在部署之前，读者可以输入以下命令来在本地电脑运行服务：\" class=\"headerlink\" title=\"6.此时，在部署之前，读者可以输入以下命令来在本地电脑运行服务：\"></a>6.此时，在部署之前，读者可以输入以下命令来在本地电脑运行服务：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\"><span class=\"comment\">#然后浏览器打开localhost:3000就可以预览自己的博客</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-部署前还要配置一下-config-yml文件：\"><a href=\"#7-部署前还要配置一下-config-yml文件：\" class=\"headerlink\" title=\"7.部署前还要配置一下_config.yml文件：\"></a>7.部署前还要配置一下_config.yml文件：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#该文件是前面生成的项目根目录下的_config.yml文件：</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog <span class=\"comment\">#项目根目录</span></span><br><span class=\"line\">$ vim _config.yml</span><br><span class=\"line\"><span class=\"comment\">#打开文件后，添加以下内容：</span></span><br><span class=\"line\">\t<span class=\"comment\"># Deployment</span></span><br><span class=\"line\">\t<span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">\tdeploy:</span><br><span class=\"line\"> \t \t<span class=\"built_in\">type</span>: git</span><br><span class=\"line\"> \t\trepo: git@github.com:wooyee-ldq/wooyee-ldq.github.io.git\t<span class=\"comment\">#这里要填你github项目download那里的ssh地址</span></span><br><span class=\"line\"> \t\tbranch: master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-配置好-config-yml后，部署博客到github\"><a href=\"#8-配置好-config-yml后，部署博客到github\" class=\"headerlink\" title=\"8.配置好_config.yml后，部署博客到github\"></a>8.配置好_config.yml后，部署博客到github</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-浏览器输入地址：你的用户名-github-io-便可以浏览你的博客了，hexo会有个hello-world-的默认文章，那里有一些hexo操作的教程和官网教程地址。\"><a href=\"#9-浏览器输入地址：你的用户名-github-io-便可以浏览你的博客了，hexo会有个hello-world-的默认文章，那里有一些hexo操作的教程和官网教程地址。\" class=\"headerlink\" title=\"9.浏览器输入地址：你的用户名.github.io 便可以浏览你的博客了，hexo会有个hello world 的默认文章，那里有一些hexo操作的教程和官网教程地址。\"></a>9.浏览器输入地址：<strong><em>你的用户名.github.io</em></strong> 便可以浏览你的博客了，hexo会有个hello world 的默认文章，那里有一些hexo操作的教程和官网教程地址。</h4><hr>\n<blockquote>\n<blockquote>\n<p>到此，你创建了一个博客并部署到了github，还不现在就写篇文章发表到博客！！！关于如何编写文章(你的项目根目录/source/_post文件夹下面的md文件)，读者可以参考<a href=\"https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\" target=\"_blank\" rel=\"noopener\">markdown语法编写博客文章</a>！！！</p>\n</blockquote>\n</blockquote>\n"},{"title":"深拷贝和浅拷贝","date":"2019-09-04T11:40:14.000Z","_content":"\n## python之深拷贝和浅拷贝\n\n#### 1.变量名赋值的过程是一个 “指向” 过程\n\n#### 2. 先 ` import copy ` ，通过  `a = copy.copy(b)`  方法拷贝，就是浅拷贝\n\n#### 3.通过  `a = copy.deepcopy(b)  `方法拷贝，就是深拷贝\n\n#### 4. 切片操作、字典自带的`copy()`方法和函数实参传给形参的过程，都是浅拷贝\n\n---\n\n> ### 那么，什么是深拷贝，什么是浅拷贝呢？\n\n#### 深拷贝：递归拷贝所有引用指向的数据和数据里面的引用指向的数据，该方法在拷贝时，如果拷贝的内容只有不可变数据，那就和赋值效果一样，但是如果包含有可变数据类型时，就会递归拷贝所有引用指向的数据和数据里面的引用指向的数据\n\n---\n\n#### 浅拷贝:只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，该方法在拷贝不可变数据类型【最外层】时都是只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，和赋值效果一样, 切片、字典自带的`copy()`方法和函数实参传递到形参的过程 都是浅拷贝\n\n---\n\n#### 代码：\n\n```python\nimport copy\n\na = [1, 2]\na1 = [3, 4]\naa = [a, a1]\nb = aa  # 普通赋值，b 指向 a\nc = copy.deepcopy(aa) \nd = copy.copy(aa)\na.append(3)  #改变a的值\nprint(aa)\nprint(b)\nprint(c)\nprint(d)\n```\n\n#### 运行结果：\n\n```bash\n[[1, 2, 3], [3, 4]]  # aa的值也改变了\n[[1, 2, 3], [3, 4]]  # b的值也跟着和aa一样\n[[1, 2], [3, 4]]  # 深拷贝的并没有改变\n[[1, 2, 3], [3, 4]]  # 浅拷贝的改变了\n```\n\n","source":"_posts/深拷贝和浅拷贝.md","raw":"---\ntitle: 深拷贝和浅拷贝\ndate: 2019-09-04 19:40:14\ntags: python\n---\n\n## python之深拷贝和浅拷贝\n\n#### 1.变量名赋值的过程是一个 “指向” 过程\n\n#### 2. 先 ` import copy ` ，通过  `a = copy.copy(b)`  方法拷贝，就是浅拷贝\n\n#### 3.通过  `a = copy.deepcopy(b)  `方法拷贝，就是深拷贝\n\n#### 4. 切片操作、字典自带的`copy()`方法和函数实参传给形参的过程，都是浅拷贝\n\n---\n\n> ### 那么，什么是深拷贝，什么是浅拷贝呢？\n\n#### 深拷贝：递归拷贝所有引用指向的数据和数据里面的引用指向的数据，该方法在拷贝时，如果拷贝的内容只有不可变数据，那就和赋值效果一样，但是如果包含有可变数据类型时，就会递归拷贝所有引用指向的数据和数据里面的引用指向的数据\n\n---\n\n#### 浅拷贝:只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，该方法在拷贝不可变数据类型【最外层】时都是只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，和赋值效果一样, 切片、字典自带的`copy()`方法和函数实参传递到形参的过程 都是浅拷贝\n\n---\n\n#### 代码：\n\n```python\nimport copy\n\na = [1, 2]\na1 = [3, 4]\naa = [a, a1]\nb = aa  # 普通赋值，b 指向 a\nc = copy.deepcopy(aa) \nd = copy.copy(aa)\na.append(3)  #改变a的值\nprint(aa)\nprint(b)\nprint(c)\nprint(d)\n```\n\n#### 运行结果：\n\n```bash\n[[1, 2, 3], [3, 4]]  # aa的值也改变了\n[[1, 2, 3], [3, 4]]  # b的值也跟着和aa一样\n[[1, 2], [3, 4]]  # 深拷贝的并没有改变\n[[1, 2, 3], [3, 4]]  # 浅拷贝的改变了\n```\n\n","slug":"深拷贝和浅拷贝","published":1,"updated":"2019-10-12T09:55:27.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7bi000pggvk82o8yxuz","content":"<h2 id=\"python之深拷贝和浅拷贝\"><a href=\"#python之深拷贝和浅拷贝\" class=\"headerlink\" title=\"python之深拷贝和浅拷贝\"></a>python之深拷贝和浅拷贝</h2><h4 id=\"1-变量名赋值的过程是一个-“指向”-过程\"><a href=\"#1-变量名赋值的过程是一个-“指向”-过程\" class=\"headerlink\" title=\"1.变量名赋值的过程是一个 “指向” 过程\"></a>1.变量名赋值的过程是一个 “指向” 过程</h4><h4 id=\"2-先-import-copy-，通过-a-copy-copy-b-方法拷贝，就是浅拷贝\"><a href=\"#2-先-import-copy-，通过-a-copy-copy-b-方法拷贝，就是浅拷贝\" class=\"headerlink\" title=\"2. 先 import copy ，通过  a = copy.copy(b)  方法拷贝，就是浅拷贝\"></a>2. 先 <code>import copy</code> ，通过  <code>a = copy.copy(b)</code>  方法拷贝，就是浅拷贝</h4><h4 id=\"3-通过-a-copy-deepcopy-b-方法拷贝，就是深拷贝\"><a href=\"#3-通过-a-copy-deepcopy-b-方法拷贝，就是深拷贝\" class=\"headerlink\" title=\"3.通过  a = copy.deepcopy(b)方法拷贝，就是深拷贝\"></a>3.通过  <code>a = copy.deepcopy(b)</code>方法拷贝，就是深拷贝</h4><h4 id=\"4-切片操作、字典自带的copy-方法和函数实参传给形参的过程，都是浅拷贝\"><a href=\"#4-切片操作、字典自带的copy-方法和函数实参传给形参的过程，都是浅拷贝\" class=\"headerlink\" title=\"4. 切片操作、字典自带的copy()方法和函数实参传给形参的过程，都是浅拷贝\"></a>4. 切片操作、字典自带的<code>copy()</code>方法和函数实参传给形参的过程，都是浅拷贝</h4><hr>\n<blockquote>\n<h3 id=\"那么，什么是深拷贝，什么是浅拷贝呢？\"><a href=\"#那么，什么是深拷贝，什么是浅拷贝呢？\" class=\"headerlink\" title=\"那么，什么是深拷贝，什么是浅拷贝呢？\"></a>那么，什么是深拷贝，什么是浅拷贝呢？</h3></blockquote>\n<h4 id=\"深拷贝：递归拷贝所有引用指向的数据和数据里面的引用指向的数据，该方法在拷贝时，如果拷贝的内容只有不可变数据，那就和赋值效果一样，但是如果包含有可变数据类型时，就会递归拷贝所有引用指向的数据和数据里面的引用指向的数据\"><a href=\"#深拷贝：递归拷贝所有引用指向的数据和数据里面的引用指向的数据，该方法在拷贝时，如果拷贝的内容只有不可变数据，那就和赋值效果一样，但是如果包含有可变数据类型时，就会递归拷贝所有引用指向的数据和数据里面的引用指向的数据\" class=\"headerlink\" title=\"深拷贝：递归拷贝所有引用指向的数据和数据里面的引用指向的数据，该方法在拷贝时，如果拷贝的内容只有不可变数据，那就和赋值效果一样，但是如果包含有可变数据类型时，就会递归拷贝所有引用指向的数据和数据里面的引用指向的数据\"></a>深拷贝：递归拷贝所有引用指向的数据和数据里面的引用指向的数据，该方法在拷贝时，如果拷贝的内容只有不可变数据，那就和赋值效果一样，但是如果包含有可变数据类型时，就会递归拷贝所有引用指向的数据和数据里面的引用指向的数据</h4><hr>\n<h4 id=\"浅拷贝-只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，该方法在拷贝不可变数据类型【最外层】时都是只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，和赋值效果一样-切片、字典自带的copy-方法和函数实参传递到形参的过程-都是浅拷贝\"><a href=\"#浅拷贝-只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，该方法在拷贝不可变数据类型【最外层】时都是只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，和赋值效果一样-切片、字典自带的copy-方法和函数实参传递到形参的过程-都是浅拷贝\" class=\"headerlink\" title=\"浅拷贝:只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，该方法在拷贝不可变数据类型【最外层】时都是只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，和赋值效果一样, 切片、字典自带的copy()方法和函数实参传递到形参的过程 都是浅拷贝\"></a>浅拷贝:只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，该方法在拷贝不可变数据类型【最外层】时都是只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，和赋值效果一样, 切片、字典自带的<code>copy()</code>方法和函数实参传递到形参的过程 都是浅拷贝</h4><hr>\n<h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">a1 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">aa = [a, a1]</span><br><span class=\"line\">b = aa  <span class=\"comment\"># 普通赋值，b 指向 a</span></span><br><span class=\"line\">c = copy.deepcopy(aa) </span><br><span class=\"line\">d = copy.copy(aa)</span><br><span class=\"line\">a.append(<span class=\"number\">3</span>)  <span class=\"comment\">#改变a的值</span></span><br><span class=\"line\">print(aa)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(c)</span><br><span class=\"line\">print(d)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[1, 2, 3], [3, 4]]  <span class=\"comment\"># aa的值也改变了</span></span><br><span class=\"line\">[[1, 2, 3], [3, 4]]  <span class=\"comment\"># b的值也跟着和aa一样</span></span><br><span class=\"line\">[[1, 2], [3, 4]]  <span class=\"comment\"># 深拷贝的并没有改变</span></span><br><span class=\"line\">[[1, 2, 3], [3, 4]]  <span class=\"comment\"># 浅拷贝的改变了</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python之深拷贝和浅拷贝\"><a href=\"#python之深拷贝和浅拷贝\" class=\"headerlink\" title=\"python之深拷贝和浅拷贝\"></a>python之深拷贝和浅拷贝</h2><h4 id=\"1-变量名赋值的过程是一个-“指向”-过程\"><a href=\"#1-变量名赋值的过程是一个-“指向”-过程\" class=\"headerlink\" title=\"1.变量名赋值的过程是一个 “指向” 过程\"></a>1.变量名赋值的过程是一个 “指向” 过程</h4><h4 id=\"2-先-import-copy-，通过-a-copy-copy-b-方法拷贝，就是浅拷贝\"><a href=\"#2-先-import-copy-，通过-a-copy-copy-b-方法拷贝，就是浅拷贝\" class=\"headerlink\" title=\"2. 先 import copy ，通过  a = copy.copy(b)  方法拷贝，就是浅拷贝\"></a>2. 先 <code>import copy</code> ，通过  <code>a = copy.copy(b)</code>  方法拷贝，就是浅拷贝</h4><h4 id=\"3-通过-a-copy-deepcopy-b-方法拷贝，就是深拷贝\"><a href=\"#3-通过-a-copy-deepcopy-b-方法拷贝，就是深拷贝\" class=\"headerlink\" title=\"3.通过  a = copy.deepcopy(b)方法拷贝，就是深拷贝\"></a>3.通过  <code>a = copy.deepcopy(b)</code>方法拷贝，就是深拷贝</h4><h4 id=\"4-切片操作、字典自带的copy-方法和函数实参传给形参的过程，都是浅拷贝\"><a href=\"#4-切片操作、字典自带的copy-方法和函数实参传给形参的过程，都是浅拷贝\" class=\"headerlink\" title=\"4. 切片操作、字典自带的copy()方法和函数实参传给形参的过程，都是浅拷贝\"></a>4. 切片操作、字典自带的<code>copy()</code>方法和函数实参传给形参的过程，都是浅拷贝</h4><hr>\n<blockquote>\n<h3 id=\"那么，什么是深拷贝，什么是浅拷贝呢？\"><a href=\"#那么，什么是深拷贝，什么是浅拷贝呢？\" class=\"headerlink\" title=\"那么，什么是深拷贝，什么是浅拷贝呢？\"></a>那么，什么是深拷贝，什么是浅拷贝呢？</h3></blockquote>\n<h4 id=\"深拷贝：递归拷贝所有引用指向的数据和数据里面的引用指向的数据，该方法在拷贝时，如果拷贝的内容只有不可变数据，那就和赋值效果一样，但是如果包含有可变数据类型时，就会递归拷贝所有引用指向的数据和数据里面的引用指向的数据\"><a href=\"#深拷贝：递归拷贝所有引用指向的数据和数据里面的引用指向的数据，该方法在拷贝时，如果拷贝的内容只有不可变数据，那就和赋值效果一样，但是如果包含有可变数据类型时，就会递归拷贝所有引用指向的数据和数据里面的引用指向的数据\" class=\"headerlink\" title=\"深拷贝：递归拷贝所有引用指向的数据和数据里面的引用指向的数据，该方法在拷贝时，如果拷贝的内容只有不可变数据，那就和赋值效果一样，但是如果包含有可变数据类型时，就会递归拷贝所有引用指向的数据和数据里面的引用指向的数据\"></a>深拷贝：递归拷贝所有引用指向的数据和数据里面的引用指向的数据，该方法在拷贝时，如果拷贝的内容只有不可变数据，那就和赋值效果一样，但是如果包含有可变数据类型时，就会递归拷贝所有引用指向的数据和数据里面的引用指向的数据</h4><hr>\n<h4 id=\"浅拷贝-只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，该方法在拷贝不可变数据类型【最外层】时都是只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，和赋值效果一样-切片、字典自带的copy-方法和函数实参传递到形参的过程-都是浅拷贝\"><a href=\"#浅拷贝-只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，该方法在拷贝不可变数据类型【最外层】时都是只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，和赋值效果一样-切片、字典自带的copy-方法和函数实参传递到形参的过程-都是浅拷贝\" class=\"headerlink\" title=\"浅拷贝:只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，该方法在拷贝不可变数据类型【最外层】时都是只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，和赋值效果一样, 切片、字典自带的copy()方法和函数实参传递到形参的过程 都是浅拷贝\"></a>浅拷贝:只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，该方法在拷贝不可变数据类型【最外层】时都是只拷贝引用指向的数据，但是不再拷贝数据里面的引用指向的数据，和赋值效果一样, 切片、字典自带的<code>copy()</code>方法和函数实参传递到形参的过程 都是浅拷贝</h4><hr>\n<h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">a1 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">aa = [a, a1]</span><br><span class=\"line\">b = aa  <span class=\"comment\"># 普通赋值，b 指向 a</span></span><br><span class=\"line\">c = copy.deepcopy(aa) </span><br><span class=\"line\">d = copy.copy(aa)</span><br><span class=\"line\">a.append(<span class=\"number\">3</span>)  <span class=\"comment\">#改变a的值</span></span><br><span class=\"line\">print(aa)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\">print(c)</span><br><span class=\"line\">print(d)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[1, 2, 3], [3, 4]]  <span class=\"comment\"># aa的值也改变了</span></span><br><span class=\"line\">[[1, 2, 3], [3, 4]]  <span class=\"comment\"># b的值也跟着和aa一样</span></span><br><span class=\"line\">[[1, 2], [3, 4]]  <span class=\"comment\"># 深拷贝的并没有改变</span></span><br><span class=\"line\">[[1, 2, 3], [3, 4]]  <span class=\"comment\"># 浅拷贝的改变了</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"计算机网络第一章(概述)","date":"2020-11-02T14:18:19.000Z","_content":"\n## 计算机网络第一章：概述\n\n#### 1.1计算机网络在信息时代中的作用\n\n&emsp;&emsp;我们知道，21世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。要实现信息化就必须依靠网络。其中有大家熟悉的三大网络，即电信网络、有线电视网络和计算机网路。按照最初的功能分工，电信网络向用户提供电话、电报及传真等服务；有线电视网络向用户传送各种电视节目；计算机网络则使用户能够在计算机之间传送数据文件。这三种网络都在信息化过程中起到很大的作用，但是其中发展最快并起到核心作用的是计算机网路。\n\n&emsp;&emsp;随着技术的发展，电信网络和有线电视网络都融入了现代计算机网络的技术，拓大了原来的服务范围，而计算机网络也能够提供电话通信、视频通信以及传送视频节目的服务。以一种网络提供三种的服务，这是“三网融合”的理论。\n\n&emsp;&emsp;20世纪90年代以后，以Internet为代表的计算机网络得到飞速发展，从最初仅为美国人提供免费教育科研网络发展到全球使用的商业网络，成为了全球最大和最重要的计算机网络。Internet的译名主要有2个，一个是因特网，这个译名是全国科学技术名词审定委员会推荐的，该译名较为准确但是长期未得推广。另外一个译名是互联网，这是目前流行最广、事实上的标准译名。Internet是有数量极大的各种计算机网络互联起来的，采用互联网译名能够体现出Internet的主要特征。\n\n&emsp;&emsp;互联网具有两个重要特点，即**连通信**和**共享**。\n\n---\n\n#### 1.2互联网概述\n\n&emsp;&emsp;起源于美国的互联网现已成为覆盖全球的最大计算机网络。\n\n&emsp;&emsp;计算机网络（简称为网络）由若干**结点（node)**和连接这些结点的**链路（link）**组成。网络中的结点可以是计算机、集线器、交换机或路由器等。多个计算机通过结点（一般是集线器或者交换机）连接在一起成为一个计算机网络，而网络之间还可以通过路由器连接在一起，就构成了一个覆盖范围更大的计算机网络，这样的计算机网络就称之为互联网（internetwork或internet），因此互联网就是网络的网络。**网络把许多计算机连接在一起，而互联网把多个网络通过路由器连接在一起。其中与互联网相连的计算机称为*主机*。**\n\n&emsp;&emsp;互联网基础结构发展的三个阶段。互联网基础结构发展经历了三个阶段，第一个阶段是从单个网络ARPANET向互联网发展的过程。1969年美国国防部创建的第一个分组交换网ARPANET最初只是一个单个的分组交换网（并不是一个互连的网络）。1983年TCP/IP协议成为ARPANET上的标准协议，使得所有使用TCP/IP协议的计算机都能利用互连网相互通信，因此把1983年作为互连网诞生时间。\n\n&emsp;&emsp;以小写i开头的**internet（互连网）**是一个通用名词，它泛指由多个计算机网络互连而成的计算机网路，在这些网络之间的通信协议可以任意选择，不一定是TCP/IP协议。而以大写开头的**Internet（互联网）**是一个专有名词，它指的是当今全球最大的、开放的、由众多网络互相连接而成的特定互连网，才用的是TCP/IP协议族作为通信的规则，且前身是美国的ARPANET。\n\n&emsp;&emsp;第二阶段的特点就是建成了**三级结构的互联网**。由美国国家科学基金会NSF围绕六个大型计算机中心建设计算机网络，即NFSNET。这是一个三级计算机网络，分为**主干网、地区网和校园网（或企业网）**\n\n&emsp;&emsp;第三阶段的特点是逐渐形成了**多层次ISP结构的互联网。**后来美国政府支持的NSFNET逐渐被商用的互联网主干网替代，政府便不再负责互联网运营。这样就出现了：**互联网服务提供者ISP（Internet Service Provider）。**一般ISP就是一个进行商业活动的公司，所以一般把ISP称为互联网服务提供商。像我们国家的三大ISP就是：中国电信、中国移动和中国联通。\n\n&emsp;&emsp;随着互联网上的数据流量急剧增长，为了更好地利用网络资源，互联网交换点IXP应运而生。互联网交换点主要作用就是允许2个网络直接相连并交换分组，不需要通过第三个网络来转发分组。IXP常采用工作在数据链路层的网络交换机，这些交换机都用局域网互连起来。互联网的迅猛发展始于20世纪90年代。由欧洲原子核研究组织CERN开发的**万维网（World Wide Web）**被广泛在互联网上使用，大大方便了非网络专业的人员使用网络，成为互联网指数级增长的主要驱动力。\n\n&emsp;&emsp;互联网的标准化工作对互联网的发展起到了非常重要的作用。1992年互联网不再归美国政府管辖，因此成立了一个国际性组织叫**互联网协会（Internet Society，简称ISOC）**。ISOC下面有一个技术组织叫**互联网体系结构委员会IAB**负责管理互联网有关协议的开发。IAB下面又设置有2个工程部，一个是**互联网工程部IETF**，另一个是**互联网研究部IRTF**。 \n\n&emsp;&emsp;制定互联网正式的标准要经过下面三个阶段：1、互联网草稿，有效期只有6个月。2、建议标准，这个阶段开始成为RFC。RFC（Request For Comments），意思是“请求评论”。3、互联网标准。\n\n&emsp;&emsp;互联网的组成，可以划分为2大块：1、**边缘部分**，由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传递数据、音频或视频）和资源共享。2、**核心部分**，由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。\n\n&emsp;&emsp;我们常说的主机A和主机B进行通信，实际上是指主机A的某个进程和主机B上的某个进程进行通信，这种比较严谨的说法通常可以简称为**计算机之间通信**。\n\n&emsp;&emsp;在网络的边缘部分的主机（也称之为端系统end system）之间通信通常分为两大类：1、客户-服务器方式（C/S方式，注意这里的C/S方式和软件开发中的服务方式不一样）和对等方式（P2P方式）。\n\n&emsp;&emsp;**电路交换**，必须经过1、“建立连接（占用通信资源）”；2、通话（一直占用通信资源）；3、释放连接（归还通信资源）三个步骤的交换方式。使用电路交换来传送计算机数据时，线路的传输效率很低。\n\n&emsp;&emsp;**分组交换，采用存储转发技术**。其中分组指的时把要发送的报文分组后再进行传输。位于网络边缘的主机和网络核心的路由器都是计算机，但是它们的作用却不一样。主机是为用户进行信息处理的，并且可以和其它主机通过网络进行信息交换。路由器则是用来转发分组的，即进行分组交换的。路由器收到一个分组，先暂时存储一下，检查分组的首部信息，查找转发表，按照首部的目的地址，找到合适的端口把分组转发出去。各路由器必须经常彼此交换掌握的路由信息，以便创建和动态维护路由器中的转发表，使得转发表能够在整个网络拓扑发生变化时及时更新。\n\n\n\n\n\n","source":"_posts/计算机网络第一章-概述.md","raw":"---\ntitle: 计算机网络第一章(概述)\ndate: 2020-11-02 22:18:19\ntags: 计算机网络\n---\n\n## 计算机网络第一章：概述\n\n#### 1.1计算机网络在信息时代中的作用\n\n&emsp;&emsp;我们知道，21世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。要实现信息化就必须依靠网络。其中有大家熟悉的三大网络，即电信网络、有线电视网络和计算机网路。按照最初的功能分工，电信网络向用户提供电话、电报及传真等服务；有线电视网络向用户传送各种电视节目；计算机网络则使用户能够在计算机之间传送数据文件。这三种网络都在信息化过程中起到很大的作用，但是其中发展最快并起到核心作用的是计算机网路。\n\n&emsp;&emsp;随着技术的发展，电信网络和有线电视网络都融入了现代计算机网络的技术，拓大了原来的服务范围，而计算机网络也能够提供电话通信、视频通信以及传送视频节目的服务。以一种网络提供三种的服务，这是“三网融合”的理论。\n\n&emsp;&emsp;20世纪90年代以后，以Internet为代表的计算机网络得到飞速发展，从最初仅为美国人提供免费教育科研网络发展到全球使用的商业网络，成为了全球最大和最重要的计算机网络。Internet的译名主要有2个，一个是因特网，这个译名是全国科学技术名词审定委员会推荐的，该译名较为准确但是长期未得推广。另外一个译名是互联网，这是目前流行最广、事实上的标准译名。Internet是有数量极大的各种计算机网络互联起来的，采用互联网译名能够体现出Internet的主要特征。\n\n&emsp;&emsp;互联网具有两个重要特点，即**连通信**和**共享**。\n\n---\n\n#### 1.2互联网概述\n\n&emsp;&emsp;起源于美国的互联网现已成为覆盖全球的最大计算机网络。\n\n&emsp;&emsp;计算机网络（简称为网络）由若干**结点（node)**和连接这些结点的**链路（link）**组成。网络中的结点可以是计算机、集线器、交换机或路由器等。多个计算机通过结点（一般是集线器或者交换机）连接在一起成为一个计算机网络，而网络之间还可以通过路由器连接在一起，就构成了一个覆盖范围更大的计算机网络，这样的计算机网络就称之为互联网（internetwork或internet），因此互联网就是网络的网络。**网络把许多计算机连接在一起，而互联网把多个网络通过路由器连接在一起。其中与互联网相连的计算机称为*主机*。**\n\n&emsp;&emsp;互联网基础结构发展的三个阶段。互联网基础结构发展经历了三个阶段，第一个阶段是从单个网络ARPANET向互联网发展的过程。1969年美国国防部创建的第一个分组交换网ARPANET最初只是一个单个的分组交换网（并不是一个互连的网络）。1983年TCP/IP协议成为ARPANET上的标准协议，使得所有使用TCP/IP协议的计算机都能利用互连网相互通信，因此把1983年作为互连网诞生时间。\n\n&emsp;&emsp;以小写i开头的**internet（互连网）**是一个通用名词，它泛指由多个计算机网络互连而成的计算机网路，在这些网络之间的通信协议可以任意选择，不一定是TCP/IP协议。而以大写开头的**Internet（互联网）**是一个专有名词，它指的是当今全球最大的、开放的、由众多网络互相连接而成的特定互连网，才用的是TCP/IP协议族作为通信的规则，且前身是美国的ARPANET。\n\n&emsp;&emsp;第二阶段的特点就是建成了**三级结构的互联网**。由美国国家科学基金会NSF围绕六个大型计算机中心建设计算机网络，即NFSNET。这是一个三级计算机网络，分为**主干网、地区网和校园网（或企业网）**\n\n&emsp;&emsp;第三阶段的特点是逐渐形成了**多层次ISP结构的互联网。**后来美国政府支持的NSFNET逐渐被商用的互联网主干网替代，政府便不再负责互联网运营。这样就出现了：**互联网服务提供者ISP（Internet Service Provider）。**一般ISP就是一个进行商业活动的公司，所以一般把ISP称为互联网服务提供商。像我们国家的三大ISP就是：中国电信、中国移动和中国联通。\n\n&emsp;&emsp;随着互联网上的数据流量急剧增长，为了更好地利用网络资源，互联网交换点IXP应运而生。互联网交换点主要作用就是允许2个网络直接相连并交换分组，不需要通过第三个网络来转发分组。IXP常采用工作在数据链路层的网络交换机，这些交换机都用局域网互连起来。互联网的迅猛发展始于20世纪90年代。由欧洲原子核研究组织CERN开发的**万维网（World Wide Web）**被广泛在互联网上使用，大大方便了非网络专业的人员使用网络，成为互联网指数级增长的主要驱动力。\n\n&emsp;&emsp;互联网的标准化工作对互联网的发展起到了非常重要的作用。1992年互联网不再归美国政府管辖，因此成立了一个国际性组织叫**互联网协会（Internet Society，简称ISOC）**。ISOC下面有一个技术组织叫**互联网体系结构委员会IAB**负责管理互联网有关协议的开发。IAB下面又设置有2个工程部，一个是**互联网工程部IETF**，另一个是**互联网研究部IRTF**。 \n\n&emsp;&emsp;制定互联网正式的标准要经过下面三个阶段：1、互联网草稿，有效期只有6个月。2、建议标准，这个阶段开始成为RFC。RFC（Request For Comments），意思是“请求评论”。3、互联网标准。\n\n&emsp;&emsp;互联网的组成，可以划分为2大块：1、**边缘部分**，由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传递数据、音频或视频）和资源共享。2、**核心部分**，由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。\n\n&emsp;&emsp;我们常说的主机A和主机B进行通信，实际上是指主机A的某个进程和主机B上的某个进程进行通信，这种比较严谨的说法通常可以简称为**计算机之间通信**。\n\n&emsp;&emsp;在网络的边缘部分的主机（也称之为端系统end system）之间通信通常分为两大类：1、客户-服务器方式（C/S方式，注意这里的C/S方式和软件开发中的服务方式不一样）和对等方式（P2P方式）。\n\n&emsp;&emsp;**电路交换**，必须经过1、“建立连接（占用通信资源）”；2、通话（一直占用通信资源）；3、释放连接（归还通信资源）三个步骤的交换方式。使用电路交换来传送计算机数据时，线路的传输效率很低。\n\n&emsp;&emsp;**分组交换，采用存储转发技术**。其中分组指的时把要发送的报文分组后再进行传输。位于网络边缘的主机和网络核心的路由器都是计算机，但是它们的作用却不一样。主机是为用户进行信息处理的，并且可以和其它主机通过网络进行信息交换。路由器则是用来转发分组的，即进行分组交换的。路由器收到一个分组，先暂时存储一下，检查分组的首部信息，查找转发表，按照首部的目的地址，找到合适的端口把分组转发出去。各路由器必须经常彼此交换掌握的路由信息，以便创建和动态维护路由器中的转发表，使得转发表能够在整个网络拓扑发生变化时及时更新。\n\n\n\n\n\n","slug":"计算机网络第一章-概述","published":1,"updated":"2020-11-05T15:52:42.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7bj000qggvke1nagwe0","content":"<h2 id=\"计算机网络第一章：概述\"><a href=\"#计算机网络第一章：概述\" class=\"headerlink\" title=\"计算机网络第一章：概述\"></a>计算机网络第一章：概述</h2><h4 id=\"1-1计算机网络在信息时代中的作用\"><a href=\"#1-1计算机网络在信息时代中的作用\" class=\"headerlink\" title=\"1.1计算机网络在信息时代中的作用\"></a>1.1计算机网络在信息时代中的作用</h4><p>&emsp;&emsp;我们知道，21世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。要实现信息化就必须依靠网络。其中有大家熟悉的三大网络，即电信网络、有线电视网络和计算机网路。按照最初的功能分工，电信网络向用户提供电话、电报及传真等服务；有线电视网络向用户传送各种电视节目；计算机网络则使用户能够在计算机之间传送数据文件。这三种网络都在信息化过程中起到很大的作用，但是其中发展最快并起到核心作用的是计算机网路。</p>\n<p>&emsp;&emsp;随着技术的发展，电信网络和有线电视网络都融入了现代计算机网络的技术，拓大了原来的服务范围，而计算机网络也能够提供电话通信、视频通信以及传送视频节目的服务。以一种网络提供三种的服务，这是“三网融合”的理论。</p>\n<p>&emsp;&emsp;20世纪90年代以后，以Internet为代表的计算机网络得到飞速发展，从最初仅为美国人提供免费教育科研网络发展到全球使用的商业网络，成为了全球最大和最重要的计算机网络。Internet的译名主要有2个，一个是因特网，这个译名是全国科学技术名词审定委员会推荐的，该译名较为准确但是长期未得推广。另外一个译名是互联网，这是目前流行最广、事实上的标准译名。Internet是有数量极大的各种计算机网络互联起来的，采用互联网译名能够体现出Internet的主要特征。</p>\n<p>&emsp;&emsp;互联网具有两个重要特点，即<strong>连通信</strong>和<strong>共享</strong>。</p>\n<hr>\n<h4 id=\"1-2互联网概述\"><a href=\"#1-2互联网概述\" class=\"headerlink\" title=\"1.2互联网概述\"></a>1.2互联网概述</h4><p>&emsp;&emsp;起源于美国的互联网现已成为覆盖全球的最大计算机网络。</p>\n<p>&emsp;&emsp;计算机网络（简称为网络）由若干<strong>结点（node)</strong>和连接这些结点的<strong>链路（link）</strong>组成。网络中的结点可以是计算机、集线器、交换机或路由器等。多个计算机通过结点（一般是集线器或者交换机）连接在一起成为一个计算机网络，而网络之间还可以通过路由器连接在一起，就构成了一个覆盖范围更大的计算机网络，这样的计算机网络就称之为互联网（internetwork或internet），因此互联网就是网络的网络。<strong>网络把许多计算机连接在一起，而互联网把多个网络通过路由器连接在一起。其中与互联网相连的计算机称为<em>主机</em>。</strong></p>\n<p>&emsp;&emsp;互联网基础结构发展的三个阶段。互联网基础结构发展经历了三个阶段，第一个阶段是从单个网络ARPANET向互联网发展的过程。1969年美国国防部创建的第一个分组交换网ARPANET最初只是一个单个的分组交换网（并不是一个互连的网络）。1983年TCP/IP协议成为ARPANET上的标准协议，使得所有使用TCP/IP协议的计算机都能利用互连网相互通信，因此把1983年作为互连网诞生时间。</p>\n<p>&emsp;&emsp;以小写i开头的<strong>internet（互连网）</strong>是一个通用名词，它泛指由多个计算机网络互连而成的计算机网路，在这些网络之间的通信协议可以任意选择，不一定是TCP/IP协议。而以大写开头的<strong>Internet（互联网）</strong>是一个专有名词，它指的是当今全球最大的、开放的、由众多网络互相连接而成的特定互连网，才用的是TCP/IP协议族作为通信的规则，且前身是美国的ARPANET。</p>\n<p>&emsp;&emsp;第二阶段的特点就是建成了<strong>三级结构的互联网</strong>。由美国国家科学基金会NSF围绕六个大型计算机中心建设计算机网络，即NFSNET。这是一个三级计算机网络，分为<strong>主干网、地区网和校园网（或企业网）</strong></p>\n<p>&emsp;&emsp;第三阶段的特点是逐渐形成了<strong>多层次ISP结构的互联网。</strong>后来美国政府支持的NSFNET逐渐被商用的互联网主干网替代，政府便不再负责互联网运营。这样就出现了：<strong>互联网服务提供者ISP（Internet Service Provider）。</strong>一般ISP就是一个进行商业活动的公司，所以一般把ISP称为互联网服务提供商。像我们国家的三大ISP就是：中国电信、中国移动和中国联通。</p>\n<p>&emsp;&emsp;随着互联网上的数据流量急剧增长，为了更好地利用网络资源，互联网交换点IXP应运而生。互联网交换点主要作用就是允许2个网络直接相连并交换分组，不需要通过第三个网络来转发分组。IXP常采用工作在数据链路层的网络交换机，这些交换机都用局域网互连起来。互联网的迅猛发展始于20世纪90年代。由欧洲原子核研究组织CERN开发的<strong>万维网（World Wide Web）</strong>被广泛在互联网上使用，大大方便了非网络专业的人员使用网络，成为互联网指数级增长的主要驱动力。</p>\n<p>&emsp;&emsp;互联网的标准化工作对互联网的发展起到了非常重要的作用。1992年互联网不再归美国政府管辖，因此成立了一个国际性组织叫<strong>互联网协会（Internet Society，简称ISOC）</strong>。ISOC下面有一个技术组织叫<strong>互联网体系结构委员会IAB</strong>负责管理互联网有关协议的开发。IAB下面又设置有2个工程部，一个是<strong>互联网工程部IETF</strong>，另一个是<strong>互联网研究部IRTF</strong>。 </p>\n<p>&emsp;&emsp;制定互联网正式的标准要经过下面三个阶段：1、互联网草稿，有效期只有6个月。2、建议标准，这个阶段开始成为RFC。RFC（Request For Comments），意思是“请求评论”。3、互联网标准。</p>\n<p>&emsp;&emsp;互联网的组成，可以划分为2大块：1、<strong>边缘部分</strong>，由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传递数据、音频或视频）和资源共享。2、<strong>核心部分</strong>，由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。</p>\n<p>&emsp;&emsp;我们常说的主机A和主机B进行通信，实际上是指主机A的某个进程和主机B上的某个进程进行通信，这种比较严谨的说法通常可以简称为<strong>计算机之间通信</strong>。</p>\n<p>&emsp;&emsp;在网络的边缘部分的主机（也称之为端系统end system）之间通信通常分为两大类：1、客户-服务器方式（C/S方式，注意这里的C/S方式和软件开发中的服务方式不一样）和对等方式（P2P方式）。</p>\n<p>&emsp;&emsp;<strong>电路交换</strong>，必须经过1、“建立连接（占用通信资源）”；2、通话（一直占用通信资源）；3、释放连接（归还通信资源）三个步骤的交换方式。使用电路交换来传送计算机数据时，线路的传输效率很低。</p>\n<p>&emsp;&emsp;<strong>分组交换，采用存储转发技术</strong>。其中分组指的时把要发送的报文分组后再进行传输。位于网络边缘的主机和网络核心的路由器都是计算机，但是它们的作用却不一样。主机是为用户进行信息处理的，并且可以和其它主机通过网络进行信息交换。路由器则是用来转发分组的，即进行分组交换的。路由器收到一个分组，先暂时存储一下，检查分组的首部信息，查找转发表，按照首部的目的地址，找到合适的端口把分组转发出去。各路由器必须经常彼此交换掌握的路由信息，以便创建和动态维护路由器中的转发表，使得转发表能够在整个网络拓扑发生变化时及时更新。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"计算机网络第一章：概述\"><a href=\"#计算机网络第一章：概述\" class=\"headerlink\" title=\"计算机网络第一章：概述\"></a>计算机网络第一章：概述</h2><h4 id=\"1-1计算机网络在信息时代中的作用\"><a href=\"#1-1计算机网络在信息时代中的作用\" class=\"headerlink\" title=\"1.1计算机网络在信息时代中的作用\"></a>1.1计算机网络在信息时代中的作用</h4><p>&emsp;&emsp;我们知道，21世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。要实现信息化就必须依靠网络。其中有大家熟悉的三大网络，即电信网络、有线电视网络和计算机网路。按照最初的功能分工，电信网络向用户提供电话、电报及传真等服务；有线电视网络向用户传送各种电视节目；计算机网络则使用户能够在计算机之间传送数据文件。这三种网络都在信息化过程中起到很大的作用，但是其中发展最快并起到核心作用的是计算机网路。</p>\n<p>&emsp;&emsp;随着技术的发展，电信网络和有线电视网络都融入了现代计算机网络的技术，拓大了原来的服务范围，而计算机网络也能够提供电话通信、视频通信以及传送视频节目的服务。以一种网络提供三种的服务，这是“三网融合”的理论。</p>\n<p>&emsp;&emsp;20世纪90年代以后，以Internet为代表的计算机网络得到飞速发展，从最初仅为美国人提供免费教育科研网络发展到全球使用的商业网络，成为了全球最大和最重要的计算机网络。Internet的译名主要有2个，一个是因特网，这个译名是全国科学技术名词审定委员会推荐的，该译名较为准确但是长期未得推广。另外一个译名是互联网，这是目前流行最广、事实上的标准译名。Internet是有数量极大的各种计算机网络互联起来的，采用互联网译名能够体现出Internet的主要特征。</p>\n<p>&emsp;&emsp;互联网具有两个重要特点，即<strong>连通信</strong>和<strong>共享</strong>。</p>\n<hr>\n<h4 id=\"1-2互联网概述\"><a href=\"#1-2互联网概述\" class=\"headerlink\" title=\"1.2互联网概述\"></a>1.2互联网概述</h4><p>&emsp;&emsp;起源于美国的互联网现已成为覆盖全球的最大计算机网络。</p>\n<p>&emsp;&emsp;计算机网络（简称为网络）由若干<strong>结点（node)</strong>和连接这些结点的<strong>链路（link）</strong>组成。网络中的结点可以是计算机、集线器、交换机或路由器等。多个计算机通过结点（一般是集线器或者交换机）连接在一起成为一个计算机网络，而网络之间还可以通过路由器连接在一起，就构成了一个覆盖范围更大的计算机网络，这样的计算机网络就称之为互联网（internetwork或internet），因此互联网就是网络的网络。<strong>网络把许多计算机连接在一起，而互联网把多个网络通过路由器连接在一起。其中与互联网相连的计算机称为<em>主机</em>。</strong></p>\n<p>&emsp;&emsp;互联网基础结构发展的三个阶段。互联网基础结构发展经历了三个阶段，第一个阶段是从单个网络ARPANET向互联网发展的过程。1969年美国国防部创建的第一个分组交换网ARPANET最初只是一个单个的分组交换网（并不是一个互连的网络）。1983年TCP/IP协议成为ARPANET上的标准协议，使得所有使用TCP/IP协议的计算机都能利用互连网相互通信，因此把1983年作为互连网诞生时间。</p>\n<p>&emsp;&emsp;以小写i开头的<strong>internet（互连网）</strong>是一个通用名词，它泛指由多个计算机网络互连而成的计算机网路，在这些网络之间的通信协议可以任意选择，不一定是TCP/IP协议。而以大写开头的<strong>Internet（互联网）</strong>是一个专有名词，它指的是当今全球最大的、开放的、由众多网络互相连接而成的特定互连网，才用的是TCP/IP协议族作为通信的规则，且前身是美国的ARPANET。</p>\n<p>&emsp;&emsp;第二阶段的特点就是建成了<strong>三级结构的互联网</strong>。由美国国家科学基金会NSF围绕六个大型计算机中心建设计算机网络，即NFSNET。这是一个三级计算机网络，分为<strong>主干网、地区网和校园网（或企业网）</strong></p>\n<p>&emsp;&emsp;第三阶段的特点是逐渐形成了<strong>多层次ISP结构的互联网。</strong>后来美国政府支持的NSFNET逐渐被商用的互联网主干网替代，政府便不再负责互联网运营。这样就出现了：<strong>互联网服务提供者ISP（Internet Service Provider）。</strong>一般ISP就是一个进行商业活动的公司，所以一般把ISP称为互联网服务提供商。像我们国家的三大ISP就是：中国电信、中国移动和中国联通。</p>\n<p>&emsp;&emsp;随着互联网上的数据流量急剧增长，为了更好地利用网络资源，互联网交换点IXP应运而生。互联网交换点主要作用就是允许2个网络直接相连并交换分组，不需要通过第三个网络来转发分组。IXP常采用工作在数据链路层的网络交换机，这些交换机都用局域网互连起来。互联网的迅猛发展始于20世纪90年代。由欧洲原子核研究组织CERN开发的<strong>万维网（World Wide Web）</strong>被广泛在互联网上使用，大大方便了非网络专业的人员使用网络，成为互联网指数级增长的主要驱动力。</p>\n<p>&emsp;&emsp;互联网的标准化工作对互联网的发展起到了非常重要的作用。1992年互联网不再归美国政府管辖，因此成立了一个国际性组织叫<strong>互联网协会（Internet Society，简称ISOC）</strong>。ISOC下面有一个技术组织叫<strong>互联网体系结构委员会IAB</strong>负责管理互联网有关协议的开发。IAB下面又设置有2个工程部，一个是<strong>互联网工程部IETF</strong>，另一个是<strong>互联网研究部IRTF</strong>。 </p>\n<p>&emsp;&emsp;制定互联网正式的标准要经过下面三个阶段：1、互联网草稿，有效期只有6个月。2、建议标准，这个阶段开始成为RFC。RFC（Request For Comments），意思是“请求评论”。3、互联网标准。</p>\n<p>&emsp;&emsp;互联网的组成，可以划分为2大块：1、<strong>边缘部分</strong>，由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传递数据、音频或视频）和资源共享。2、<strong>核心部分</strong>，由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。</p>\n<p>&emsp;&emsp;我们常说的主机A和主机B进行通信，实际上是指主机A的某个进程和主机B上的某个进程进行通信，这种比较严谨的说法通常可以简称为<strong>计算机之间通信</strong>。</p>\n<p>&emsp;&emsp;在网络的边缘部分的主机（也称之为端系统end system）之间通信通常分为两大类：1、客户-服务器方式（C/S方式，注意这里的C/S方式和软件开发中的服务方式不一样）和对等方式（P2P方式）。</p>\n<p>&emsp;&emsp;<strong>电路交换</strong>，必须经过1、“建立连接（占用通信资源）”；2、通话（一直占用通信资源）；3、释放连接（归还通信资源）三个步骤的交换方式。使用电路交换来传送计算机数据时，线路的传输效率很低。</p>\n<p>&emsp;&emsp;<strong>分组交换，采用存储转发技术</strong>。其中分组指的时把要发送的报文分组后再进行传输。位于网络边缘的主机和网络核心的路由器都是计算机，但是它们的作用却不一样。主机是为用户进行信息处理的，并且可以和其它主机通过网络进行信息交换。路由器则是用来转发分组的，即进行分组交换的。路由器收到一个分组，先暂时存储一下，检查分组的首部信息，查找转发表，按照首部的目的地址，找到合适的端口把分组转发出去。各路由器必须经常彼此交换掌握的路由信息，以便创建和动态维护路由器中的转发表，使得转发表能够在整个网络拓扑发生变化时及时更新。</p>\n"},{"title":"计算机网络","date":"2020-11-02T14:04:57.000Z","_content":"\n# 计算机网络\n\n---\n\n* ## 第一章：概述\n\n* ## 第二章：物理层\n\n* ## 第三章：数据链路层\n\n* ## 第四层：网络层\n\n* ## 第五章：运输层\n\n* ## 第六章：应用层\n\n* ## 第七章：网络安全\n\n* ## 第八章：互联网上的音频/视频服务\n\n* ## 第九章：无线网络和移动网络\n\n","source":"_posts/计算机网络.md","raw":"---\ntitle: 计算机网络\ndate: 2020-11-02 22:04:57\ntags: 读书笔记\n---\n\n# 计算机网络\n\n---\n\n* ## 第一章：概述\n\n* ## 第二章：物理层\n\n* ## 第三章：数据链路层\n\n* ## 第四层：网络层\n\n* ## 第五章：运输层\n\n* ## 第六章：应用层\n\n* ## 第七章：网络安全\n\n* ## 第八章：互联网上的音频/视频服务\n\n* ## 第九章：无线网络和移动网络\n\n","slug":"计算机网络","published":1,"updated":"2020-11-02T14:17:16.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7bl000tggvkhgafvmo9","content":"<h1 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h1><hr>\n<ul>\n<li><h2 id=\"第一章：概述\"><a href=\"#第一章：概述\" class=\"headerlink\" title=\"第一章：概述\"></a>第一章：概述</h2></li>\n<li><h2 id=\"第二章：物理层\"><a href=\"#第二章：物理层\" class=\"headerlink\" title=\"第二章：物理层\"></a>第二章：物理层</h2></li>\n<li><h2 id=\"第三章：数据链路层\"><a href=\"#第三章：数据链路层\" class=\"headerlink\" title=\"第三章：数据链路层\"></a>第三章：数据链路层</h2></li>\n<li><h2 id=\"第四层：网络层\"><a href=\"#第四层：网络层\" class=\"headerlink\" title=\"第四层：网络层\"></a>第四层：网络层</h2></li>\n<li><h2 id=\"第五章：运输层\"><a href=\"#第五章：运输层\" class=\"headerlink\" title=\"第五章：运输层\"></a>第五章：运输层</h2></li>\n<li><h2 id=\"第六章：应用层\"><a href=\"#第六章：应用层\" class=\"headerlink\" title=\"第六章：应用层\"></a>第六章：应用层</h2></li>\n<li><h2 id=\"第七章：网络安全\"><a href=\"#第七章：网络安全\" class=\"headerlink\" title=\"第七章：网络安全\"></a>第七章：网络安全</h2></li>\n<li><h2 id=\"第八章：互联网上的音频-视频服务\"><a href=\"#第八章：互联网上的音频-视频服务\" class=\"headerlink\" title=\"第八章：互联网上的音频/视频服务\"></a>第八章：互联网上的音频/视频服务</h2></li>\n<li><h2 id=\"第九章：无线网络和移动网络\"><a href=\"#第九章：无线网络和移动网络\" class=\"headerlink\" title=\"第九章：无线网络和移动网络\"></a>第九章：无线网络和移动网络</h2></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h1><hr>\n<ul>\n<li><h2 id=\"第一章：概述\"><a href=\"#第一章：概述\" class=\"headerlink\" title=\"第一章：概述\"></a>第一章：概述</h2></li>\n<li><h2 id=\"第二章：物理层\"><a href=\"#第二章：物理层\" class=\"headerlink\" title=\"第二章：物理层\"></a>第二章：物理层</h2></li>\n<li><h2 id=\"第三章：数据链路层\"><a href=\"#第三章：数据链路层\" class=\"headerlink\" title=\"第三章：数据链路层\"></a>第三章：数据链路层</h2></li>\n<li><h2 id=\"第四层：网络层\"><a href=\"#第四层：网络层\" class=\"headerlink\" title=\"第四层：网络层\"></a>第四层：网络层</h2></li>\n<li><h2 id=\"第五章：运输层\"><a href=\"#第五章：运输层\" class=\"headerlink\" title=\"第五章：运输层\"></a>第五章：运输层</h2></li>\n<li><h2 id=\"第六章：应用层\"><a href=\"#第六章：应用层\" class=\"headerlink\" title=\"第六章：应用层\"></a>第六章：应用层</h2></li>\n<li><h2 id=\"第七章：网络安全\"><a href=\"#第七章：网络安全\" class=\"headerlink\" title=\"第七章：网络安全\"></a>第七章：网络安全</h2></li>\n<li><h2 id=\"第八章：互联网上的音频-视频服务\"><a href=\"#第八章：互联网上的音频-视频服务\" class=\"headerlink\" title=\"第八章：互联网上的音频/视频服务\"></a>第八章：互联网上的音频/视频服务</h2></li>\n<li><h2 id=\"第九章：无线网络和移动网络\"><a href=\"#第九章：无线网络和移动网络\" class=\"headerlink\" title=\"第九章：无线网络和移动网络\"></a>第九章：无线网络和移动网络</h2></li>\n</ul>\n"},{"title":"账户管理","date":"2019-09-02T14:24:29.000Z","_content":"\n### 数据库用户管理\n\n---\n\n```sql\ndesc user;  -- 查看用户\ngrant 权限列表 on 数据库 to '用户名'@'访问主机' identified by '密码';  -- 创建账户同时授权\ndrop user '用户名'@'主机';  -- 删除用户\n```\n\n---\n\n#### 关于数据库服务器的主从关系：\n\n##### 作用：\n\n* 读写分离 ：写在主服务器，读在从服务器，主服务器的更新会同步到从服务器\n* 数据备份 \n* 负载均衡\n\n---\n\n#### mysql数据库备份：\n\n```bash\n# 终端命令：\n$ mysqldump -uroot -p 数据库名 > xxx.sql  # 备份数据库\n# #\n#备份所有的数据库，并且每个表上锁【不允许其他操作】：\n$ mysqldump -uroot -p --all-databases --lock-all-tables > xxx.sql  \n# # \n# 登录数据库，创建新的数据库，然后退出mysql\n$ mysql -uroot -p 新数据库名 < xxx.sql\n```\n\n","source":"_posts/账户管理.md","raw":"---\ntitle: 账户管理\ndate: 2019-09-2 22:24:29\ntags: RDBMS\n---\n\n### 数据库用户管理\n\n---\n\n```sql\ndesc user;  -- 查看用户\ngrant 权限列表 on 数据库 to '用户名'@'访问主机' identified by '密码';  -- 创建账户同时授权\ndrop user '用户名'@'主机';  -- 删除用户\n```\n\n---\n\n#### 关于数据库服务器的主从关系：\n\n##### 作用：\n\n* 读写分离 ：写在主服务器，读在从服务器，主服务器的更新会同步到从服务器\n* 数据备份 \n* 负载均衡\n\n---\n\n#### mysql数据库备份：\n\n```bash\n# 终端命令：\n$ mysqldump -uroot -p 数据库名 > xxx.sql  # 备份数据库\n# #\n#备份所有的数据库，并且每个表上锁【不允许其他操作】：\n$ mysqldump -uroot -p --all-databases --lock-all-tables > xxx.sql  \n# # \n# 登录数据库，创建新的数据库，然后退出mysql\n$ mysql -uroot -p 新数据库名 < xxx.sql\n```\n\n","slug":"账户管理","published":1,"updated":"2019-09-21T14:52:04.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7bm000vggvkbk46099q","content":"<h3 id=\"数据库用户管理\"><a href=\"#数据库用户管理\" class=\"headerlink\" title=\"数据库用户管理\"></a>数据库用户管理</h3><hr>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc user;  <span class=\"comment\">-- 查看用户</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> 权限列表 <span class=\"keyword\">on</span> 数据库 <span class=\"keyword\">to</span> <span class=\"string\">'用户名'</span>@<span class=\"string\">'访问主机'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'密码'</span>;  <span class=\"comment\">-- 创建账户同时授权</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> <span class=\"string\">'用户名'</span>@<span class=\"string\">'主机'</span>;  <span class=\"comment\">-- 删除用户</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"关于数据库服务器的主从关系：\"><a href=\"#关于数据库服务器的主从关系：\" class=\"headerlink\" title=\"关于数据库服务器的主从关系：\"></a>关于数据库服务器的主从关系：</h4><h5 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h5><ul>\n<li>读写分离 ：写在主服务器，读在从服务器，主服务器的更新会同步到从服务器</li>\n<li>数据备份 </li>\n<li>负载均衡</li>\n</ul>\n<hr>\n<h4 id=\"mysql数据库备份：\"><a href=\"#mysql数据库备份：\" class=\"headerlink\" title=\"mysql数据库备份：\"></a>mysql数据库备份：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 终端命令：</span></span><br><span class=\"line\">$ mysqldump -uroot -p 数据库名 &gt; xxx.sql  <span class=\"comment\"># 备份数据库</span></span><br><span class=\"line\"><span class=\"comment\"># #</span></span><br><span class=\"line\"><span class=\"comment\">#备份所有的数据库，并且每个表上锁【不允许其他操作】：</span></span><br><span class=\"line\">$ mysqldump -uroot -p --all-databases --lock-all-tables &gt; xxx.sql  </span><br><span class=\"line\"><span class=\"comment\"># # </span></span><br><span class=\"line\"><span class=\"comment\"># 登录数据库，创建新的数据库，然后退出mysql</span></span><br><span class=\"line\">$ mysql -uroot -p 新数据库名 &lt; xxx.sql</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据库用户管理\"><a href=\"#数据库用户管理\" class=\"headerlink\" title=\"数据库用户管理\"></a>数据库用户管理</h3><hr>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc user;  <span class=\"comment\">-- 查看用户</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> 权限列表 <span class=\"keyword\">on</span> 数据库 <span class=\"keyword\">to</span> <span class=\"string\">'用户名'</span>@<span class=\"string\">'访问主机'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'密码'</span>;  <span class=\"comment\">-- 创建账户同时授权</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> <span class=\"string\">'用户名'</span>@<span class=\"string\">'主机'</span>;  <span class=\"comment\">-- 删除用户</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"关于数据库服务器的主从关系：\"><a href=\"#关于数据库服务器的主从关系：\" class=\"headerlink\" title=\"关于数据库服务器的主从关系：\"></a>关于数据库服务器的主从关系：</h4><h5 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h5><ul>\n<li>读写分离 ：写在主服务器，读在从服务器，主服务器的更新会同步到从服务器</li>\n<li>数据备份 </li>\n<li>负载均衡</li>\n</ul>\n<hr>\n<h4 id=\"mysql数据库备份：\"><a href=\"#mysql数据库备份：\" class=\"headerlink\" title=\"mysql数据库备份：\"></a>mysql数据库备份：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 终端命令：</span></span><br><span class=\"line\">$ mysqldump -uroot -p 数据库名 &gt; xxx.sql  <span class=\"comment\"># 备份数据库</span></span><br><span class=\"line\"><span class=\"comment\"># #</span></span><br><span class=\"line\"><span class=\"comment\">#备份所有的数据库，并且每个表上锁【不允许其他操作】：</span></span><br><span class=\"line\">$ mysqldump -uroot -p --all-databases --lock-all-tables &gt; xxx.sql  </span><br><span class=\"line\"><span class=\"comment\"># # </span></span><br><span class=\"line\"><span class=\"comment\"># 登录数据库，创建新的数据库，然后退出mysql</span></span><br><span class=\"line\">$ mysql -uroot -p 新数据库名 &lt; xxx.sql</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Git--分布式版本控制系统","date":"2019-08-18T01:53:29.000Z","_content":"\n### Git的两大特点：\n\n* 版本控制：可以解决多人同时开发代码的问题，也可以解决找回历史代码的问题\n* 分布式：Git是分布式版本控制系统，同一个Git仓库，可以分不到不同的电脑上。其中有一台作为服务器，24小时开机，其他人都是从这个台服务器仓库克隆一份完整的版本到自己的电脑上，并且把各自的提交推送到服务器仓库里，也可以从拉取别人的提交。自己可以搭建这个服务器，也可以直接使用github。\n\n---\n\n#### 一、Git的基本操作：\n\n* 安装git\n\n```bash\nsudo apt-get install git\ngit --version  # 显示git的版本，可以测试是否安装成功\n```\n\n* 使用 git init 初始化仓库 \n\n```bash\nmkdir floder  # 创建一个文件夹，这个文件夹就是 工作区\ncd floder  # 进入创建的文件夹\ngit init  # 初始化，为该文件夹创建git版本仓库\n# 初始化仓库后，会生成一个 .git的隐藏文件夹，这个就是git的版本仓库，在版本仓库中有一个 暂存区【stage】\nls -lha\n总用量 12K\ndrwxr-xr-x  3 wooyee wooyee 4.0K 8月  29 10:27 .\ndrwxrwxrwx 14 wooyee wooyee 4.0K 8月  27 21:18 ..\ndrwxr-xr-x  8 wooyee wooyee 4.0K 8月  29 10:27 .git\n```\n\n* 创建一个版本\n\n```bash\ngit add file_name  # 添加修改到暂存区\ngit commit -m \"版本描述信息\"  # 创建版本记录，在创建版本记录前，可以多次添加修改到暂存区\n# 注意：git commit -m \"版本描述信息\" 只是把暂存区的修改创建新版本，如果没有git add 的修改是无法创建新版本的\n```\n\n* 查看版本记录\n\n```bash\ngit log\n\ncommit 4ab9d751962be7b9e6f658526ef92f7383926019 (HEAD -> master)\nAuthor: wooyee-ldq <2632230944@qq.com>\nDate:   Sun Sep 29 10:18:58 2019 +0800\n\n    版本2\n\ncommit d6f250ffbc954465d9ac17ecdd70b913c6253b16  # 版本号\nAuthor: wooyee-ldq <2632230944@qq.com>\nDate:   Sun Sep 29 10:17:16 2019 +0800\n\n    版本1\n```\n\n* 版本回退：在git中，HEAD指针指向最新的版本，使用HEAD^或者HEAD～1表示最新版本的前一个版本，同理，HEAD^^或者HEAD～2表示最新版本的前两个版本\n\n```bash\ngit reset --hard HEAD^  # 回退到上一个版本\ngit reset --hard 版本号  # 回退到某个版本，回退版本时，原版本并不删除\n```\n\n* 查看操作记录\n\n```bash\ngit reflog\n\nd6f250f (HEAD -> master) HEAD@{0}: reset: moving to HEAD^\n4ab9d75 HEAD@{1}: commit: 版本2  # 最前面的号码就是版本的序列号，\n# 可以通过这个命令查看过去版本的序列号，在使用 git reset --hard 版本号 回到某个版本\nd6f250f (HEAD -> master) HEAD@{2}: commit (initial): 版本1\n```\n\n* 查看工作状态\n\n```bash\ngit status\n\n位于分支 master\n未跟踪的文件:\n  （使用 \"git add <文件>...\" 以包含要提交的内容）\n\n\tcode2.txt\n\n提交为空，但是存在尚未跟踪的文件（使用 \"git add\" 建立跟踪）\n```\n\n* 撤销修改\n\n```bash\n# 如果修改了文件，在git add 之前，你想撤销之前的修改，使用下面命令：\ngit checkout -- 文件名  # 丢弃改动\n\n# 如果修改了文件，并且已经使用 git add 添加到暂存区，但是还没git commit 创建新版本，要撤销文件的修改：\ngit reset HEAD 文件名 ...  # 取消暂存\ngit checkout -- 文件名  # 丢弃改动\n\n# 如果修改的文件已经创建了新的版本，直接使用上面的版本回退就可以回到原来的版本了\n```\n\n* 文件对比：\n\n```bash\n# 比较工作区中的文件和某个版本有什么不同【比较的是同一个文件】：\ngit diff HEAD -- 文件名  # 这里的HEAD指的是版本，比如 HEAD^ 也可以\n\n# 比较不同版本中同一个文件的不同：\ngit diff HEAD HEAD^ -- file_name  # 这里比较的是最新版本和前一个版本的 file_name这个文件的不同\n```\n\n* 删除文件\n\n```bash\n# 在工作区删除文件也是一种修改，如果在工作区删除了文件，可以使用 git checkout -- 文件名恢复文件\n# 如果确实要删除文件，要使用 git rm 文件名来添加修改到暂存区，再使用git cmmit来保存新版本\n# 在使用了 git rm 添加到暂存区后，还是可以使用git reset HEAD 文件名 来取消暂存，然后git checkout 恢复文件\n# 注意：如果你在删除了文件后，保存了新的版本，如果要找回原来的文件只能回退到文件还没有被删除的版本\n# 注意：如果新建的文件，还没有添加到过暂存区，如果删除了是不可以使用git 的管理来恢复文件的\n```\n\n---\n\n#### 二、Git分支管理\n\n* 查看当前有几个分支，并且在哪个分支下工作\n\n```bash\ngit branch\n```\n\n* 创建新分支\n\n```bash\n# 创建新分支\ngit branch 分支名\n# 切换分支\ngit checkout 分支名\n# 创建一个分支，并切换到该分支\ngit checkout -b dev  # 这里dev是创建的新分支名\ngit branch\n* dev  # *表示当前所在分支\n  master\n```\n\n* 切换分支\n\n```bash\ngit checkout 分支名\n```\n\n* 合并分支\n\n```bash\n# 一般在主分支合并其他分支\ngit checkout master  # 切换到主分支\ngit merge 分支名  # 合并分支到当前分支\n```\n\n* 删除分支\n\n```bash\n# 注意：一般在把分支合并之后再删除分支\ngit branch -d 分支名\n```\n\n* 解决分支合并冲突\n\n```bash\n# 合并分支的时候，可能会发生合并冲突\n# 原因是：你在合并该分支前，修改了某个文件并创建了新的版本，但是在此之前，\n# 你要合并的这个分支也修改了这个文件并且也创建了新的提交版本，\n# 因此，需要手动打开发生冲突的文件，这时git会标示出发生冲突的内容，\n# 你可以根据需要，手动修改和解决冲突，并创建新版本提交\n# 这样实际上版本已经合并保存提交了，这时可以删除分支了\n```\n\n* 没有冲突的非快速合并\n\n```bash\n# 在合并分支时，没有发生冲突，但是此次合并不是快速合并，而是其他策略\n# 原因是：你在其他分支新建了一个文件并提交，然后切换回主分支时，修改了某个文件并提交\n# 在合并分支时，git会把分支新建的文件合并过来，然后进行一次提交，这时就不是快速提交了\n# 因此，在此次合并时会自动提交一次，就需要我们输入提交的描述\n# 输入描述后，ctrl+x退出 ，这样就合并好了\ngit log --pretty=oneline --graph  # 查看提交记录，会发现多了一次提交\n```\n\n* 禁用快速合并的合并操作【git merge 默认是快速合并】\n\n```bash\ngit merge --no-ff -m \"提交描述\" 分支名  # 禁用快速合并，会在合并后进行一次提交\n```\n\n* 保存工作现场\n\n```bash\ngit stash  # 保存当前分支的工作现场\ngit stash list  # 显示保存的工作现场\ngit stash pop  # 回到保存的工作现场\n```\n\n* 拉取最新的版本\n\n```bash\ngit fetch origin master:temp  # orgin是项目的拉取地址，\n# master表示从项目的master分支拉取更新，temp表示创建temp分支并把拉取的更新放在temp分支中\ngit checkout master  # 切换到主分支master\ngit merge temp  # 把temp分支合并到master\n```\n\n强制推送本地库版本到远程库（用本地库的版本覆盖远程库）\n\n```bash\ngit push -f origin master\n# -f 强制推送，origin是远程库的地址，master是指定的远程分支\n```\n\n---\n\n#### 三、GitHub的使用\n\n* 从github克隆项目\n\n```bash\ngit clone ssh/https的克隆地址  # 把项目克隆到本地\n# 如果克隆出错，执行命令:\neval \"$(ssh-agent -s)\"\nssh-add\n```\n\n* 推送分支到github\n\n```bash\ngit push origin 分支名  # 把该分支推送到github仓库\n```\n\n* 设置本地分支跟踪远程服务器分支\n\n```bash\ngit branch --set-upstream-to=origin/远程分支名 本地分支名  # 设置本地分支跟踪远程服务器分支\ngit push  # 设置本地分支跟踪远程服务器分支后，使用该本地分支推送时，直接使用 git push 就可以\n```\n\n* 从远程分支拉取代码\n\n```bash\ngit pull origin 分支名  # 从远程分支拉取代码\n```\n\n* 如果是自己把项目上传的推送\n\n```bash\ngit add . #把文件夹所有文件都添加\ngit commit -m \"first commit\"  \ngit push git@github.com:wooyee-ldq/chat-IM.git master  # 这里push后面的地址是仓库的ssh地址\ngit remote add origin git@github.com:wooyee-ldq/chat-IM.git  # 设置远程仓库名 为 origin\ngit remote rm origin #删除远程仓库  \n```\n\n","source":"_posts/Git-分布式版本控制系统.md","raw":"---\ntitle: Git--分布式版本控制系统\ndate: 2019-08-18 09:53:29\ntags: git\n---\n\n### Git的两大特点：\n\n* 版本控制：可以解决多人同时开发代码的问题，也可以解决找回历史代码的问题\n* 分布式：Git是分布式版本控制系统，同一个Git仓库，可以分不到不同的电脑上。其中有一台作为服务器，24小时开机，其他人都是从这个台服务器仓库克隆一份完整的版本到自己的电脑上，并且把各自的提交推送到服务器仓库里，也可以从拉取别人的提交。自己可以搭建这个服务器，也可以直接使用github。\n\n---\n\n#### 一、Git的基本操作：\n\n* 安装git\n\n```bash\nsudo apt-get install git\ngit --version  # 显示git的版本，可以测试是否安装成功\n```\n\n* 使用 git init 初始化仓库 \n\n```bash\nmkdir floder  # 创建一个文件夹，这个文件夹就是 工作区\ncd floder  # 进入创建的文件夹\ngit init  # 初始化，为该文件夹创建git版本仓库\n# 初始化仓库后，会生成一个 .git的隐藏文件夹，这个就是git的版本仓库，在版本仓库中有一个 暂存区【stage】\nls -lha\n总用量 12K\ndrwxr-xr-x  3 wooyee wooyee 4.0K 8月  29 10:27 .\ndrwxrwxrwx 14 wooyee wooyee 4.0K 8月  27 21:18 ..\ndrwxr-xr-x  8 wooyee wooyee 4.0K 8月  29 10:27 .git\n```\n\n* 创建一个版本\n\n```bash\ngit add file_name  # 添加修改到暂存区\ngit commit -m \"版本描述信息\"  # 创建版本记录，在创建版本记录前，可以多次添加修改到暂存区\n# 注意：git commit -m \"版本描述信息\" 只是把暂存区的修改创建新版本，如果没有git add 的修改是无法创建新版本的\n```\n\n* 查看版本记录\n\n```bash\ngit log\n\ncommit 4ab9d751962be7b9e6f658526ef92f7383926019 (HEAD -> master)\nAuthor: wooyee-ldq <2632230944@qq.com>\nDate:   Sun Sep 29 10:18:58 2019 +0800\n\n    版本2\n\ncommit d6f250ffbc954465d9ac17ecdd70b913c6253b16  # 版本号\nAuthor: wooyee-ldq <2632230944@qq.com>\nDate:   Sun Sep 29 10:17:16 2019 +0800\n\n    版本1\n```\n\n* 版本回退：在git中，HEAD指针指向最新的版本，使用HEAD^或者HEAD～1表示最新版本的前一个版本，同理，HEAD^^或者HEAD～2表示最新版本的前两个版本\n\n```bash\ngit reset --hard HEAD^  # 回退到上一个版本\ngit reset --hard 版本号  # 回退到某个版本，回退版本时，原版本并不删除\n```\n\n* 查看操作记录\n\n```bash\ngit reflog\n\nd6f250f (HEAD -> master) HEAD@{0}: reset: moving to HEAD^\n4ab9d75 HEAD@{1}: commit: 版本2  # 最前面的号码就是版本的序列号，\n# 可以通过这个命令查看过去版本的序列号，在使用 git reset --hard 版本号 回到某个版本\nd6f250f (HEAD -> master) HEAD@{2}: commit (initial): 版本1\n```\n\n* 查看工作状态\n\n```bash\ngit status\n\n位于分支 master\n未跟踪的文件:\n  （使用 \"git add <文件>...\" 以包含要提交的内容）\n\n\tcode2.txt\n\n提交为空，但是存在尚未跟踪的文件（使用 \"git add\" 建立跟踪）\n```\n\n* 撤销修改\n\n```bash\n# 如果修改了文件，在git add 之前，你想撤销之前的修改，使用下面命令：\ngit checkout -- 文件名  # 丢弃改动\n\n# 如果修改了文件，并且已经使用 git add 添加到暂存区，但是还没git commit 创建新版本，要撤销文件的修改：\ngit reset HEAD 文件名 ...  # 取消暂存\ngit checkout -- 文件名  # 丢弃改动\n\n# 如果修改的文件已经创建了新的版本，直接使用上面的版本回退就可以回到原来的版本了\n```\n\n* 文件对比：\n\n```bash\n# 比较工作区中的文件和某个版本有什么不同【比较的是同一个文件】：\ngit diff HEAD -- 文件名  # 这里的HEAD指的是版本，比如 HEAD^ 也可以\n\n# 比较不同版本中同一个文件的不同：\ngit diff HEAD HEAD^ -- file_name  # 这里比较的是最新版本和前一个版本的 file_name这个文件的不同\n```\n\n* 删除文件\n\n```bash\n# 在工作区删除文件也是一种修改，如果在工作区删除了文件，可以使用 git checkout -- 文件名恢复文件\n# 如果确实要删除文件，要使用 git rm 文件名来添加修改到暂存区，再使用git cmmit来保存新版本\n# 在使用了 git rm 添加到暂存区后，还是可以使用git reset HEAD 文件名 来取消暂存，然后git checkout 恢复文件\n# 注意：如果你在删除了文件后，保存了新的版本，如果要找回原来的文件只能回退到文件还没有被删除的版本\n# 注意：如果新建的文件，还没有添加到过暂存区，如果删除了是不可以使用git 的管理来恢复文件的\n```\n\n---\n\n#### 二、Git分支管理\n\n* 查看当前有几个分支，并且在哪个分支下工作\n\n```bash\ngit branch\n```\n\n* 创建新分支\n\n```bash\n# 创建新分支\ngit branch 分支名\n# 切换分支\ngit checkout 分支名\n# 创建一个分支，并切换到该分支\ngit checkout -b dev  # 这里dev是创建的新分支名\ngit branch\n* dev  # *表示当前所在分支\n  master\n```\n\n* 切换分支\n\n```bash\ngit checkout 分支名\n```\n\n* 合并分支\n\n```bash\n# 一般在主分支合并其他分支\ngit checkout master  # 切换到主分支\ngit merge 分支名  # 合并分支到当前分支\n```\n\n* 删除分支\n\n```bash\n# 注意：一般在把分支合并之后再删除分支\ngit branch -d 分支名\n```\n\n* 解决分支合并冲突\n\n```bash\n# 合并分支的时候，可能会发生合并冲突\n# 原因是：你在合并该分支前，修改了某个文件并创建了新的版本，但是在此之前，\n# 你要合并的这个分支也修改了这个文件并且也创建了新的提交版本，\n# 因此，需要手动打开发生冲突的文件，这时git会标示出发生冲突的内容，\n# 你可以根据需要，手动修改和解决冲突，并创建新版本提交\n# 这样实际上版本已经合并保存提交了，这时可以删除分支了\n```\n\n* 没有冲突的非快速合并\n\n```bash\n# 在合并分支时，没有发生冲突，但是此次合并不是快速合并，而是其他策略\n# 原因是：你在其他分支新建了一个文件并提交，然后切换回主分支时，修改了某个文件并提交\n# 在合并分支时，git会把分支新建的文件合并过来，然后进行一次提交，这时就不是快速提交了\n# 因此，在此次合并时会自动提交一次，就需要我们输入提交的描述\n# 输入描述后，ctrl+x退出 ，这样就合并好了\ngit log --pretty=oneline --graph  # 查看提交记录，会发现多了一次提交\n```\n\n* 禁用快速合并的合并操作【git merge 默认是快速合并】\n\n```bash\ngit merge --no-ff -m \"提交描述\" 分支名  # 禁用快速合并，会在合并后进行一次提交\n```\n\n* 保存工作现场\n\n```bash\ngit stash  # 保存当前分支的工作现场\ngit stash list  # 显示保存的工作现场\ngit stash pop  # 回到保存的工作现场\n```\n\n* 拉取最新的版本\n\n```bash\ngit fetch origin master:temp  # orgin是项目的拉取地址，\n# master表示从项目的master分支拉取更新，temp表示创建temp分支并把拉取的更新放在temp分支中\ngit checkout master  # 切换到主分支master\ngit merge temp  # 把temp分支合并到master\n```\n\n强制推送本地库版本到远程库（用本地库的版本覆盖远程库）\n\n```bash\ngit push -f origin master\n# -f 强制推送，origin是远程库的地址，master是指定的远程分支\n```\n\n---\n\n#### 三、GitHub的使用\n\n* 从github克隆项目\n\n```bash\ngit clone ssh/https的克隆地址  # 把项目克隆到本地\n# 如果克隆出错，执行命令:\neval \"$(ssh-agent -s)\"\nssh-add\n```\n\n* 推送分支到github\n\n```bash\ngit push origin 分支名  # 把该分支推送到github仓库\n```\n\n* 设置本地分支跟踪远程服务器分支\n\n```bash\ngit branch --set-upstream-to=origin/远程分支名 本地分支名  # 设置本地分支跟踪远程服务器分支\ngit push  # 设置本地分支跟踪远程服务器分支后，使用该本地分支推送时，直接使用 git push 就可以\n```\n\n* 从远程分支拉取代码\n\n```bash\ngit pull origin 分支名  # 从远程分支拉取代码\n```\n\n* 如果是自己把项目上传的推送\n\n```bash\ngit add . #把文件夹所有文件都添加\ngit commit -m \"first commit\"  \ngit push git@github.com:wooyee-ldq/chat-IM.git master  # 这里push后面的地址是仓库的ssh地址\ngit remote add origin git@github.com:wooyee-ldq/chat-IM.git  # 设置远程仓库名 为 origin\ngit remote rm origin #删除远程仓库  \n```\n\n","slug":"Git-分布式版本控制系统","published":1,"updated":"2020-10-03T14:25:56.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7h6001iggvkj20v47rr","content":"<h3 id=\"Git的两大特点：\"><a href=\"#Git的两大特点：\" class=\"headerlink\" title=\"Git的两大特点：\"></a>Git的两大特点：</h3><ul>\n<li>版本控制：可以解决多人同时开发代码的问题，也可以解决找回历史代码的问题</li>\n<li>分布式：Git是分布式版本控制系统，同一个Git仓库，可以分不到不同的电脑上。其中有一台作为服务器，24小时开机，其他人都是从这个台服务器仓库克隆一份完整的版本到自己的电脑上，并且把各自的提交推送到服务器仓库里，也可以从拉取别人的提交。自己可以搭建这个服务器，也可以直接使用github。</li>\n</ul>\n<hr>\n<h4 id=\"一、Git的基本操作：\"><a href=\"#一、Git的基本操作：\" class=\"headerlink\" title=\"一、Git的基本操作：\"></a>一、Git的基本操作：</h4><ul>\n<li>安装git</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">git --version  <span class=\"comment\"># 显示git的版本，可以测试是否安装成功</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 git init 初始化仓库 </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir floder  <span class=\"comment\"># 创建一个文件夹，这个文件夹就是 工作区</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> floder  <span class=\"comment\"># 进入创建的文件夹</span></span><br><span class=\"line\">git init  <span class=\"comment\"># 初始化，为该文件夹创建git版本仓库</span></span><br><span class=\"line\"><span class=\"comment\"># 初始化仓库后，会生成一个 .git的隐藏文件夹，这个就是git的版本仓库，在版本仓库中有一个 暂存区【stage】</span></span><br><span class=\"line\">ls -lha</span><br><span class=\"line\">总用量 12K</span><br><span class=\"line\">drwxr-xr-x  3 wooyee wooyee 4.0K 8月  29 10:27 .</span><br><span class=\"line\">drwxrwxrwx 14 wooyee wooyee 4.0K 8月  27 21:18 ..</span><br><span class=\"line\">drwxr-xr-x  8 wooyee wooyee 4.0K 8月  29 10:27 .git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file_name  <span class=\"comment\"># 添加修改到暂存区</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"版本描述信息\"</span>  <span class=\"comment\"># 创建版本记录，在创建版本记录前，可以多次添加修改到暂存区</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：git commit -m \"版本描述信息\" 只是把暂存区的修改创建新版本，如果没有git add 的修改是无法创建新版本的</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看版本记录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit 4ab9d751962be7b9e6f658526ef92f7383926019 (HEAD -&gt; master)</span><br><span class=\"line\">Author: wooyee-ldq &lt;2632230944@qq.com&gt;</span><br><span class=\"line\">Date:   Sun Sep 29 10:18:58 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    版本2</span><br><span class=\"line\"></span><br><span class=\"line\">commit d6f250ffbc954465d9ac17ecdd70b913c6253b16  <span class=\"comment\"># 版本号</span></span><br><span class=\"line\">Author: wooyee-ldq &lt;2632230944@qq.com&gt;</span><br><span class=\"line\">Date:   Sun Sep 29 10:17:16 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    版本1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>版本回退：在git中，HEAD指针指向最新的版本，使用HEAD^或者HEAD～1表示最新版本的前一个版本，同理，HEAD^^或者HEAD～2表示最新版本的前两个版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^  <span class=\"comment\"># 回退到上一个版本</span></span><br><span class=\"line\">git reset --hard 版本号  <span class=\"comment\"># 回退到某个版本，回退版本时，原版本并不删除</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看操作记录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\"></span><br><span class=\"line\">d6f250f (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class=\"line\">4ab9d75 HEAD@&#123;1&#125;: commit: 版本2  <span class=\"comment\"># 最前面的号码就是版本的序列号，</span></span><br><span class=\"line\"><span class=\"comment\"># 可以通过这个命令查看过去版本的序列号，在使用 git reset --hard 版本号 回到某个版本</span></span><br><span class=\"line\">d6f250f (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (initial): 版本1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看工作状态</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">未跟踪的文件:</span><br><span class=\"line\">  （使用 <span class=\"string\">\"git add &lt;文件&gt;...\"</span> 以包含要提交的内容）</span><br><span class=\"line\"></span><br><span class=\"line\">\tcode2.txt</span><br><span class=\"line\"></span><br><span class=\"line\">提交为空，但是存在尚未跟踪的文件（使用 <span class=\"string\">\"git add\"</span> 建立跟踪）</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>撤销修改</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果修改了文件，在git add 之前，你想撤销之前的修改，使用下面命令：</span></span><br><span class=\"line\">git checkout -- 文件名  <span class=\"comment\"># 丢弃改动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果修改了文件，并且已经使用 git add 添加到暂存区，但是还没git commit 创建新版本，要撤销文件的修改：</span></span><br><span class=\"line\">git reset HEAD 文件名 ...  <span class=\"comment\"># 取消暂存</span></span><br><span class=\"line\">git checkout -- 文件名  <span class=\"comment\"># 丢弃改动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果修改的文件已经创建了新的版本，直接使用上面的版本回退就可以回到原来的版本了</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件对比：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比较工作区中的文件和某个版本有什么不同【比较的是同一个文件】：</span></span><br><span class=\"line\">git diff HEAD -- 文件名  <span class=\"comment\"># 这里的HEAD指的是版本，比如 HEAD^ 也可以</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较不同版本中同一个文件的不同：</span></span><br><span class=\"line\">git diff HEAD HEAD^ -- file_name  <span class=\"comment\"># 这里比较的是最新版本和前一个版本的 file_name这个文件的不同</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在工作区删除文件也是一种修改，如果在工作区删除了文件，可以使用 git checkout -- 文件名恢复文件</span></span><br><span class=\"line\"><span class=\"comment\"># 如果确实要删除文件，要使用 git rm 文件名来添加修改到暂存区，再使用git cmmit来保存新版本</span></span><br><span class=\"line\"><span class=\"comment\"># 在使用了 git rm 添加到暂存区后，还是可以使用git reset HEAD 文件名 来取消暂存，然后git checkout 恢复文件</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：如果你在删除了文件后，保存了新的版本，如果要找回原来的文件只能回退到文件还没有被删除的版本</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：如果新建的文件，还没有添加到过暂存区，如果删除了是不可以使用git 的管理来恢复文件的</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"二、Git分支管理\"><a href=\"#二、Git分支管理\" class=\"headerlink\" title=\"二、Git分支管理\"></a>二、Git分支管理</h4><ul>\n<li>查看当前有几个分支，并且在哪个分支下工作</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建新分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新分支</span></span><br><span class=\"line\">git branch 分支名</span><br><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout 分支名</span><br><span class=\"line\"><span class=\"comment\"># 创建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b dev  <span class=\"comment\"># 这里dev是创建的新分支名</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\">* dev  <span class=\"comment\"># *表示当前所在分支</span></span><br><span class=\"line\">  master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>合并分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一般在主分支合并其他分支</span></span><br><span class=\"line\">git checkout master  <span class=\"comment\"># 切换到主分支</span></span><br><span class=\"line\">git merge 分支名  <span class=\"comment\"># 合并分支到当前分支</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意：一般在把分支合并之后再删除分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解决分支合并冲突</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 合并分支的时候，可能会发生合并冲突</span></span><br><span class=\"line\"><span class=\"comment\"># 原因是：你在合并该分支前，修改了某个文件并创建了新的版本，但是在此之前，</span></span><br><span class=\"line\"><span class=\"comment\"># 你要合并的这个分支也修改了这个文件并且也创建了新的提交版本，</span></span><br><span class=\"line\"><span class=\"comment\"># 因此，需要手动打开发生冲突的文件，这时git会标示出发生冲突的内容，</span></span><br><span class=\"line\"><span class=\"comment\"># 你可以根据需要，手动修改和解决冲突，并创建新版本提交</span></span><br><span class=\"line\"><span class=\"comment\"># 这样实际上版本已经合并保存提交了，这时可以删除分支了</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有冲突的非快速合并</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在合并分支时，没有发生冲突，但是此次合并不是快速合并，而是其他策略</span></span><br><span class=\"line\"><span class=\"comment\"># 原因是：你在其他分支新建了一个文件并提交，然后切换回主分支时，修改了某个文件并提交</span></span><br><span class=\"line\"><span class=\"comment\"># 在合并分支时，git会把分支新建的文件合并过来，然后进行一次提交，这时就不是快速提交了</span></span><br><span class=\"line\"><span class=\"comment\"># 因此，在此次合并时会自动提交一次，就需要我们输入提交的描述</span></span><br><span class=\"line\"><span class=\"comment\"># 输入描述后，ctrl+x退出 ，这样就合并好了</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline --graph  <span class=\"comment\"># 查看提交记录，会发现多了一次提交</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用快速合并的合并操作【git merge 默认是快速合并】</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff -m <span class=\"string\">\"提交描述\"</span> 分支名  <span class=\"comment\"># 禁用快速合并，会在合并后进行一次提交</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>保存工作现场</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash  <span class=\"comment\"># 保存当前分支的工作现场</span></span><br><span class=\"line\">git stash list  <span class=\"comment\"># 显示保存的工作现场</span></span><br><span class=\"line\">git stash pop  <span class=\"comment\"># 回到保存的工作现场</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拉取最新的版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin master:temp  <span class=\"comment\"># orgin是项目的拉取地址，</span></span><br><span class=\"line\"><span class=\"comment\"># master表示从项目的master分支拉取更新，temp表示创建temp分支并把拉取的更新放在temp分支中</span></span><br><span class=\"line\">git checkout master  <span class=\"comment\"># 切换到主分支master</span></span><br><span class=\"line\">git merge temp  <span class=\"comment\"># 把temp分支合并到master</span></span><br></pre></td></tr></table></figure>\n\n<p>强制推送本地库版本到远程库（用本地库的版本覆盖远程库）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f origin master</span><br><span class=\"line\"><span class=\"comment\"># -f 强制推送，origin是远程库的地址，master是指定的远程分支</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"三、GitHub的使用\"><a href=\"#三、GitHub的使用\" class=\"headerlink\" title=\"三、GitHub的使用\"></a>三、GitHub的使用</h4><ul>\n<li>从github克隆项目</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> ssh/https的克隆地址  <span class=\"comment\"># 把项目克隆到本地</span></span><br><span class=\"line\"><span class=\"comment\"># 如果克隆出错，执行命令:</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">ssh-add</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送分支到github</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin 分支名  <span class=\"comment\"># 把该分支推送到github仓库</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置本地分支跟踪远程服务器分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --<span class=\"built_in\">set</span>-upstream-to=origin/远程分支名 本地分支名  <span class=\"comment\"># 设置本地分支跟踪远程服务器分支</span></span><br><span class=\"line\">git push  <span class=\"comment\"># 设置本地分支跟踪远程服务器分支后，使用该本地分支推送时，直接使用 git push 就可以</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从远程分支拉取代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin 分支名  <span class=\"comment\"># 从远程分支拉取代码</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果是自己把项目上传的推送</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\">#把文件夹所有文件都添加</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"first commit\"</span>  </span><br><span class=\"line\">git push git@github.com:wooyee-ldq/chat-IM.git master  <span class=\"comment\"># 这里push后面的地址是仓库的ssh地址</span></span><br><span class=\"line\">git remote add origin git@github.com:wooyee-ldq/chat-IM.git  <span class=\"comment\"># 设置远程仓库名 为 origin</span></span><br><span class=\"line\">git remote rm origin <span class=\"comment\">#删除远程仓库</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Git的两大特点：\"><a href=\"#Git的两大特点：\" class=\"headerlink\" title=\"Git的两大特点：\"></a>Git的两大特点：</h3><ul>\n<li>版本控制：可以解决多人同时开发代码的问题，也可以解决找回历史代码的问题</li>\n<li>分布式：Git是分布式版本控制系统，同一个Git仓库，可以分不到不同的电脑上。其中有一台作为服务器，24小时开机，其他人都是从这个台服务器仓库克隆一份完整的版本到自己的电脑上，并且把各自的提交推送到服务器仓库里，也可以从拉取别人的提交。自己可以搭建这个服务器，也可以直接使用github。</li>\n</ul>\n<hr>\n<h4 id=\"一、Git的基本操作：\"><a href=\"#一、Git的基本操作：\" class=\"headerlink\" title=\"一、Git的基本操作：\"></a>一、Git的基本操作：</h4><ul>\n<li>安装git</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\">git --version  <span class=\"comment\"># 显示git的版本，可以测试是否安装成功</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 git init 初始化仓库 </li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir floder  <span class=\"comment\"># 创建一个文件夹，这个文件夹就是 工作区</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> floder  <span class=\"comment\"># 进入创建的文件夹</span></span><br><span class=\"line\">git init  <span class=\"comment\"># 初始化，为该文件夹创建git版本仓库</span></span><br><span class=\"line\"><span class=\"comment\"># 初始化仓库后，会生成一个 .git的隐藏文件夹，这个就是git的版本仓库，在版本仓库中有一个 暂存区【stage】</span></span><br><span class=\"line\">ls -lha</span><br><span class=\"line\">总用量 12K</span><br><span class=\"line\">drwxr-xr-x  3 wooyee wooyee 4.0K 8月  29 10:27 .</span><br><span class=\"line\">drwxrwxrwx 14 wooyee wooyee 4.0K 8月  27 21:18 ..</span><br><span class=\"line\">drwxr-xr-x  8 wooyee wooyee 4.0K 8月  29 10:27 .git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file_name  <span class=\"comment\"># 添加修改到暂存区</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"版本描述信息\"</span>  <span class=\"comment\"># 创建版本记录，在创建版本记录前，可以多次添加修改到暂存区</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：git commit -m \"版本描述信息\" 只是把暂存区的修改创建新版本，如果没有git add 的修改是无法创建新版本的</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看版本记录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit 4ab9d751962be7b9e6f658526ef92f7383926019 (HEAD -&gt; master)</span><br><span class=\"line\">Author: wooyee-ldq &lt;2632230944@qq.com&gt;</span><br><span class=\"line\">Date:   Sun Sep 29 10:18:58 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    版本2</span><br><span class=\"line\"></span><br><span class=\"line\">commit d6f250ffbc954465d9ac17ecdd70b913c6253b16  <span class=\"comment\"># 版本号</span></span><br><span class=\"line\">Author: wooyee-ldq &lt;2632230944@qq.com&gt;</span><br><span class=\"line\">Date:   Sun Sep 29 10:17:16 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    版本1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>版本回退：在git中，HEAD指针指向最新的版本，使用HEAD^或者HEAD～1表示最新版本的前一个版本，同理，HEAD^^或者HEAD～2表示最新版本的前两个版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^  <span class=\"comment\"># 回退到上一个版本</span></span><br><span class=\"line\">git reset --hard 版本号  <span class=\"comment\"># 回退到某个版本，回退版本时，原版本并不删除</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看操作记录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\"></span><br><span class=\"line\">d6f250f (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class=\"line\">4ab9d75 HEAD@&#123;1&#125;: commit: 版本2  <span class=\"comment\"># 最前面的号码就是版本的序列号，</span></span><br><span class=\"line\"><span class=\"comment\"># 可以通过这个命令查看过去版本的序列号，在使用 git reset --hard 版本号 回到某个版本</span></span><br><span class=\"line\">d6f250f (HEAD -&gt; master) HEAD@&#123;2&#125;: commit (initial): 版本1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看工作状态</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">未跟踪的文件:</span><br><span class=\"line\">  （使用 <span class=\"string\">\"git add &lt;文件&gt;...\"</span> 以包含要提交的内容）</span><br><span class=\"line\"></span><br><span class=\"line\">\tcode2.txt</span><br><span class=\"line\"></span><br><span class=\"line\">提交为空，但是存在尚未跟踪的文件（使用 <span class=\"string\">\"git add\"</span> 建立跟踪）</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>撤销修改</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果修改了文件，在git add 之前，你想撤销之前的修改，使用下面命令：</span></span><br><span class=\"line\">git checkout -- 文件名  <span class=\"comment\"># 丢弃改动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果修改了文件，并且已经使用 git add 添加到暂存区，但是还没git commit 创建新版本，要撤销文件的修改：</span></span><br><span class=\"line\">git reset HEAD 文件名 ...  <span class=\"comment\"># 取消暂存</span></span><br><span class=\"line\">git checkout -- 文件名  <span class=\"comment\"># 丢弃改动</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果修改的文件已经创建了新的版本，直接使用上面的版本回退就可以回到原来的版本了</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件对比：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比较工作区中的文件和某个版本有什么不同【比较的是同一个文件】：</span></span><br><span class=\"line\">git diff HEAD -- 文件名  <span class=\"comment\"># 这里的HEAD指的是版本，比如 HEAD^ 也可以</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较不同版本中同一个文件的不同：</span></span><br><span class=\"line\">git diff HEAD HEAD^ -- file_name  <span class=\"comment\"># 这里比较的是最新版本和前一个版本的 file_name这个文件的不同</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在工作区删除文件也是一种修改，如果在工作区删除了文件，可以使用 git checkout -- 文件名恢复文件</span></span><br><span class=\"line\"><span class=\"comment\"># 如果确实要删除文件，要使用 git rm 文件名来添加修改到暂存区，再使用git cmmit来保存新版本</span></span><br><span class=\"line\"><span class=\"comment\"># 在使用了 git rm 添加到暂存区后，还是可以使用git reset HEAD 文件名 来取消暂存，然后git checkout 恢复文件</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：如果你在删除了文件后，保存了新的版本，如果要找回原来的文件只能回退到文件还没有被删除的版本</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：如果新建的文件，还没有添加到过暂存区，如果删除了是不可以使用git 的管理来恢复文件的</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"二、Git分支管理\"><a href=\"#二、Git分支管理\" class=\"headerlink\" title=\"二、Git分支管理\"></a>二、Git分支管理</h4><ul>\n<li>查看当前有几个分支，并且在哪个分支下工作</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建新分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新分支</span></span><br><span class=\"line\">git branch 分支名</span><br><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout 分支名</span><br><span class=\"line\"><span class=\"comment\"># 创建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b dev  <span class=\"comment\"># 这里dev是创建的新分支名</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\">* dev  <span class=\"comment\"># *表示当前所在分支</span></span><br><span class=\"line\">  master</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout 分支名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>合并分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一般在主分支合并其他分支</span></span><br><span class=\"line\">git checkout master  <span class=\"comment\"># 切换到主分支</span></span><br><span class=\"line\">git merge 分支名  <span class=\"comment\"># 合并分支到当前分支</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意：一般在把分支合并之后再删除分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解决分支合并冲突</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 合并分支的时候，可能会发生合并冲突</span></span><br><span class=\"line\"><span class=\"comment\"># 原因是：你在合并该分支前，修改了某个文件并创建了新的版本，但是在此之前，</span></span><br><span class=\"line\"><span class=\"comment\"># 你要合并的这个分支也修改了这个文件并且也创建了新的提交版本，</span></span><br><span class=\"line\"><span class=\"comment\"># 因此，需要手动打开发生冲突的文件，这时git会标示出发生冲突的内容，</span></span><br><span class=\"line\"><span class=\"comment\"># 你可以根据需要，手动修改和解决冲突，并创建新版本提交</span></span><br><span class=\"line\"><span class=\"comment\"># 这样实际上版本已经合并保存提交了，这时可以删除分支了</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有冲突的非快速合并</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在合并分支时，没有发生冲突，但是此次合并不是快速合并，而是其他策略</span></span><br><span class=\"line\"><span class=\"comment\"># 原因是：你在其他分支新建了一个文件并提交，然后切换回主分支时，修改了某个文件并提交</span></span><br><span class=\"line\"><span class=\"comment\"># 在合并分支时，git会把分支新建的文件合并过来，然后进行一次提交，这时就不是快速提交了</span></span><br><span class=\"line\"><span class=\"comment\"># 因此，在此次合并时会自动提交一次，就需要我们输入提交的描述</span></span><br><span class=\"line\"><span class=\"comment\"># 输入描述后，ctrl+x退出 ，这样就合并好了</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline --graph  <span class=\"comment\"># 查看提交记录，会发现多了一次提交</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用快速合并的合并操作【git merge 默认是快速合并】</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --no-ff -m <span class=\"string\">\"提交描述\"</span> 分支名  <span class=\"comment\"># 禁用快速合并，会在合并后进行一次提交</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>保存工作现场</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash  <span class=\"comment\"># 保存当前分支的工作现场</span></span><br><span class=\"line\">git stash list  <span class=\"comment\"># 显示保存的工作现场</span></span><br><span class=\"line\">git stash pop  <span class=\"comment\"># 回到保存的工作现场</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拉取最新的版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin master:temp  <span class=\"comment\"># orgin是项目的拉取地址，</span></span><br><span class=\"line\"><span class=\"comment\"># master表示从项目的master分支拉取更新，temp表示创建temp分支并把拉取的更新放在temp分支中</span></span><br><span class=\"line\">git checkout master  <span class=\"comment\"># 切换到主分支master</span></span><br><span class=\"line\">git merge temp  <span class=\"comment\"># 把temp分支合并到master</span></span><br></pre></td></tr></table></figure>\n\n<p>强制推送本地库版本到远程库（用本地库的版本覆盖远程库）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f origin master</span><br><span class=\"line\"><span class=\"comment\"># -f 强制推送，origin是远程库的地址，master是指定的远程分支</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"三、GitHub的使用\"><a href=\"#三、GitHub的使用\" class=\"headerlink\" title=\"三、GitHub的使用\"></a>三、GitHub的使用</h4><ul>\n<li>从github克隆项目</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> ssh/https的克隆地址  <span class=\"comment\"># 把项目克隆到本地</span></span><br><span class=\"line\"><span class=\"comment\"># 如果克隆出错，执行命令:</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">ssh-add</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送分支到github</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin 分支名  <span class=\"comment\"># 把该分支推送到github仓库</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置本地分支跟踪远程服务器分支</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --<span class=\"built_in\">set</span>-upstream-to=origin/远程分支名 本地分支名  <span class=\"comment\"># 设置本地分支跟踪远程服务器分支</span></span><br><span class=\"line\">git push  <span class=\"comment\"># 设置本地分支跟踪远程服务器分支后，使用该本地分支推送时，直接使用 git push 就可以</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从远程分支拉取代码</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin 分支名  <span class=\"comment\"># 从远程分支拉取代码</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果是自己把项目上传的推送</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\">#把文件夹所有文件都添加</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"first commit\"</span>  </span><br><span class=\"line\">git push git@github.com:wooyee-ldq/chat-IM.git master  <span class=\"comment\"># 这里push后面的地址是仓库的ssh地址</span></span><br><span class=\"line\">git remote add origin git@github.com:wooyee-ldq/chat-IM.git  <span class=\"comment\"># 设置远程仓库名 为 origin</span></span><br><span class=\"line\">git remote rm origin <span class=\"comment\">#删除远程仓库</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"markdown语法编写博客文章","date":"2019-07-30T15:09:52.000Z","_content":"\n##  Markdown是一种可以使用普通文本编辑器编写的纯文本标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。读者在阅读该文章时如果还没搭建自己的个人博客，可以尝试阅读[使用hexo搭建个人博客并部署到github](https://wooyee-ldq.github.io/2019/07/30/使用hexo搭建个人博客并部署到github/)文章【推荐使用 typora 编辑器】\n\n## 1.斜体和粗体\n\n#### 代码：\n\n```markdown\n*斜体* 或者_斜体_\n**粗体**\n***加粗斜体***\n~~删除线~~\n注意：符号后面要空格！！！\n```\n\n#### 显示效果：\n\n*这是斜体* **或者** _这也是斜体_\n\n**这是粗体**\n\n***这是加粗斜体***\n\n~~这是删除线~~\n\n\n\n## 2.分级标题\n\n#### 代码：\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n```\n\n#### 显示效果：\n\n# 这是一个一级标题\n\n## 这是一个二级标题\n\n### 这是一个三级标题\n\n#### 这是一个四级标题\n\n##### 这是一个五级标题\n\n###### 这是一个六级标题\n\n\n\n## 3.超链接\n\n#### Markdown 支持两种形式的链接语法: 行内式和参考式两种形式,行内式一般使用较多。\n\n#### ①行内式代码：\n\n```bash\n语法：[链接文字](链接地址 \"链接标题\")\n[这是链接的文字](这是链接的地址 \"这是链接的标题\")\n链接标题可有可无，链接标题是鼠标悬停在链接上面时显示的文字标题（链接地址与链接标题前有一个空格）\n```\n\n#### 显示效果：\n\n[这是链接的文字](https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/ \"这是链接的标题\")\n\n#### ②参考式代码：\n\n```bash\n语法：[链接文字][链接标记]，，，然后在文档的任意地方写上：[链接标记]:链接地址 \"链接标题\"\n\t\t或者直接通过链接文字来填写地址，[链接文字][]，，，在文档写上[链接文字]:链接地址 这样的形式。。。\n[链接文字][链接标记]\n[链接标记]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/ \"markdown语法编写博客文章\"\n[链接文字其他形式][]\n[链接文字其他形式]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\n链接标题可有可无，链接标题是鼠标悬停在链接上面时显示的文字标题（链接地址与链接标题前有一个空格）\n参考式一般用在一些多次使用到的链接，比如写论文时的一些引用。\n```\n\n#### 显示效果：\n\n[链接文字][链接标记]\n\n[链接标记]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/ \"markdown语法编写博客文章\"\n\n[链接文字其他形式][]\n\n[链接文字其他形式]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\n\n#### ③自动链接：\n\n```bash\n语法：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，通过使用<>来把链接地址括起来，\n\t\tmarkdown会自动形成链接，链接文字对应就是链接地址。\n<https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/>\n<123456@qq.com>\n```\n\n#### 显示效果：\n\n<https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/>\n<123456@qq.com>\n\n## 4.锚点\n\n#### 在网⻚中,锚点其实就是⻚内超链接,也就是链接本文档内部的某些元素,实现当前⻚面中的跳转，也就是对当前页面某个位置的定位，通过锚点可以快速定位到当前页面的某个位置，常用于类似置顶功能。\n\n#### 代码：\n\n```bash\n语法：标题后面{#锚点}  (注意: Markdown Extra 只支持在标题后插入锚点,其它地方无效。)\n## 1.标题{#锚点}  (这种形式亲测在hexo好像不支持，系统会报错导致无法编译和运行服务，如有大神了解请赐教)\t\t\n所以换成了html的语法形式可以使用：(锚点名称不可使用中文！！！)\n<a name = \"maodian\">1. 标题</a>\n占位...\n... \n...\n跳转到[标题](#maodian)\n\n或者：\n<a name = \"maodian\">1. 标题</a>\n占位...\n... \n...\n跳转到<a href = \"#maodian\">1. 标题</a>\n```\n\n#### 显示效果：\n\n#### <a name = \"maodian\">1. 标题</a>\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n#### 跳转到[1.标题](#maodian)\n\n## 5.列表\n\n#### ①无序列表：使用 * , + , - 来表示无序列表（符号后面空格）\n\n#### 代码：\n\n```bash\n* 无序列表一\n+ 无序列表二\n- 无序列表三\n```\n\n#### 显示效果：\n\n* 无序列表一\n+ 无序列表二\n\n- 无序列表三\n\n#### ②有序列表：使用数字接着一个英文句点来表示(. 号后面要空格)\n\n#### 代码：\n\n```bash\n1. 有序列表一\n2. 有序列表二\n3. 有序列表三\n```\n\n#### 显示效果:\n\n1. 有序列表一\n2. 有序列表二\n3. 有序列表三\n\n#### ③定义型列表：定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释，第二行解释使用　：号后一个ｔａｂ键后开始写解释。\n\n#### 代码：\n\n```bash\n定义型列表\n:\t定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释\nmarkdown\n:\t轻量级文本标记语言,可以转换成html,pdf等格式\n```\n\n#### 显示效果：（要在网页才看得出，在typora编辑器无效果显示）\n\n定义型列表\n:\t定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释\n\nmarkdown\n:\t轻量级文本标记语言,可以转换成html,pdf等格式\n\n#### ④列表缩进：列表项目标记一般在行的最左，但也可以缩进（最多三个空格）\n\n代码：\n\n```bash\n   * 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。\n   随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？\n   心向往之，然高山仰止。\n   + 随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。\n   当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风\n   少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手\n   中的线，深谙原来还有一线牵连。\n   - 月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳\n   垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。\n   如今不得语，唯有暗相思。一日不思量，也攒眉千度。\n```\n\n#### 显示效果：\n\n* 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。\n   随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？\n   心向往之，然高山仰止。\n   \n   \n\n  + 随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。\n      当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风\n      少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手\n      中的线，深谙原来还有一线牵连。\n  \n  \n   - 月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳\n      垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。\n      如今不得语，唯有暗相思。一日不思量，也攒眉千度。\n\n\n\n#### ⑤包含段落的列表：添加的段落必须以四个空格或者一个制表符开头\n\n#### 代码：\n\n```bash\n\t+ 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。\n   随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？\n   心向往之，然高山仰止。\n   \n    随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。\n当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风\n   少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手\n   中的线，深谙原来还有一线牵连。\n   \n   月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳\n垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。\n   如今不得语，唯有暗相思。一日不思量，也攒眉千度。\n\n```\n\n#### 显示效果：\n\n+ 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。\n   随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？\n   心向往之，然高山仰止。\n   \n    随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。\n当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风\n   少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手\n   中的线，深谙原来还有一线牵连。\n   \n   月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳\n垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。\n   如今不得语，唯有暗相思。一日不思量，也攒眉千度。\n   \n   \n\n#### ⑥包含引用的列表：引用标记 > 需要缩进\n\n#### 代码：\n\n```bash\n* 包含引用的列表\n\t>引用一\n\t>引用二\n```\n\n#### 显示效果：\n\n* 包含引用的列表\n\t>引用一\n\t>引用二\n\n#### ⑦包含代码区块的列表：代码区块需要缩进两次,就是 8 个空格或是 2 个制表符\n\n#### 代码：\n\n```bash\n* 一个列表项包含一个列表代码区块\n\t\t<这里写代码>\n```\n\n#### 显示效果：\n\n* 一个列表项包含一个列表代码区块\n\t\t<这里写代码>\n\n#### ⑧注意特殊格式：数字句点空白(空格)　这样的格式开头，要在句点( . )前加上 \\ 来转义\n\n#### 代码：\n\n```bash\n1. 未加 \\ 的例子\n2\\. 添加 \\ 的例子\n```\n\n#### 显示效果：\n\n1. 未加 \\ 的栗子\n\n２\\.添加 \\ 的栗子\n\n\n\n## 6.引用\n\n#### 语法：在被引用的文本前加上 > 符号\n\n#### 代码：\n\n```bash\n>这是一个有两段的的引用\n>第一段的文字\n>第一段的文字\n>\n>第二段的文字\n>第二段的文字\n\n**或者：**\n>这是一个有两段的的引用\n第一段的文字\n第一段的文字\n\n>第二段的文字\n第二段的文字\n```\n\n#### 显示效果：\n\n>这是一个有两段的的引用\n>第一段的文字\n>第一段的文字\n>\n>第二段的文字\n>第二段的文字\n\n**或者：**\n\n>这是一个有两段的的引用\n>第一段的文字\n>第一段的文字\n\n>第二段的文字\n>第二段的文字\n\n#### 引用的多层嵌套\n\n#### 代码：\n\n```bash\n>请问怎么用ｍａｒｋｄｏｗｎ编写博客文章？——小白\n>>可以自己看这个教程学习的呢，亲！——新手\n>>>谢谢，这个教程看起来很不错！——小白\n【本人觉得 > 的数量其实是控制了字体的大小，数量越多越大】\n```\n\n#### 显示效果：（把 > 的数量排列从多到少就是平常的嵌套）\n\n>请问怎么用ｍａｒｋｄｏｗｎ编写博客文章？——小白\n>>可以自己看这个教程学习的呢，亲！——新手\n>>\n>>>谢谢，这个教程看起来很不错！——小白\n\n\n\n#### 引用其他要素：标题、列表、代码区块等...\n\n#### 代码：\n\n```ruby\n> * 第一行列表项\n> 2. 第二行列表项\n>下面是一些代码：\n>\n>\t\tprintf(\"Hello World !\");\n```\n\n#### 显示效果：\n\n> * 第一行列表项\n\n> 2. 第二行列表项\n\n>下面是一些代码：\n>\n>\t\tprintf(\"Hello World !\");\n\n## 7.插入图像\n\n#### 语法：图片的创建方式与超链接相似，也有行内式和参考式两种写法。\n\n#### 行内式语法：![图片alt](图片地址  \"图片title ) \n\n#### 参考式语法：在要引入图片的地方写![图片alt][标记]和在文档最后写[标记]:图片地址 \"title\"\n\n---\n\n#### 以上两种方式为markdown的语法形式，但在hexo 3.x版本中使用存在问题，详情可以参考hexo官方给出的使用说明[资源文件夹](https://hexo.io/zh-cn/docs/asset-folders) ,这里不再细讲，直接给出hexo的语法和示例。\n\n#### 使用标签插件引入资源：(只适用于hexo框架编辑文章，否则要使用上面markdown的语法)\n\n```bash\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n#### 有关标签插件的使用方法，读者可以参考官方文档[标签插件](<https://hexo.io/zh-cn/docs/tag-plugins>)来了解使用方法。\n\n#### 代码：\n\n```bash\n语法：{% asset_img example.jpg This is an example image %}\n{% asset_img 图片名称.jpg [width] [height] [title] %}\n{% asset_img bz16.jpg This is a picture. %}\n```\n\n#### 显示效果：(注意：使用标签插件引入，在 typora 编辑器不显示图片)\n\n{% asset_img bz16.jpg This is a picture. %}\n\n\n\n## 8.分割线\n\n#### 3个或者3个以上的 - 或 * 便是分割线\n\n#### 代码：\n\n```bash\n---\n***\n-------\n******\n```\n\n#### 显示效果：(效果都是一样的)\n\n---\n\n***\n\n---------\n\n******\n\n## 9.表格\n\n#### 代码：\n\n```bash\n语法：表头1|表头2|表头3\n\t\t\t-|:-:|-:\n\t\t\t内容|内容|内容\n\t\t\t内容|内容|内容\n\t\t\t\nmarkdown原生的语法两边都要用 | 来包起来，这里是简写。\n- 有一个就行，也可以多加了几个使得对齐\n文字默认居左\n-两边加:表示文字居中\n-右边加:表示文字居右\n```\n\n#### 显示效果：\n\n表头1|表头2|表头3\n\t\t\t-|:-:|-:\n\t\t\t内容|内容|内容\n\t\t\t内容|内容|内容\n\n\n\n## 10.代码\n\n#### 代码：\n\n```\n 语法：\n 单行代码：` printf(\"Hello World!\"); `\n 多行代码：``` printf(\"Hello World!\"); \n                       \t\t   printf(\"Hello World!\"); ```【多行代码也就是代码块】\n```\n\n#### 显示效果：\n\n`printf(\"Hello World!\"); `\n\n```bash\nprintf(\"Hello World!\");  \nprintf(\"Hello World!\");\n```\n\n\n\n## 11.流程图\n\n#### 代码：\n\n```bash\n（```）flow\nst=>start: 开始\nop=>operation: Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n&（```）\n在markdown语法中\" ``` \"是没有括号的，这里是为了方便显示\n```\n```bash\n（```）flow\nst=>start: 开始\nio=>inputoutput: 验证\nop=>operation: 选项\ncond=>condition: 是 或 否?\nsub=>subroutine: 子程序\ne=>end: 结束\nst->io->op->cond\ncond(yes)->e\ncond(no)->sub->io\n&（```）\n在markdown语法中\" ``` \"是没有括号的，这里是为了方便显示\n```\n#### 显示效果：\n\n{% asset_img 流程图.png 流程图%}\n\n\n\n## 12.HTML原始代码\n\n#### 只要把html代码直接复制粘贴到md文件中，markdown会自动识别转换成对应的html元素（也可以直接编写html代码）\n\n#### 代码：\n\n```html\n<form action = \"#\" method = \"post\">\n    <input type = \"text\" name = \"text\" placeholder = \"这是一个文本框\">\n    <input type = \"button\" name = \"button\" value = \"按钮\">\n</form>\n```\n\n#### 显示效果：\n\n<form action = \"#\" method = \"post\">\n    <input type = \"text\" name = \"text\" placeholder = \"这是一个文本框\">\n    <input type = \"button\" name = \"button\" value = \"按钮\">\n</form>\n\n\n---\n\n## 以上是markdown的一些基本语法，在一般的博文编写中都可以完成。是不是很想自己编写博客了，还不现在就开始动手！！！\n\n\n\n\n\n\n","source":"_posts/markdown语法编写博客文章.md","raw":"---\ntitle: markdown语法编写博客文章\ndate: 2019-07-30 23:09:52\ntags: [\"Hexo\",\"markdown\"]\n---\n\n##  Markdown是一种可以使用普通文本编辑器编写的纯文本标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。读者在阅读该文章时如果还没搭建自己的个人博客，可以尝试阅读[使用hexo搭建个人博客并部署到github](https://wooyee-ldq.github.io/2019/07/30/使用hexo搭建个人博客并部署到github/)文章【推荐使用 typora 编辑器】\n\n## 1.斜体和粗体\n\n#### 代码：\n\n```markdown\n*斜体* 或者_斜体_\n**粗体**\n***加粗斜体***\n~~删除线~~\n注意：符号后面要空格！！！\n```\n\n#### 显示效果：\n\n*这是斜体* **或者** _这也是斜体_\n\n**这是粗体**\n\n***这是加粗斜体***\n\n~~这是删除线~~\n\n\n\n## 2.分级标题\n\n#### 代码：\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n```\n\n#### 显示效果：\n\n# 这是一个一级标题\n\n## 这是一个二级标题\n\n### 这是一个三级标题\n\n#### 这是一个四级标题\n\n##### 这是一个五级标题\n\n###### 这是一个六级标题\n\n\n\n## 3.超链接\n\n#### Markdown 支持两种形式的链接语法: 行内式和参考式两种形式,行内式一般使用较多。\n\n#### ①行内式代码：\n\n```bash\n语法：[链接文字](链接地址 \"链接标题\")\n[这是链接的文字](这是链接的地址 \"这是链接的标题\")\n链接标题可有可无，链接标题是鼠标悬停在链接上面时显示的文字标题（链接地址与链接标题前有一个空格）\n```\n\n#### 显示效果：\n\n[这是链接的文字](https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/ \"这是链接的标题\")\n\n#### ②参考式代码：\n\n```bash\n语法：[链接文字][链接标记]，，，然后在文档的任意地方写上：[链接标记]:链接地址 \"链接标题\"\n\t\t或者直接通过链接文字来填写地址，[链接文字][]，，，在文档写上[链接文字]:链接地址 这样的形式。。。\n[链接文字][链接标记]\n[链接标记]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/ \"markdown语法编写博客文章\"\n[链接文字其他形式][]\n[链接文字其他形式]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\n链接标题可有可无，链接标题是鼠标悬停在链接上面时显示的文字标题（链接地址与链接标题前有一个空格）\n参考式一般用在一些多次使用到的链接，比如写论文时的一些引用。\n```\n\n#### 显示效果：\n\n[链接文字][链接标记]\n\n[链接标记]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/ \"markdown语法编写博客文章\"\n\n[链接文字其他形式][]\n\n[链接文字其他形式]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\n\n#### ③自动链接：\n\n```bash\n语法：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，通过使用<>来把链接地址括起来，\n\t\tmarkdown会自动形成链接，链接文字对应就是链接地址。\n<https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/>\n<123456@qq.com>\n```\n\n#### 显示效果：\n\n<https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/>\n<123456@qq.com>\n\n## 4.锚点\n\n#### 在网⻚中,锚点其实就是⻚内超链接,也就是链接本文档内部的某些元素,实现当前⻚面中的跳转，也就是对当前页面某个位置的定位，通过锚点可以快速定位到当前页面的某个位置，常用于类似置顶功能。\n\n#### 代码：\n\n```bash\n语法：标题后面{#锚点}  (注意: Markdown Extra 只支持在标题后插入锚点,其它地方无效。)\n## 1.标题{#锚点}  (这种形式亲测在hexo好像不支持，系统会报错导致无法编译和运行服务，如有大神了解请赐教)\t\t\n所以换成了html的语法形式可以使用：(锚点名称不可使用中文！！！)\n<a name = \"maodian\">1. 标题</a>\n占位...\n... \n...\n跳转到[标题](#maodian)\n\n或者：\n<a name = \"maodian\">1. 标题</a>\n占位...\n... \n...\n跳转到<a href = \"#maodian\">1. 标题</a>\n```\n\n#### 显示效果：\n\n#### <a name = \"maodian\">1. 标题</a>\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n占位...\n\n#### 跳转到[1.标题](#maodian)\n\n## 5.列表\n\n#### ①无序列表：使用 * , + , - 来表示无序列表（符号后面空格）\n\n#### 代码：\n\n```bash\n* 无序列表一\n+ 无序列表二\n- 无序列表三\n```\n\n#### 显示效果：\n\n* 无序列表一\n+ 无序列表二\n\n- 无序列表三\n\n#### ②有序列表：使用数字接着一个英文句点来表示(. 号后面要空格)\n\n#### 代码：\n\n```bash\n1. 有序列表一\n2. 有序列表二\n3. 有序列表三\n```\n\n#### 显示效果:\n\n1. 有序列表一\n2. 有序列表二\n3. 有序列表三\n\n#### ③定义型列表：定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释，第二行解释使用　：号后一个ｔａｂ键后开始写解释。\n\n#### 代码：\n\n```bash\n定义型列表\n:\t定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释\nmarkdown\n:\t轻量级文本标记语言,可以转换成html,pdf等格式\n```\n\n#### 显示效果：（要在网页才看得出，在typora编辑器无效果显示）\n\n定义型列表\n:\t定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释\n\nmarkdown\n:\t轻量级文本标记语言,可以转换成html,pdf等格式\n\n#### ④列表缩进：列表项目标记一般在行的最左，但也可以缩进（最多三个空格）\n\n代码：\n\n```bash\n   * 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。\n   随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？\n   心向往之，然高山仰止。\n   + 随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。\n   当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风\n   少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手\n   中的线，深谙原来还有一线牵连。\n   - 月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳\n   垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。\n   如今不得语，唯有暗相思。一日不思量，也攒眉千度。\n```\n\n#### 显示效果：\n\n* 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。\n   随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？\n   心向往之，然高山仰止。\n   \n   \n\n  + 随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。\n      当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风\n      少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手\n      中的线，深谙原来还有一线牵连。\n  \n  \n   - 月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳\n      垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。\n      如今不得语，唯有暗相思。一日不思量，也攒眉千度。\n\n\n\n#### ⑤包含段落的列表：添加的段落必须以四个空格或者一个制表符开头\n\n#### 代码：\n\n```bash\n\t+ 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。\n   随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？\n   心向往之，然高山仰止。\n   \n    随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。\n当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风\n   少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手\n   中的线，深谙原来还有一线牵连。\n   \n   月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳\n垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。\n   如今不得语，唯有暗相思。一日不思量，也攒眉千度。\n\n```\n\n#### 显示效果：\n\n+ 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。\n   随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？\n   心向往之，然高山仰止。\n   \n    随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。\n当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风\n   少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手\n   中的线，深谙原来还有一线牵连。\n   \n   月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳\n垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。\n   如今不得语，唯有暗相思。一日不思量，也攒眉千度。\n   \n   \n\n#### ⑥包含引用的列表：引用标记 > 需要缩进\n\n#### 代码：\n\n```bash\n* 包含引用的列表\n\t>引用一\n\t>引用二\n```\n\n#### 显示效果：\n\n* 包含引用的列表\n\t>引用一\n\t>引用二\n\n#### ⑦包含代码区块的列表：代码区块需要缩进两次,就是 8 个空格或是 2 个制表符\n\n#### 代码：\n\n```bash\n* 一个列表项包含一个列表代码区块\n\t\t<这里写代码>\n```\n\n#### 显示效果：\n\n* 一个列表项包含一个列表代码区块\n\t\t<这里写代码>\n\n#### ⑧注意特殊格式：数字句点空白(空格)　这样的格式开头，要在句点( . )前加上 \\ 来转义\n\n#### 代码：\n\n```bash\n1. 未加 \\ 的例子\n2\\. 添加 \\ 的例子\n```\n\n#### 显示效果：\n\n1. 未加 \\ 的栗子\n\n２\\.添加 \\ 的栗子\n\n\n\n## 6.引用\n\n#### 语法：在被引用的文本前加上 > 符号\n\n#### 代码：\n\n```bash\n>这是一个有两段的的引用\n>第一段的文字\n>第一段的文字\n>\n>第二段的文字\n>第二段的文字\n\n**或者：**\n>这是一个有两段的的引用\n第一段的文字\n第一段的文字\n\n>第二段的文字\n第二段的文字\n```\n\n#### 显示效果：\n\n>这是一个有两段的的引用\n>第一段的文字\n>第一段的文字\n>\n>第二段的文字\n>第二段的文字\n\n**或者：**\n\n>这是一个有两段的的引用\n>第一段的文字\n>第一段的文字\n\n>第二段的文字\n>第二段的文字\n\n#### 引用的多层嵌套\n\n#### 代码：\n\n```bash\n>请问怎么用ｍａｒｋｄｏｗｎ编写博客文章？——小白\n>>可以自己看这个教程学习的呢，亲！——新手\n>>>谢谢，这个教程看起来很不错！——小白\n【本人觉得 > 的数量其实是控制了字体的大小，数量越多越大】\n```\n\n#### 显示效果：（把 > 的数量排列从多到少就是平常的嵌套）\n\n>请问怎么用ｍａｒｋｄｏｗｎ编写博客文章？——小白\n>>可以自己看这个教程学习的呢，亲！——新手\n>>\n>>>谢谢，这个教程看起来很不错！——小白\n\n\n\n#### 引用其他要素：标题、列表、代码区块等...\n\n#### 代码：\n\n```ruby\n> * 第一行列表项\n> 2. 第二行列表项\n>下面是一些代码：\n>\n>\t\tprintf(\"Hello World !\");\n```\n\n#### 显示效果：\n\n> * 第一行列表项\n\n> 2. 第二行列表项\n\n>下面是一些代码：\n>\n>\t\tprintf(\"Hello World !\");\n\n## 7.插入图像\n\n#### 语法：图片的创建方式与超链接相似，也有行内式和参考式两种写法。\n\n#### 行内式语法：![图片alt](图片地址  \"图片title ) \n\n#### 参考式语法：在要引入图片的地方写![图片alt][标记]和在文档最后写[标记]:图片地址 \"title\"\n\n---\n\n#### 以上两种方式为markdown的语法形式，但在hexo 3.x版本中使用存在问题，详情可以参考hexo官方给出的使用说明[资源文件夹](https://hexo.io/zh-cn/docs/asset-folders) ,这里不再细讲，直接给出hexo的语法和示例。\n\n#### 使用标签插件引入资源：(只适用于hexo框架编辑文章，否则要使用上面markdown的语法)\n\n```bash\n{% asset_path slug %}\n{% asset_img slug [title] %}\n{% asset_link slug [title] %}\n```\n\n#### 有关标签插件的使用方法，读者可以参考官方文档[标签插件](<https://hexo.io/zh-cn/docs/tag-plugins>)来了解使用方法。\n\n#### 代码：\n\n```bash\n语法：{% asset_img example.jpg This is an example image %}\n{% asset_img 图片名称.jpg [width] [height] [title] %}\n{% asset_img bz16.jpg This is a picture. %}\n```\n\n#### 显示效果：(注意：使用标签插件引入，在 typora 编辑器不显示图片)\n\n{% asset_img bz16.jpg This is a picture. %}\n\n\n\n## 8.分割线\n\n#### 3个或者3个以上的 - 或 * 便是分割线\n\n#### 代码：\n\n```bash\n---\n***\n-------\n******\n```\n\n#### 显示效果：(效果都是一样的)\n\n---\n\n***\n\n---------\n\n******\n\n## 9.表格\n\n#### 代码：\n\n```bash\n语法：表头1|表头2|表头3\n\t\t\t-|:-:|-:\n\t\t\t内容|内容|内容\n\t\t\t内容|内容|内容\n\t\t\t\nmarkdown原生的语法两边都要用 | 来包起来，这里是简写。\n- 有一个就行，也可以多加了几个使得对齐\n文字默认居左\n-两边加:表示文字居中\n-右边加:表示文字居右\n```\n\n#### 显示效果：\n\n表头1|表头2|表头3\n\t\t\t-|:-:|-:\n\t\t\t内容|内容|内容\n\t\t\t内容|内容|内容\n\n\n\n## 10.代码\n\n#### 代码：\n\n```\n 语法：\n 单行代码：` printf(\"Hello World!\"); `\n 多行代码：``` printf(\"Hello World!\"); \n                       \t\t   printf(\"Hello World!\"); ```【多行代码也就是代码块】\n```\n\n#### 显示效果：\n\n`printf(\"Hello World!\"); `\n\n```bash\nprintf(\"Hello World!\");  \nprintf(\"Hello World!\");\n```\n\n\n\n## 11.流程图\n\n#### 代码：\n\n```bash\n（```）flow\nst=>start: 开始\nop=>operation: Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n&（```）\n在markdown语法中\" ``` \"是没有括号的，这里是为了方便显示\n```\n```bash\n（```）flow\nst=>start: 开始\nio=>inputoutput: 验证\nop=>operation: 选项\ncond=>condition: 是 或 否?\nsub=>subroutine: 子程序\ne=>end: 结束\nst->io->op->cond\ncond(yes)->e\ncond(no)->sub->io\n&（```）\n在markdown语法中\" ``` \"是没有括号的，这里是为了方便显示\n```\n#### 显示效果：\n\n{% asset_img 流程图.png 流程图%}\n\n\n\n## 12.HTML原始代码\n\n#### 只要把html代码直接复制粘贴到md文件中，markdown会自动识别转换成对应的html元素（也可以直接编写html代码）\n\n#### 代码：\n\n```html\n<form action = \"#\" method = \"post\">\n    <input type = \"text\" name = \"text\" placeholder = \"这是一个文本框\">\n    <input type = \"button\" name = \"button\" value = \"按钮\">\n</form>\n```\n\n#### 显示效果：\n\n<form action = \"#\" method = \"post\">\n    <input type = \"text\" name = \"text\" placeholder = \"这是一个文本框\">\n    <input type = \"button\" name = \"button\" value = \"按钮\">\n</form>\n\n\n---\n\n## 以上是markdown的一些基本语法，在一般的博文编写中都可以完成。是不是很想自己编写博客了，还不现在就开始动手！！！\n\n\n\n\n\n\n","slug":"markdown语法编写博客文章","published":1,"updated":"2019-08-07T12:55:26.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7h7001jggvku3qh5wke","content":"<h2 id=\"Markdown是一种可以使用普通文本编辑器编写的纯文本标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。读者在阅读该文章时如果还没搭建自己的个人博客，可以尝试阅读使用hexo搭建个人博客并部署到github文章【推荐使用-typora-编辑器】\"><a href=\"#Markdown是一种可以使用普通文本编辑器编写的纯文本标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。读者在阅读该文章时如果还没搭建自己的个人博客，可以尝试阅读使用hexo搭建个人博客并部署到github文章【推荐使用-typora-编辑器】\" class=\"headerlink\" title=\"Markdown是一种可以使用普通文本编辑器编写的纯文本标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。读者在阅读该文章时如果还没搭建自己的个人博客，可以尝试阅读使用hexo搭建个人博客并部署到github文章【推荐使用 typora 编辑器】\"></a>Markdown是一种可以使用普通文本编辑器编写的纯文本标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。读者在阅读该文章时如果还没搭建自己的个人博客，可以尝试阅读<a href=\"https://wooyee-ldq.github.io/2019/07/30/使用hexo搭建个人博客并部署到github/\" target=\"_blank\" rel=\"noopener\">使用hexo搭建个人博客并部署到github</a>文章【推荐使用 typora 编辑器】</h2><h2 id=\"1-斜体和粗体\"><a href=\"#1-斜体和粗体\" class=\"headerlink\" title=\"1.斜体和粗体\"></a>1.斜体和粗体</h2><h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体*</span> 或者<span class=\"emphasis\">_斜体_</span></span><br><span class=\"line\"><span class=\"strong\">**粗体**</span></span><br><span class=\"line\"><span class=\"strong\">***加粗斜体**</span>*</span><br><span class=\"line\">~~删除线~~</span><br><span class=\"line\">注意：符号后面要空格！！！</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：\"><a href=\"#显示效果：\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><p><em>这是斜体</em> <strong>或者</strong> <em>这也是斜体</em></p>\n<p><strong>这是粗体</strong></p>\n<p><strong><em>这是加粗斜体</em></strong></p>\n<p><del>这是删除线</del></p>\n<h2 id=\"2-分级标题\"><a href=\"#2-分级标题\" class=\"headerlink\" title=\"2.分级标题\"></a>2.分级标题</h2><h4 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-1\"><a href=\"#显示效果：-1\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><h1 id=\"这是一个一级标题\"><a href=\"#这是一个一级标题\" class=\"headerlink\" title=\"这是一个一级标题\"></a>这是一个一级标题</h1><h2 id=\"这是一个二级标题\"><a href=\"#这是一个二级标题\" class=\"headerlink\" title=\"这是一个二级标题\"></a>这是一个二级标题</h2><h3 id=\"这是一个三级标题\"><a href=\"#这是一个三级标题\" class=\"headerlink\" title=\"这是一个三级标题\"></a>这是一个三级标题</h3><h4 id=\"这是一个四级标题\"><a href=\"#这是一个四级标题\" class=\"headerlink\" title=\"这是一个四级标题\"></a>这是一个四级标题</h4><h5 id=\"这是一个五级标题\"><a href=\"#这是一个五级标题\" class=\"headerlink\" title=\"这是一个五级标题\"></a>这是一个五级标题</h5><h6 id=\"这是一个六级标题\"><a href=\"#这是一个六级标题\" class=\"headerlink\" title=\"这是一个六级标题\"></a>这是一个六级标题</h6><h2 id=\"3-超链接\"><a href=\"#3-超链接\" class=\"headerlink\" title=\"3.超链接\"></a>3.超链接</h2><h4 id=\"Markdown-支持两种形式的链接语法-行内式和参考式两种形式-行内式一般使用较多。\"><a href=\"#Markdown-支持两种形式的链接语法-行内式和参考式两种形式-行内式一般使用较多。\" class=\"headerlink\" title=\"Markdown 支持两种形式的链接语法: 行内式和参考式两种形式,行内式一般使用较多。\"></a>Markdown 支持两种形式的链接语法: 行内式和参考式两种形式,行内式一般使用较多。</h4><h4 id=\"①行内式代码：\"><a href=\"#①行内式代码：\" class=\"headerlink\" title=\"①行内式代码：\"></a>①行内式代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：[链接文字](链接地址 <span class=\"string\">\"链接标题\"</span>)</span><br><span class=\"line\">[这是链接的文字](这是链接的地址 <span class=\"string\">\"这是链接的标题\"</span>)</span><br><span class=\"line\">链接标题可有可无，链接标题是鼠标悬停在链接上面时显示的文字标题（链接地址与链接标题前有一个空格）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-2\"><a href=\"#显示效果：-2\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><p><a href=\"https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\" title=\"这是链接的标题\" target=\"_blank\" rel=\"noopener\">这是链接的文字</a></p>\n<h4 id=\"②参考式代码：\"><a href=\"#②参考式代码：\" class=\"headerlink\" title=\"②参考式代码：\"></a>②参考式代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：[链接文字][链接标记]，，，然后在文档的任意地方写上：[链接标记]:链接地址 <span class=\"string\">\"链接标题\"</span></span><br><span class=\"line\">\t\t或者直接通过链接文字来填写地址，[链接文字][]，，，在文档写上[链接文字]:链接地址 这样的形式。。。</span><br><span class=\"line\">[链接文字][链接标记]</span><br><span class=\"line\">[链接标记]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/ <span class=\"string\">\"markdown语法编写博客文章\"</span></span><br><span class=\"line\">[链接文字其他形式][]</span><br><span class=\"line\">[链接文字其他形式]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/</span><br><span class=\"line\">链接标题可有可无，链接标题是鼠标悬停在链接上面时显示的文字标题（链接地址与链接标题前有一个空格）</span><br><span class=\"line\">参考式一般用在一些多次使用到的链接，比如写论文时的一些引用。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-3\"><a href=\"#显示效果：-3\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><p><a href=\"https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\" title=\"markdown语法编写博客文章\" target=\"_blank\" rel=\"noopener\">链接文字</a></p>\n<p><a href=\"https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\" target=\"_blank\" rel=\"noopener\">链接文字其他形式</a></p>\n<h4 id=\"③自动链接：\"><a href=\"#③自动链接：\" class=\"headerlink\" title=\"③自动链接：\"></a>③自动链接：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，通过使用&lt;&gt;来把链接地址括起来，</span><br><span class=\"line\">\t\tmarkdown会自动形成链接，链接文字对应就是链接地址。</span><br><span class=\"line\">&lt;https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/&gt;</span><br><span class=\"line\">&lt;123456@qq.com&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-4\"><a href=\"#显示效果：-4\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><p><a href=\"https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\" target=\"_blank\" rel=\"noopener\">https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/</a><br><a href=\"mailto:&#x31;&#x32;&#51;&#52;&#53;&#x36;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#x31;&#x32;&#51;&#52;&#53;&#x36;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n<h2 id=\"4-锚点\"><a href=\"#4-锚点\" class=\"headerlink\" title=\"4.锚点\"></a>4.锚点</h2><h4 id=\"在网⻚中-锚点其实就是⻚内超链接-也就是链接本文档内部的某些元素-实现当前⻚面中的跳转，也就是对当前页面某个位置的定位，通过锚点可以快速定位到当前页面的某个位置，常用于类似置顶功能。\"><a href=\"#在网⻚中-锚点其实就是⻚内超链接-也就是链接本文档内部的某些元素-实现当前⻚面中的跳转，也就是对当前页面某个位置的定位，通过锚点可以快速定位到当前页面的某个位置，常用于类似置顶功能。\" class=\"headerlink\" title=\"在网⻚中,锚点其实就是⻚内超链接,也就是链接本文档内部的某些元素,实现当前⻚面中的跳转，也就是对当前页面某个位置的定位，通过锚点可以快速定位到当前页面的某个位置，常用于类似置顶功能。\"></a>在网⻚中,锚点其实就是⻚内超链接,也就是链接本文档内部的某些元素,实现当前⻚面中的跳转，也就是对当前页面某个位置的定位，通过锚点可以快速定位到当前页面的某个位置，常用于类似置顶功能。</h4><h4 id=\"代码：-2\"><a href=\"#代码：-2\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：标题后面&#123;<span class=\"comment\">#锚点&#125;  (注意: Markdown Extra 只支持在标题后插入锚点,其它地方无效。)</span></span><br><span class=\"line\"><span class=\"comment\">## 1.标题&#123;#锚点&#125;  (这种形式亲测在hexo好像不支持，系统会报错导致无法编译和运行服务，如有大神了解请赐教)\t\t</span></span><br><span class=\"line\">所以换成了html的语法形式可以使用：(锚点名称不可使用中文！！！)</span><br><span class=\"line\">&lt;a name = <span class=\"string\">\"maodian\"</span>&gt;1. 标题&lt;/a&gt;</span><br><span class=\"line\">占位...</span><br><span class=\"line\">... </span><br><span class=\"line\">...</span><br><span class=\"line\">跳转到[标题](<span class=\"comment\">#maodian)</span></span><br><span class=\"line\"></span><br><span class=\"line\">或者：</span><br><span class=\"line\">&lt;a name = <span class=\"string\">\"maodian\"</span>&gt;1. 标题&lt;/a&gt;</span><br><span class=\"line\">占位...</span><br><span class=\"line\">... </span><br><span class=\"line\">...</span><br><span class=\"line\">跳转到&lt;a href = <span class=\"string\">\"#maodian\"</span>&gt;1. 标题&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-5\"><a href=\"#显示效果：-5\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><h4 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1. 标题\"></a><a name=\"maodian\">1. 标题</a></h4><p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<h4 id=\"跳转到1-标题\"><a href=\"#跳转到1-标题\" class=\"headerlink\" title=\"跳转到1.标题\"></a>跳转到<a href=\"#maodian\">1.标题</a></h4><h2 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5.列表\"></a>5.列表</h2><h4 id=\"①无序列表：使用-来表示无序列表（符号后面空格）\"><a href=\"#①无序列表：使用-来表示无序列表（符号后面空格）\" class=\"headerlink\" title=\"①无序列表：使用 * , + , - 来表示无序列表（符号后面空格）\"></a>①无序列表：使用 * , + , - 来表示无序列表（符号后面空格）</h4><h4 id=\"代码：-3\"><a href=\"#代码：-3\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无序列表一</span><br><span class=\"line\">+ 无序列表二</span><br><span class=\"line\">- 无序列表三</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-6\"><a href=\"#显示效果：-6\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ul>\n<li>无序列表一</li>\n</ul>\n<ul>\n<li>无序列表二</li>\n</ul>\n<ul>\n<li>无序列表三</li>\n</ul>\n<h4 id=\"②有序列表：使用数字接着一个英文句点来表示-号后面要空格\"><a href=\"#②有序列表：使用数字接着一个英文句点来表示-号后面要空格\" class=\"headerlink\" title=\"②有序列表：使用数字接着一个英文句点来表示(. 号后面要空格)\"></a>②有序列表：使用数字接着一个英文句点来表示(. 号后面要空格)</h4><h4 id=\"代码：-4\"><a href=\"#代码：-4\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 有序列表一</span><br><span class=\"line\">2. 有序列表二</span><br><span class=\"line\">3. 有序列表三</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果\"><a href=\"#显示效果\" class=\"headerlink\" title=\"显示效果:\"></a>显示效果:</h4><ol>\n<li>有序列表一</li>\n<li>有序列表二</li>\n<li>有序列表三</li>\n</ol>\n<h4 id=\"③定义型列表：定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释，第二行解释使用-：号后一个tab键后开始写解释。\"><a href=\"#③定义型列表：定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释，第二行解释使用-：号后一个tab键后开始写解释。\" class=\"headerlink\" title=\"③定义型列表：定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释，第二行解释使用　：号后一个ｔａｂ键后开始写解释。\"></a>③定义型列表：定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释，第二行解释使用　：号后一个ｔａｂ键后开始写解释。</h4><h4 id=\"代码：-5\"><a href=\"#代码：-5\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义型列表</span><br><span class=\"line\">:\t定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释</span><br><span class=\"line\">markdown</span><br><span class=\"line\">:\t轻量级文本标记语言,可以转换成html,pdf等格式</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：（要在网页才看得出，在typora编辑器无效果显示）\"><a href=\"#显示效果：（要在网页才看得出，在typora编辑器无效果显示）\" class=\"headerlink\" title=\"显示效果：（要在网页才看得出，在typora编辑器无效果显示）\"></a>显示效果：（要在网页才看得出，在typora编辑器无效果显示）</h4><dl><dt>定义型列表</dt><dd>定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释</dd></dl><dl><dt>markdown</dt><dd>轻量级文本标记语言,可以转换成html,pdf等格式</dd></dl><h4 id=\"④列表缩进：列表项目标记一般在行的最左，但也可以缩进（最多三个空格）\"><a href=\"#④列表缩进：列表项目标记一般在行的最左，但也可以缩进（最多三个空格）\" class=\"headerlink\" title=\"④列表缩进：列表项目标记一般在行的最左，但也可以缩进（最多三个空格）\"></a>④列表缩进：列表项目标记一般在行的最左，但也可以缩进（最多三个空格）</h4><p>代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。</span><br><span class=\"line\">随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？</span><br><span class=\"line\">心向往之，然高山仰止。</span><br><span class=\"line\">+ 随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。</span><br><span class=\"line\">当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风</span><br><span class=\"line\">少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手</span><br><span class=\"line\">中的线，深谙原来还有一线牵连。</span><br><span class=\"line\">- 月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳</span><br><span class=\"line\">垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。</span><br><span class=\"line\">如今不得语，唯有暗相思。一日不思量，也攒眉千度。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-7\"><a href=\"#显示效果：-7\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ul>\n<li>山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。<br> 随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？<br> 心向往之，然高山仰止。</li>\n</ul>\n<ul>\n<li>随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。<br>  当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风<br>  少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手<br>  中的线，深谙原来还有一线牵连。</li>\n</ul>\n<ul>\n<li>月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳<br> 垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。<br> 如今不得语，唯有暗相思。一日不思量，也攒眉千度。</li>\n</ul>\n<h4 id=\"⑤包含段落的列表：添加的段落必须以四个空格或者一个制表符开头\"><a href=\"#⑤包含段落的列表：添加的段落必须以四个空格或者一个制表符开头\" class=\"headerlink\" title=\"⑤包含段落的列表：添加的段落必须以四个空格或者一个制表符开头\"></a>⑤包含段落的列表：添加的段落必须以四个空格或者一个制表符开头</h4><h4 id=\"代码：-6\"><a href=\"#代码：-6\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t+ 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。</span><br><span class=\"line\">   随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？</span><br><span class=\"line\">   心向往之，然高山仰止。</span><br><span class=\"line\">   </span><br><span class=\"line\">    随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。</span><br><span class=\"line\">当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风</span><br><span class=\"line\">   少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手</span><br><span class=\"line\">   中的线，深谙原来还有一线牵连。</span><br><span class=\"line\">   </span><br><span class=\"line\">   月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳</span><br><span class=\"line\">垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。</span><br><span class=\"line\">   如今不得语，唯有暗相思。一日不思量，也攒眉千度。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-8\"><a href=\"#显示效果：-8\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ul>\n<li><p>山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。<br> 随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？<br> 心向往之，然高山仰止。</p>\n<p>  随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。<br>当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风<br> 少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手<br> 中的线，深谙原来还有一线牵连。</p>\n<p> 月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳<br>垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。<br> 如今不得语，唯有暗相思。一日不思量，也攒眉千度。</p>\n</li>\n</ul>\n<h4 id=\"⑥包含引用的列表：引用标记-gt-需要缩进\"><a href=\"#⑥包含引用的列表：引用标记-gt-需要缩进\" class=\"headerlink\" title=\"⑥包含引用的列表：引用标记 &gt; 需要缩进\"></a>⑥包含引用的列表：引用标记 &gt; 需要缩进</h4><h4 id=\"代码：-7\"><a href=\"#代码：-7\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 包含引用的列表</span><br><span class=\"line\">\t&gt;引用一</span><br><span class=\"line\">\t&gt;引用二</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-9\"><a href=\"#显示效果：-9\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ul>\n<li>包含引用的列表<blockquote>\n<p>引用一<br>引用二</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"⑦包含代码区块的列表：代码区块需要缩进两次-就是-8-个空格或是-2-个制表符\"><a href=\"#⑦包含代码区块的列表：代码区块需要缩进两次-就是-8-个空格或是-2-个制表符\" class=\"headerlink\" title=\"⑦包含代码区块的列表：代码区块需要缩进两次,就是 8 个空格或是 2 个制表符\"></a>⑦包含代码区块的列表：代码区块需要缩进两次,就是 8 个空格或是 2 个制表符</h4><h4 id=\"代码：-8\"><a href=\"#代码：-8\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 一个列表项包含一个列表代码区块</span><br><span class=\"line\">\t\t&lt;这里写代码&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-10\"><a href=\"#显示效果：-10\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ul>\n<li>一个列表项包含一个列表代码区块<pre><code>&lt;这里写代码&gt;</code></pre></li>\n</ul>\n<h4 id=\"⑧注意特殊格式：数字句点空白-空格-这样的格式开头，要在句点-前加上-来转义\"><a href=\"#⑧注意特殊格式：数字句点空白-空格-这样的格式开头，要在句点-前加上-来转义\" class=\"headerlink\" title=\"⑧注意特殊格式：数字句点空白(空格)　这样的格式开头，要在句点( . )前加上 \\ 来转义\"></a>⑧注意特殊格式：数字句点空白(空格)　这样的格式开头，要在句点( . )前加上 \\ 来转义</h4><h4 id=\"代码：-9\"><a href=\"#代码：-9\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 未加 \\ 的例子</span><br><span class=\"line\">2\\. 添加 \\ 的例子</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-11\"><a href=\"#显示效果：-11\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ol>\n<li>未加 \\ 的栗子</li>\n</ol>\n<p>２.添加 \\ 的栗子</p>\n<h2 id=\"6-引用\"><a href=\"#6-引用\" class=\"headerlink\" title=\"6.引用\"></a>6.引用</h2><h4 id=\"语法：在被引用的文本前加上-gt-符号\"><a href=\"#语法：在被引用的文本前加上-gt-符号\" class=\"headerlink\" title=\"语法：在被引用的文本前加上 &gt; 符号\"></a>语法：在被引用的文本前加上 &gt; 符号</h4><h4 id=\"代码：-10\"><a href=\"#代码：-10\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;这是一个有两段的的引用</span><br><span class=\"line\">&gt;第一段的文字</span><br><span class=\"line\">&gt;第一段的文字</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;第二段的文字</span><br><span class=\"line\">&gt;第二段的文字</span><br><span class=\"line\"></span><br><span class=\"line\">**或者：**</span><br><span class=\"line\">&gt;这是一个有两段的的引用</span><br><span class=\"line\">第一段的文字</span><br><span class=\"line\">第一段的文字</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;第二段的文字</span><br><span class=\"line\">第二段的文字</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-12\"><a href=\"#显示效果：-12\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><blockquote>\n<p>这是一个有两段的的引用<br>第一段的文字<br>第一段的文字</p>\n<p>第二段的文字<br>第二段的文字</p>\n</blockquote>\n<p><strong>或者：</strong></p>\n<blockquote>\n<p>这是一个有两段的的引用<br>第一段的文字<br>第一段的文字</p>\n</blockquote>\n<blockquote>\n<p>第二段的文字<br>第二段的文字</p>\n</blockquote>\n<h4 id=\"引用的多层嵌套\"><a href=\"#引用的多层嵌套\" class=\"headerlink\" title=\"引用的多层嵌套\"></a>引用的多层嵌套</h4><h4 id=\"代码：-11\"><a href=\"#代码：-11\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;请问怎么用ｍａｒｋｄｏｗｎ编写博客文章？——小白</span><br><span class=\"line\">&gt;&gt;可以自己看这个教程学习的呢，亲！——新手</span><br><span class=\"line\">&gt;&gt;&gt;谢谢，这个教程看起来很不错！——小白</span><br><span class=\"line\">【本人觉得 &gt; 的数量其实是控制了字体的大小，数量越多越大】</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：（把-gt-的数量排列从多到少就是平常的嵌套）\"><a href=\"#显示效果：（把-gt-的数量排列从多到少就是平常的嵌套）\" class=\"headerlink\" title=\"显示效果：（把 &gt; 的数量排列从多到少就是平常的嵌套）\"></a>显示效果：（把 &gt; 的数量排列从多到少就是平常的嵌套）</h4><blockquote>\n<p>请问怎么用ｍａｒｋｄｏｗｎ编写博客文章？——小白</p>\n<blockquote>\n<p>可以自己看这个教程学习的呢，亲！——新手</p>\n<blockquote>\n<p>谢谢，这个教程看起来很不错！——小白</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"引用其他要素：标题、列表、代码区块等…\"><a href=\"#引用其他要素：标题、列表、代码区块等…\" class=\"headerlink\" title=\"引用其他要素：标题、列表、代码区块等…\"></a>引用其他要素：标题、列表、代码区块等…</h4><h4 id=\"代码：-12\"><a href=\"#代码：-12\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; * 第一行列表项</span><br><span class=\"line\">&gt; <span class=\"number\">2</span>. 第二行列表项</span><br><span class=\"line\">&gt;下面是一些代码：</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;\t\tprintf(<span class=\"string\">\"Hello World !\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-13\"><a href=\"#显示效果：-13\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><blockquote>\n<ul>\n<li>第一行列表项</li>\n</ul>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>第二行列表项</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>下面是一些代码：</p>\n<pre><code>printf(&quot;Hello World !&quot;);</code></pre></blockquote>\n<h2 id=\"7-插入图像\"><a href=\"#7-插入图像\" class=\"headerlink\" title=\"7.插入图像\"></a>7.插入图像</h2><h4 id=\"语法：图片的创建方式与超链接相似，也有行内式和参考式两种写法。\"><a href=\"#语法：图片的创建方式与超链接相似，也有行内式和参考式两种写法。\" class=\"headerlink\" title=\"语法：图片的创建方式与超链接相似，也有行内式和参考式两种写法。\"></a>语法：图片的创建方式与超链接相似，也有行内式和参考式两种写法。</h4><h4 id=\"行内式语法：-图片alt-图片地址-“图片title\"><a href=\"#行内式语法：-图片alt-图片地址-“图片title\" class=\"headerlink\" title=\"行内式语法：![图片alt](图片地址  “图片title )\"></a>行内式语法：![图片alt](图片地址  “图片title )</h4><h4 id=\"参考式语法：在要引入图片的地方写-图片alt-标记-和在文档最后写-标记-图片地址-“title”\"><a href=\"#参考式语法：在要引入图片的地方写-图片alt-标记-和在文档最后写-标记-图片地址-“title”\" class=\"headerlink\" title=\"参考式语法：在要引入图片的地方写![图片alt][标记]和在文档最后写[标记]:图片地址 “title”\"></a>参考式语法：在要引入图片的地方写![图片alt][标记]和在文档最后写[标记]:图片地址 “title”</h4><hr>\n<h4 id=\"以上两种方式为markdown的语法形式，但在hexo-3-x版本中使用存在问题，详情可以参考hexo官方给出的使用说明资源文件夹-这里不再细讲，直接给出hexo的语法和示例。\"><a href=\"#以上两种方式为markdown的语法形式，但在hexo-3-x版本中使用存在问题，详情可以参考hexo官方给出的使用说明资源文件夹-这里不再细讲，直接给出hexo的语法和示例。\" class=\"headerlink\" title=\"以上两种方式为markdown的语法形式，但在hexo 3.x版本中使用存在问题，详情可以参考hexo官方给出的使用说明资源文件夹 ,这里不再细讲，直接给出hexo的语法和示例。\"></a>以上两种方式为markdown的语法形式，但在hexo 3.x版本中使用存在问题，详情可以参考hexo官方给出的使用说明<a href=\"https://hexo.io/zh-cn/docs/asset-folders\" target=\"_blank\" rel=\"noopener\">资源文件夹</a> ,这里不再细讲，直接给出hexo的语法和示例。</h4><h4 id=\"使用标签插件引入资源：-只适用于hexo框架编辑文章，否则要使用上面markdown的语法\"><a href=\"#使用标签插件引入资源：-只适用于hexo框架编辑文章，否则要使用上面markdown的语法\" class=\"headerlink\" title=\"使用标签插件引入资源：(只适用于hexo框架编辑文章，否则要使用上面markdown的语法)\"></a>使用标签插件引入资源：(只适用于hexo框架编辑文章，否则要使用上面markdown的语法)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"有关标签插件的使用方法，读者可以参考官方文档标签插件来了解使用方法。\"><a href=\"#有关标签插件的使用方法，读者可以参考官方文档标签插件来了解使用方法。\" class=\"headerlink\" title=\"有关标签插件的使用方法，读者可以参考官方文档标签插件来了解使用方法。\"></a>有关标签插件的使用方法，读者可以参考官方文档<a href=\"https://hexo.io/zh-cn/docs/tag-plugins\" target=\"_blank\" rel=\"noopener\">标签插件</a>来了解使用方法。</h4><h4 id=\"代码：-13\"><a href=\"#代码：-13\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：&#123;% asset_img example.jpg This is an example image %&#125;</span><br><span class=\"line\">&#123;% asset_img 图片名称.jpg [width] [height] [title] %&#125;</span><br><span class=\"line\">&#123;% asset_img bz16.jpg This is a picture. %&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-注意：使用标签插件引入，在-typora-编辑器不显示图片\"><a href=\"#显示效果：-注意：使用标签插件引入，在-typora-编辑器不显示图片\" class=\"headerlink\" title=\"显示效果：(注意：使用标签插件引入，在 typora 编辑器不显示图片)\"></a>显示效果：(注意：使用标签插件引入，在 typora 编辑器不显示图片)</h4><img src=\"/blog/markdown语法编写博客文章/bz16.jpg\" title=\"This is a picture.\">\n\n\n\n<h2 id=\"8-分割线\"><a href=\"#8-分割线\" class=\"headerlink\" title=\"8.分割线\"></a>8.分割线</h2><h4 id=\"3个或者3个以上的-或-便是分割线\"><a href=\"#3个或者3个以上的-或-便是分割线\" class=\"headerlink\" title=\"3个或者3个以上的 - 或 * 便是分割线\"></a>3个或者3个以上的 - 或 * 便是分割线</h4><h4 id=\"代码：-14\"><a href=\"#代码：-14\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">***</span><br><span class=\"line\">-------</span><br><span class=\"line\">******</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-效果都是一样的\"><a href=\"#显示效果：-效果都是一样的\" class=\"headerlink\" title=\"显示效果：(效果都是一样的)\"></a>显示效果：(效果都是一样的)</h4><hr>\n<hr>\n<hr>\n<hr>\n<h2 id=\"9-表格\"><a href=\"#9-表格\" class=\"headerlink\" title=\"9.表格\"></a>9.表格</h2><h4 id=\"代码：-15\"><a href=\"#代码：-15\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：表头1|表头2|表头3</span><br><span class=\"line\">\t\t\t-|:-:|-:</span><br><span class=\"line\">\t\t\t内容|内容|内容</span><br><span class=\"line\">\t\t\t内容|内容|内容</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">markdown原生的语法两边都要用 | 来包起来，这里是简写。</span><br><span class=\"line\">- 有一个就行，也可以多加了几个使得对齐</span><br><span class=\"line\">文字默认居左</span><br><span class=\"line\">-两边加:表示文字居中</span><br><span class=\"line\">-右边加:表示文字居右</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-14\"><a href=\"#显示效果：-14\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><table>\n<thead>\n<tr>\n<th>表头1</th>\n<th align=\"center\">表头2</th>\n<th align=\"right\">表头3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内容</td>\n<td align=\"center\">内容</td>\n<td align=\"right\">内容</td>\n</tr>\n<tr>\n<td>内容</td>\n<td align=\"center\">内容</td>\n<td align=\"right\">内容</td>\n</tr>\n</tbody></table>\n<h2 id=\"10-代码\"><a href=\"#10-代码\" class=\"headerlink\" title=\"10.代码\"></a>10.代码</h2><h4 id=\"代码：-16\"><a href=\"#代码：-16\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">单行代码：` printf(&quot;Hello World!&quot;); `</span><br><span class=\"line\">多行代码：``` printf(&quot;Hello World!&quot;); </span><br><span class=\"line\">                      \t\t   printf(&quot;Hello World!&quot;); ```【多行代码也就是代码块】</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-15\"><a href=\"#显示效果：-15\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><p><code>printf(&quot;Hello World!&quot;);</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\"</span>);  </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-流程图\"><a href=\"#11-流程图\" class=\"headerlink\" title=\"11.流程图\"></a>11.流程图</h2><h4 id=\"代码：-17\"><a href=\"#代码：-17\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（```）flow</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br><span class=\"line\">&amp;（```）</span><br><span class=\"line\">在markdown语法中<span class=\"string\">\" ``` \"</span>是没有括号的，这里是为了方便显示</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（```）flow</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">io=&gt;inputoutput: 验证</span><br><span class=\"line\">op=&gt;operation: 选项</span><br><span class=\"line\">cond=&gt;condition: 是 或 否?</span><br><span class=\"line\">sub=&gt;subroutine: 子程序</span><br><span class=\"line\">e=&gt;end: 结束</span><br><span class=\"line\">st-&gt;io-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;sub-&gt;io</span><br><span class=\"line\">&amp;（```）</span><br><span class=\"line\">在markdown语法中<span class=\"string\">\" ``` \"</span>是没有括号的，这里是为了方便显示</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-16\"><a href=\"#显示效果：-16\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><img src=\"/blog/markdown语法编写博客文章/流程图.png\" title=\"流程图\">\n\n\n\n<h2 id=\"12-HTML原始代码\"><a href=\"#12-HTML原始代码\" class=\"headerlink\" title=\"12.HTML原始代码\"></a>12.HTML原始代码</h2><h4 id=\"只要把html代码直接复制粘贴到md文件中，markdown会自动识别转换成对应的html元素（也可以直接编写html代码）\"><a href=\"#只要把html代码直接复制粘贴到md文件中，markdown会自动识别转换成对应的html元素（也可以直接编写html代码）\" class=\"headerlink\" title=\"只要把html代码直接复制粘贴到md文件中，markdown会自动识别转换成对应的html元素（也可以直接编写html代码）\"></a>只要把html代码直接复制粘贴到md文件中，markdown会自动识别转换成对应的html元素（也可以直接编写html代码）</h4><h4 id=\"代码：-18\"><a href=\"#代码：-18\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span> = <span class=\"string\">\"#\"</span> <span class=\"attr\">method</span> = <span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"text\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span> = <span class=\"string\">\"这是一个文本框\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"button\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"button\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"按钮\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-17\"><a href=\"#显示效果：-17\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><form action=\"#\" method=\"post\">\n    <input type=\"text\" name=\"text\" placeholder=\"这是一个文本框\">\n    <input type=\"button\" name=\"button\" value=\"按钮\">\n</form>\n\n\n<hr>\n<h2 id=\"以上是markdown的一些基本语法，在一般的博文编写中都可以完成。是不是很想自己编写博客了，还不现在就开始动手！！！\"><a href=\"#以上是markdown的一些基本语法，在一般的博文编写中都可以完成。是不是很想自己编写博客了，还不现在就开始动手！！！\" class=\"headerlink\" title=\"以上是markdown的一些基本语法，在一般的博文编写中都可以完成。是不是很想自己编写博客了，还不现在就开始动手！！！\"></a>以上是markdown的一些基本语法，在一般的博文编写中都可以完成。是不是很想自己编写博客了，还不现在就开始动手！！！</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Markdown是一种可以使用普通文本编辑器编写的纯文本标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。读者在阅读该文章时如果还没搭建自己的个人博客，可以尝试阅读使用hexo搭建个人博客并部署到github文章【推荐使用-typora-编辑器】\"><a href=\"#Markdown是一种可以使用普通文本编辑器编写的纯文本标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。读者在阅读该文章时如果还没搭建自己的个人博客，可以尝试阅读使用hexo搭建个人博客并部署到github文章【推荐使用-typora-编辑器】\" class=\"headerlink\" title=\"Markdown是一种可以使用普通文本编辑器编写的纯文本标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。读者在阅读该文章时如果还没搭建自己的个人博客，可以尝试阅读使用hexo搭建个人博客并部署到github文章【推荐使用 typora 编辑器】\"></a>Markdown是一种可以使用普通文本编辑器编写的纯文本标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。读者在阅读该文章时如果还没搭建自己的个人博客，可以尝试阅读<a href=\"https://wooyee-ldq.github.io/2019/07/30/使用hexo搭建个人博客并部署到github/\" target=\"_blank\" rel=\"noopener\">使用hexo搭建个人博客并部署到github</a>文章【推荐使用 typora 编辑器】</h2><h2 id=\"1-斜体和粗体\"><a href=\"#1-斜体和粗体\" class=\"headerlink\" title=\"1.斜体和粗体\"></a>1.斜体和粗体</h2><h4 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体*</span> 或者<span class=\"emphasis\">_斜体_</span></span><br><span class=\"line\"><span class=\"strong\">**粗体**</span></span><br><span class=\"line\"><span class=\"strong\">***加粗斜体**</span>*</span><br><span class=\"line\">~~删除线~~</span><br><span class=\"line\">注意：符号后面要空格！！！</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：\"><a href=\"#显示效果：\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><p><em>这是斜体</em> <strong>或者</strong> <em>这也是斜体</em></p>\n<p><strong>这是粗体</strong></p>\n<p><strong><em>这是加粗斜体</em></strong></p>\n<p><del>这是删除线</del></p>\n<h2 id=\"2-分级标题\"><a href=\"#2-分级标题\" class=\"headerlink\" title=\"2.分级标题\"></a>2.分级标题</h2><h4 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-1\"><a href=\"#显示效果：-1\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><h1 id=\"这是一个一级标题\"><a href=\"#这是一个一级标题\" class=\"headerlink\" title=\"这是一个一级标题\"></a>这是一个一级标题</h1><h2 id=\"这是一个二级标题\"><a href=\"#这是一个二级标题\" class=\"headerlink\" title=\"这是一个二级标题\"></a>这是一个二级标题</h2><h3 id=\"这是一个三级标题\"><a href=\"#这是一个三级标题\" class=\"headerlink\" title=\"这是一个三级标题\"></a>这是一个三级标题</h3><h4 id=\"这是一个四级标题\"><a href=\"#这是一个四级标题\" class=\"headerlink\" title=\"这是一个四级标题\"></a>这是一个四级标题</h4><h5 id=\"这是一个五级标题\"><a href=\"#这是一个五级标题\" class=\"headerlink\" title=\"这是一个五级标题\"></a>这是一个五级标题</h5><h6 id=\"这是一个六级标题\"><a href=\"#这是一个六级标题\" class=\"headerlink\" title=\"这是一个六级标题\"></a>这是一个六级标题</h6><h2 id=\"3-超链接\"><a href=\"#3-超链接\" class=\"headerlink\" title=\"3.超链接\"></a>3.超链接</h2><h4 id=\"Markdown-支持两种形式的链接语法-行内式和参考式两种形式-行内式一般使用较多。\"><a href=\"#Markdown-支持两种形式的链接语法-行内式和参考式两种形式-行内式一般使用较多。\" class=\"headerlink\" title=\"Markdown 支持两种形式的链接语法: 行内式和参考式两种形式,行内式一般使用较多。\"></a>Markdown 支持两种形式的链接语法: 行内式和参考式两种形式,行内式一般使用较多。</h4><h4 id=\"①行内式代码：\"><a href=\"#①行内式代码：\" class=\"headerlink\" title=\"①行内式代码：\"></a>①行内式代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：[链接文字](链接地址 <span class=\"string\">\"链接标题\"</span>)</span><br><span class=\"line\">[这是链接的文字](这是链接的地址 <span class=\"string\">\"这是链接的标题\"</span>)</span><br><span class=\"line\">链接标题可有可无，链接标题是鼠标悬停在链接上面时显示的文字标题（链接地址与链接标题前有一个空格）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-2\"><a href=\"#显示效果：-2\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><p><a href=\"https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\" title=\"这是链接的标题\" target=\"_blank\" rel=\"noopener\">这是链接的文字</a></p>\n<h4 id=\"②参考式代码：\"><a href=\"#②参考式代码：\" class=\"headerlink\" title=\"②参考式代码：\"></a>②参考式代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：[链接文字][链接标记]，，，然后在文档的任意地方写上：[链接标记]:链接地址 <span class=\"string\">\"链接标题\"</span></span><br><span class=\"line\">\t\t或者直接通过链接文字来填写地址，[链接文字][]，，，在文档写上[链接文字]:链接地址 这样的形式。。。</span><br><span class=\"line\">[链接文字][链接标记]</span><br><span class=\"line\">[链接标记]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/ <span class=\"string\">\"markdown语法编写博客文章\"</span></span><br><span class=\"line\">[链接文字其他形式][]</span><br><span class=\"line\">[链接文字其他形式]:https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/</span><br><span class=\"line\">链接标题可有可无，链接标题是鼠标悬停在链接上面时显示的文字标题（链接地址与链接标题前有一个空格）</span><br><span class=\"line\">参考式一般用在一些多次使用到的链接，比如写论文时的一些引用。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-3\"><a href=\"#显示效果：-3\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><p><a href=\"https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\" title=\"markdown语法编写博客文章\" target=\"_blank\" rel=\"noopener\">链接文字</a></p>\n<p><a href=\"https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\" target=\"_blank\" rel=\"noopener\">链接文字其他形式</a></p>\n<h4 id=\"③自动链接：\"><a href=\"#③自动链接：\" class=\"headerlink\" title=\"③自动链接：\"></a>③自动链接：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，通过使用&lt;&gt;来把链接地址括起来，</span><br><span class=\"line\">\t\tmarkdown会自动形成链接，链接文字对应就是链接地址。</span><br><span class=\"line\">&lt;https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/&gt;</span><br><span class=\"line\">&lt;123456@qq.com&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-4\"><a href=\"#显示效果：-4\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><p><a href=\"https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/\" target=\"_blank\" rel=\"noopener\">https://wooyee-ldq.github.io/2019/07/30/markdown语法编写博客文章/</a><br><a href=\"mailto:&#x31;&#x32;&#51;&#52;&#53;&#x36;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#x31;&#x32;&#51;&#52;&#53;&#x36;&#64;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n<h2 id=\"4-锚点\"><a href=\"#4-锚点\" class=\"headerlink\" title=\"4.锚点\"></a>4.锚点</h2><h4 id=\"在网⻚中-锚点其实就是⻚内超链接-也就是链接本文档内部的某些元素-实现当前⻚面中的跳转，也就是对当前页面某个位置的定位，通过锚点可以快速定位到当前页面的某个位置，常用于类似置顶功能。\"><a href=\"#在网⻚中-锚点其实就是⻚内超链接-也就是链接本文档内部的某些元素-实现当前⻚面中的跳转，也就是对当前页面某个位置的定位，通过锚点可以快速定位到当前页面的某个位置，常用于类似置顶功能。\" class=\"headerlink\" title=\"在网⻚中,锚点其实就是⻚内超链接,也就是链接本文档内部的某些元素,实现当前⻚面中的跳转，也就是对当前页面某个位置的定位，通过锚点可以快速定位到当前页面的某个位置，常用于类似置顶功能。\"></a>在网⻚中,锚点其实就是⻚内超链接,也就是链接本文档内部的某些元素,实现当前⻚面中的跳转，也就是对当前页面某个位置的定位，通过锚点可以快速定位到当前页面的某个位置，常用于类似置顶功能。</h4><h4 id=\"代码：-2\"><a href=\"#代码：-2\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：标题后面&#123;<span class=\"comment\">#锚点&#125;  (注意: Markdown Extra 只支持在标题后插入锚点,其它地方无效。)</span></span><br><span class=\"line\"><span class=\"comment\">## 1.标题&#123;#锚点&#125;  (这种形式亲测在hexo好像不支持，系统会报错导致无法编译和运行服务，如有大神了解请赐教)\t\t</span></span><br><span class=\"line\">所以换成了html的语法形式可以使用：(锚点名称不可使用中文！！！)</span><br><span class=\"line\">&lt;a name = <span class=\"string\">\"maodian\"</span>&gt;1. 标题&lt;/a&gt;</span><br><span class=\"line\">占位...</span><br><span class=\"line\">... </span><br><span class=\"line\">...</span><br><span class=\"line\">跳转到[标题](<span class=\"comment\">#maodian)</span></span><br><span class=\"line\"></span><br><span class=\"line\">或者：</span><br><span class=\"line\">&lt;a name = <span class=\"string\">\"maodian\"</span>&gt;1. 标题&lt;/a&gt;</span><br><span class=\"line\">占位...</span><br><span class=\"line\">... </span><br><span class=\"line\">...</span><br><span class=\"line\">跳转到&lt;a href = <span class=\"string\">\"#maodian\"</span>&gt;1. 标题&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-5\"><a href=\"#显示效果：-5\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><h4 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1. 标题\"></a><a name=\"maodian\">1. 标题</a></h4><p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<p>占位…</p>\n<h4 id=\"跳转到1-标题\"><a href=\"#跳转到1-标题\" class=\"headerlink\" title=\"跳转到1.标题\"></a>跳转到<a href=\"#maodian\">1.标题</a></h4><h2 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5.列表\"></a>5.列表</h2><h4 id=\"①无序列表：使用-来表示无序列表（符号后面空格）\"><a href=\"#①无序列表：使用-来表示无序列表（符号后面空格）\" class=\"headerlink\" title=\"①无序列表：使用 * , + , - 来表示无序列表（符号后面空格）\"></a>①无序列表：使用 * , + , - 来表示无序列表（符号后面空格）</h4><h4 id=\"代码：-3\"><a href=\"#代码：-3\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无序列表一</span><br><span class=\"line\">+ 无序列表二</span><br><span class=\"line\">- 无序列表三</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-6\"><a href=\"#显示效果：-6\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ul>\n<li>无序列表一</li>\n</ul>\n<ul>\n<li>无序列表二</li>\n</ul>\n<ul>\n<li>无序列表三</li>\n</ul>\n<h4 id=\"②有序列表：使用数字接着一个英文句点来表示-号后面要空格\"><a href=\"#②有序列表：使用数字接着一个英文句点来表示-号后面要空格\" class=\"headerlink\" title=\"②有序列表：使用数字接着一个英文句点来表示(. 号后面要空格)\"></a>②有序列表：使用数字接着一个英文句点来表示(. 号后面要空格)</h4><h4 id=\"代码：-4\"><a href=\"#代码：-4\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 有序列表一</span><br><span class=\"line\">2. 有序列表二</span><br><span class=\"line\">3. 有序列表三</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果\"><a href=\"#显示效果\" class=\"headerlink\" title=\"显示效果:\"></a>显示效果:</h4><ol>\n<li>有序列表一</li>\n<li>有序列表二</li>\n<li>有序列表三</li>\n</ol>\n<h4 id=\"③定义型列表：定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释，第二行解释使用-：号后一个tab键后开始写解释。\"><a href=\"#③定义型列表：定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释，第二行解释使用-：号后一个tab键后开始写解释。\" class=\"headerlink\" title=\"③定义型列表：定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释，第二行解释使用　：号后一个ｔａｂ键后开始写解释。\"></a>③定义型列表：定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释，第二行解释使用　：号后一个ｔａｂ键后开始写解释。</h4><h4 id=\"代码：-5\"><a href=\"#代码：-5\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义型列表</span><br><span class=\"line\">:\t定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释</span><br><span class=\"line\">markdown</span><br><span class=\"line\">:\t轻量级文本标记语言,可以转换成html,pdf等格式</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：（要在网页才看得出，在typora编辑器无效果显示）\"><a href=\"#显示效果：（要在网页才看得出，在typora编辑器无效果显示）\" class=\"headerlink\" title=\"显示效果：（要在网页才看得出，在typora编辑器无效果显示）\"></a>显示效果：（要在网页才看得出，在typora编辑器无效果显示）</h4><dl><dt>定义型列表</dt><dd>定义型列表由名词和解释组成，第一行写定义，紧接第二行写解释</dd></dl><dl><dt>markdown</dt><dd>轻量级文本标记语言,可以转换成html,pdf等格式</dd></dl><h4 id=\"④列表缩进：列表项目标记一般在行的最左，但也可以缩进（最多三个空格）\"><a href=\"#④列表缩进：列表项目标记一般在行的最左，但也可以缩进（最多三个空格）\" class=\"headerlink\" title=\"④列表缩进：列表项目标记一般在行的最左，但也可以缩进（最多三个空格）\"></a>④列表缩进：列表项目标记一般在行的最左，但也可以缩进（最多三个空格）</h4><p>代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。</span><br><span class=\"line\">随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？</span><br><span class=\"line\">心向往之，然高山仰止。</span><br><span class=\"line\">+ 随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。</span><br><span class=\"line\">当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风</span><br><span class=\"line\">少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手</span><br><span class=\"line\">中的线，深谙原来还有一线牵连。</span><br><span class=\"line\">- 月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳</span><br><span class=\"line\">垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。</span><br><span class=\"line\">如今不得语，唯有暗相思。一日不思量，也攒眉千度。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-7\"><a href=\"#显示效果：-7\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ul>\n<li>山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。<br> 随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？<br> 心向往之，然高山仰止。</li>\n</ul>\n<ul>\n<li>随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。<br>  当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风<br>  少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手<br>  中的线，深谙原来还有一线牵连。</li>\n</ul>\n<ul>\n<li>月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳<br> 垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。<br> 如今不得语，唯有暗相思。一日不思量，也攒眉千度。</li>\n</ul>\n<h4 id=\"⑤包含段落的列表：添加的段落必须以四个空格或者一个制表符开头\"><a href=\"#⑤包含段落的列表：添加的段落必须以四个空格或者一个制表符开头\" class=\"headerlink\" title=\"⑤包含段落的列表：添加的段落必须以四个空格或者一个制表符开头\"></a>⑤包含段落的列表：添加的段落必须以四个空格或者一个制表符开头</h4><h4 id=\"代码：-6\"><a href=\"#代码：-6\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t+ 山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。</span><br><span class=\"line\">   随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？</span><br><span class=\"line\">   心向往之，然高山仰止。</span><br><span class=\"line\">   </span><br><span class=\"line\">    随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。</span><br><span class=\"line\">当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风</span><br><span class=\"line\">   少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手</span><br><span class=\"line\">   中的线，深谙原来还有一线牵连。</span><br><span class=\"line\">   </span><br><span class=\"line\">   月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳</span><br><span class=\"line\">垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。</span><br><span class=\"line\">   如今不得语，唯有暗相思。一日不思量，也攒眉千度。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-8\"><a href=\"#显示效果：-8\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ul>\n<li><p>山水之间，轻舟绿水，渔家烟火，一樽醉夕阳。山是殇，水是随。<br> 随缘自是不语，离殇也罢，蜀道若不难，何来水穷处？<br> 心向往之，然高山仰止。</p>\n<p>  随风奔跑，那是一个追风的少年。倒是放风筝的孩童，追着风筝跑，做个追风筝的孩子。<br>当风筝飞上天空，迎着微风抬头看着风筝越飞越高。天空上的风筝越来越小，经过的追风<br> 少年也不禁看了看天，错过身的时候心里在想：这云好漂亮啊！却恰巧看见孩童扯了扯手<br> 中的线，深谙原来还有一线牵连。</p>\n<p> 月挂东岭，把书话复习。晚来风急，一场落花雨。忆古城长桥，杨柳<br>垂绦，春风十里，沾衣欲湿，柳风杏雨。纵是潜别  离，也教梨花带雨。<br> 如今不得语，唯有暗相思。一日不思量，也攒眉千度。</p>\n</li>\n</ul>\n<h4 id=\"⑥包含引用的列表：引用标记-gt-需要缩进\"><a href=\"#⑥包含引用的列表：引用标记-gt-需要缩进\" class=\"headerlink\" title=\"⑥包含引用的列表：引用标记 &gt; 需要缩进\"></a>⑥包含引用的列表：引用标记 &gt; 需要缩进</h4><h4 id=\"代码：-7\"><a href=\"#代码：-7\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 包含引用的列表</span><br><span class=\"line\">\t&gt;引用一</span><br><span class=\"line\">\t&gt;引用二</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-9\"><a href=\"#显示效果：-9\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ul>\n<li>包含引用的列表<blockquote>\n<p>引用一<br>引用二</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"⑦包含代码区块的列表：代码区块需要缩进两次-就是-8-个空格或是-2-个制表符\"><a href=\"#⑦包含代码区块的列表：代码区块需要缩进两次-就是-8-个空格或是-2-个制表符\" class=\"headerlink\" title=\"⑦包含代码区块的列表：代码区块需要缩进两次,就是 8 个空格或是 2 个制表符\"></a>⑦包含代码区块的列表：代码区块需要缩进两次,就是 8 个空格或是 2 个制表符</h4><h4 id=\"代码：-8\"><a href=\"#代码：-8\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 一个列表项包含一个列表代码区块</span><br><span class=\"line\">\t\t&lt;这里写代码&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-10\"><a href=\"#显示效果：-10\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ul>\n<li>一个列表项包含一个列表代码区块<pre><code>&lt;这里写代码&gt;</code></pre></li>\n</ul>\n<h4 id=\"⑧注意特殊格式：数字句点空白-空格-这样的格式开头，要在句点-前加上-来转义\"><a href=\"#⑧注意特殊格式：数字句点空白-空格-这样的格式开头，要在句点-前加上-来转义\" class=\"headerlink\" title=\"⑧注意特殊格式：数字句点空白(空格)　这样的格式开头，要在句点( . )前加上 \\ 来转义\"></a>⑧注意特殊格式：数字句点空白(空格)　这样的格式开头，要在句点( . )前加上 \\ 来转义</h4><h4 id=\"代码：-9\"><a href=\"#代码：-9\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 未加 \\ 的例子</span><br><span class=\"line\">2\\. 添加 \\ 的例子</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-11\"><a href=\"#显示效果：-11\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><ol>\n<li>未加 \\ 的栗子</li>\n</ol>\n<p>２.添加 \\ 的栗子</p>\n<h2 id=\"6-引用\"><a href=\"#6-引用\" class=\"headerlink\" title=\"6.引用\"></a>6.引用</h2><h4 id=\"语法：在被引用的文本前加上-gt-符号\"><a href=\"#语法：在被引用的文本前加上-gt-符号\" class=\"headerlink\" title=\"语法：在被引用的文本前加上 &gt; 符号\"></a>语法：在被引用的文本前加上 &gt; 符号</h4><h4 id=\"代码：-10\"><a href=\"#代码：-10\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;这是一个有两段的的引用</span><br><span class=\"line\">&gt;第一段的文字</span><br><span class=\"line\">&gt;第一段的文字</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;第二段的文字</span><br><span class=\"line\">&gt;第二段的文字</span><br><span class=\"line\"></span><br><span class=\"line\">**或者：**</span><br><span class=\"line\">&gt;这是一个有两段的的引用</span><br><span class=\"line\">第一段的文字</span><br><span class=\"line\">第一段的文字</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;第二段的文字</span><br><span class=\"line\">第二段的文字</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-12\"><a href=\"#显示效果：-12\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><blockquote>\n<p>这是一个有两段的的引用<br>第一段的文字<br>第一段的文字</p>\n<p>第二段的文字<br>第二段的文字</p>\n</blockquote>\n<p><strong>或者：</strong></p>\n<blockquote>\n<p>这是一个有两段的的引用<br>第一段的文字<br>第一段的文字</p>\n</blockquote>\n<blockquote>\n<p>第二段的文字<br>第二段的文字</p>\n</blockquote>\n<h4 id=\"引用的多层嵌套\"><a href=\"#引用的多层嵌套\" class=\"headerlink\" title=\"引用的多层嵌套\"></a>引用的多层嵌套</h4><h4 id=\"代码：-11\"><a href=\"#代码：-11\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;请问怎么用ｍａｒｋｄｏｗｎ编写博客文章？——小白</span><br><span class=\"line\">&gt;&gt;可以自己看这个教程学习的呢，亲！——新手</span><br><span class=\"line\">&gt;&gt;&gt;谢谢，这个教程看起来很不错！——小白</span><br><span class=\"line\">【本人觉得 &gt; 的数量其实是控制了字体的大小，数量越多越大】</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：（把-gt-的数量排列从多到少就是平常的嵌套）\"><a href=\"#显示效果：（把-gt-的数量排列从多到少就是平常的嵌套）\" class=\"headerlink\" title=\"显示效果：（把 &gt; 的数量排列从多到少就是平常的嵌套）\"></a>显示效果：（把 &gt; 的数量排列从多到少就是平常的嵌套）</h4><blockquote>\n<p>请问怎么用ｍａｒｋｄｏｗｎ编写博客文章？——小白</p>\n<blockquote>\n<p>可以自己看这个教程学习的呢，亲！——新手</p>\n<blockquote>\n<p>谢谢，这个教程看起来很不错！——小白</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"引用其他要素：标题、列表、代码区块等…\"><a href=\"#引用其他要素：标题、列表、代码区块等…\" class=\"headerlink\" title=\"引用其他要素：标题、列表、代码区块等…\"></a>引用其他要素：标题、列表、代码区块等…</h4><h4 id=\"代码：-12\"><a href=\"#代码：-12\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; * 第一行列表项</span><br><span class=\"line\">&gt; <span class=\"number\">2</span>. 第二行列表项</span><br><span class=\"line\">&gt;下面是一些代码：</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt;\t\tprintf(<span class=\"string\">\"Hello World !\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-13\"><a href=\"#显示效果：-13\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><blockquote>\n<ul>\n<li>第一行列表项</li>\n</ul>\n</blockquote>\n<blockquote>\n<ol start=\"2\">\n<li>第二行列表项</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>下面是一些代码：</p>\n<pre><code>printf(&quot;Hello World !&quot;);</code></pre></blockquote>\n<h2 id=\"7-插入图像\"><a href=\"#7-插入图像\" class=\"headerlink\" title=\"7.插入图像\"></a>7.插入图像</h2><h4 id=\"语法：图片的创建方式与超链接相似，也有行内式和参考式两种写法。\"><a href=\"#语法：图片的创建方式与超链接相似，也有行内式和参考式两种写法。\" class=\"headerlink\" title=\"语法：图片的创建方式与超链接相似，也有行内式和参考式两种写法。\"></a>语法：图片的创建方式与超链接相似，也有行内式和参考式两种写法。</h4><h4 id=\"行内式语法：-图片alt-图片地址-“图片title\"><a href=\"#行内式语法：-图片alt-图片地址-“图片title\" class=\"headerlink\" title=\"行内式语法：![图片alt](图片地址  “图片title )\"></a>行内式语法：![图片alt](图片地址  “图片title )</h4><h4 id=\"参考式语法：在要引入图片的地方写-图片alt-标记-和在文档最后写-标记-图片地址-“title”\"><a href=\"#参考式语法：在要引入图片的地方写-图片alt-标记-和在文档最后写-标记-图片地址-“title”\" class=\"headerlink\" title=\"参考式语法：在要引入图片的地方写![图片alt][标记]和在文档最后写[标记]:图片地址 “title”\"></a>参考式语法：在要引入图片的地方写![图片alt][标记]和在文档最后写[标记]:图片地址 “title”</h4><hr>\n<h4 id=\"以上两种方式为markdown的语法形式，但在hexo-3-x版本中使用存在问题，详情可以参考hexo官方给出的使用说明资源文件夹-这里不再细讲，直接给出hexo的语法和示例。\"><a href=\"#以上两种方式为markdown的语法形式，但在hexo-3-x版本中使用存在问题，详情可以参考hexo官方给出的使用说明资源文件夹-这里不再细讲，直接给出hexo的语法和示例。\" class=\"headerlink\" title=\"以上两种方式为markdown的语法形式，但在hexo 3.x版本中使用存在问题，详情可以参考hexo官方给出的使用说明资源文件夹 ,这里不再细讲，直接给出hexo的语法和示例。\"></a>以上两种方式为markdown的语法形式，但在hexo 3.x版本中使用存在问题，详情可以参考hexo官方给出的使用说明<a href=\"https://hexo.io/zh-cn/docs/asset-folders\" target=\"_blank\" rel=\"noopener\">资源文件夹</a> ,这里不再细讲，直接给出hexo的语法和示例。</h4><h4 id=\"使用标签插件引入资源：-只适用于hexo框架编辑文章，否则要使用上面markdown的语法\"><a href=\"#使用标签插件引入资源：-只适用于hexo框架编辑文章，否则要使用上面markdown的语法\" class=\"headerlink\" title=\"使用标签插件引入资源：(只适用于hexo框架编辑文章，否则要使用上面markdown的语法)\"></a>使用标签插件引入资源：(只适用于hexo框架编辑文章，否则要使用上面markdown的语法)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_path slug %&#125;</span><br><span class=\"line\">&#123;% asset_img slug [title] %&#125;</span><br><span class=\"line\">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"有关标签插件的使用方法，读者可以参考官方文档标签插件来了解使用方法。\"><a href=\"#有关标签插件的使用方法，读者可以参考官方文档标签插件来了解使用方法。\" class=\"headerlink\" title=\"有关标签插件的使用方法，读者可以参考官方文档标签插件来了解使用方法。\"></a>有关标签插件的使用方法，读者可以参考官方文档<a href=\"https://hexo.io/zh-cn/docs/tag-plugins\" target=\"_blank\" rel=\"noopener\">标签插件</a>来了解使用方法。</h4><h4 id=\"代码：-13\"><a href=\"#代码：-13\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：&#123;% asset_img example.jpg This is an example image %&#125;</span><br><span class=\"line\">&#123;% asset_img 图片名称.jpg [width] [height] [title] %&#125;</span><br><span class=\"line\">&#123;% asset_img bz16.jpg This is a picture. %&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-注意：使用标签插件引入，在-typora-编辑器不显示图片\"><a href=\"#显示效果：-注意：使用标签插件引入，在-typora-编辑器不显示图片\" class=\"headerlink\" title=\"显示效果：(注意：使用标签插件引入，在 typora 编辑器不显示图片)\"></a>显示效果：(注意：使用标签插件引入，在 typora 编辑器不显示图片)</h4><img src=\"/blog/markdown语法编写博客文章/bz16.jpg\" title=\"This is a picture.\">\n\n\n\n<h2 id=\"8-分割线\"><a href=\"#8-分割线\" class=\"headerlink\" title=\"8.分割线\"></a>8.分割线</h2><h4 id=\"3个或者3个以上的-或-便是分割线\"><a href=\"#3个或者3个以上的-或-便是分割线\" class=\"headerlink\" title=\"3个或者3个以上的 - 或 * 便是分割线\"></a>3个或者3个以上的 - 或 * 便是分割线</h4><h4 id=\"代码：-14\"><a href=\"#代码：-14\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">***</span><br><span class=\"line\">-------</span><br><span class=\"line\">******</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-效果都是一样的\"><a href=\"#显示效果：-效果都是一样的\" class=\"headerlink\" title=\"显示效果：(效果都是一样的)\"></a>显示效果：(效果都是一样的)</h4><hr>\n<hr>\n<hr>\n<hr>\n<h2 id=\"9-表格\"><a href=\"#9-表格\" class=\"headerlink\" title=\"9.表格\"></a>9.表格</h2><h4 id=\"代码：-15\"><a href=\"#代码：-15\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：表头1|表头2|表头3</span><br><span class=\"line\">\t\t\t-|:-:|-:</span><br><span class=\"line\">\t\t\t内容|内容|内容</span><br><span class=\"line\">\t\t\t内容|内容|内容</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">markdown原生的语法两边都要用 | 来包起来，这里是简写。</span><br><span class=\"line\">- 有一个就行，也可以多加了几个使得对齐</span><br><span class=\"line\">文字默认居左</span><br><span class=\"line\">-两边加:表示文字居中</span><br><span class=\"line\">-右边加:表示文字居右</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-14\"><a href=\"#显示效果：-14\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><table>\n<thead>\n<tr>\n<th>表头1</th>\n<th align=\"center\">表头2</th>\n<th align=\"right\">表头3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内容</td>\n<td align=\"center\">内容</td>\n<td align=\"right\">内容</td>\n</tr>\n<tr>\n<td>内容</td>\n<td align=\"center\">内容</td>\n<td align=\"right\">内容</td>\n</tr>\n</tbody></table>\n<h2 id=\"10-代码\"><a href=\"#10-代码\" class=\"headerlink\" title=\"10.代码\"></a>10.代码</h2><h4 id=\"代码：-16\"><a href=\"#代码：-16\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">单行代码：` printf(&quot;Hello World!&quot;); `</span><br><span class=\"line\">多行代码：``` printf(&quot;Hello World!&quot;); </span><br><span class=\"line\">                      \t\t   printf(&quot;Hello World!&quot;); ```【多行代码也就是代码块】</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-15\"><a href=\"#显示效果：-15\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><p><code>printf(&quot;Hello World!&quot;);</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\"</span>);  </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-流程图\"><a href=\"#11-流程图\" class=\"headerlink\" title=\"11.流程图\"></a>11.流程图</h2><h4 id=\"代码：-17\"><a href=\"#代码：-17\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（```）flow</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br><span class=\"line\">&amp;（```）</span><br><span class=\"line\">在markdown语法中<span class=\"string\">\" ``` \"</span>是没有括号的，这里是为了方便显示</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（```）flow</span><br><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">io=&gt;inputoutput: 验证</span><br><span class=\"line\">op=&gt;operation: 选项</span><br><span class=\"line\">cond=&gt;condition: 是 或 否?</span><br><span class=\"line\">sub=&gt;subroutine: 子程序</span><br><span class=\"line\">e=&gt;end: 结束</span><br><span class=\"line\">st-&gt;io-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;sub-&gt;io</span><br><span class=\"line\">&amp;（```）</span><br><span class=\"line\">在markdown语法中<span class=\"string\">\" ``` \"</span>是没有括号的，这里是为了方便显示</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-16\"><a href=\"#显示效果：-16\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><img src=\"/blog/markdown语法编写博客文章/流程图.png\" title=\"流程图\">\n\n\n\n<h2 id=\"12-HTML原始代码\"><a href=\"#12-HTML原始代码\" class=\"headerlink\" title=\"12.HTML原始代码\"></a>12.HTML原始代码</h2><h4 id=\"只要把html代码直接复制粘贴到md文件中，markdown会自动识别转换成对应的html元素（也可以直接编写html代码）\"><a href=\"#只要把html代码直接复制粘贴到md文件中，markdown会自动识别转换成对应的html元素（也可以直接编写html代码）\" class=\"headerlink\" title=\"只要把html代码直接复制粘贴到md文件中，markdown会自动识别转换成对应的html元素（也可以直接编写html代码）\"></a>只要把html代码直接复制粘贴到md文件中，markdown会自动识别转换成对应的html元素（也可以直接编写html代码）</h4><h4 id=\"代码：-18\"><a href=\"#代码：-18\" class=\"headerlink\" title=\"代码：\"></a>代码：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span> = <span class=\"string\">\"#\"</span> <span class=\"attr\">method</span> = <span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"text\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span> = <span class=\"string\">\"这是一个文本框\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"button\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"button\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"按钮\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示效果：-17\"><a href=\"#显示效果：-17\" class=\"headerlink\" title=\"显示效果：\"></a>显示效果：</h4><form action=\"#\" method=\"post\">\n    <input type=\"text\" name=\"text\" placeholder=\"这是一个文本框\">\n    <input type=\"button\" name=\"button\" value=\"按钮\">\n</form>\n\n\n<hr>\n<h2 id=\"以上是markdown的一些基本语法，在一般的博文编写中都可以完成。是不是很想自己编写博客了，还不现在就开始动手！！！\"><a href=\"#以上是markdown的一些基本语法，在一般的博文编写中都可以完成。是不是很想自己编写博客了，还不现在就开始动手！！！\" class=\"headerlink\" title=\"以上是markdown的一些基本语法，在一般的博文编写中都可以完成。是不是很想自己编写博客了，还不现在就开始动手！！！\"></a>以上是markdown的一些基本语法，在一般的博文编写中都可以完成。是不是很想自己编写博客了，还不现在就开始动手！！！</h2>"},{"title":"常用设计模式","date":"2020-07-26T15:30:47.000Z","_content":"\n## 常用设计模式\n\n* #### 转换器（适配器）模式：Adapter\t\n\n  一般用于不同规范/格式/形式之间的转换连接，Java中的字节流和字符流转换就是适配器模式实现\n\n---\n\n* #### 桥接模式（双向拓展模式）：Bridge\n\n  分离抽象和具体，通过聚合联系在一起\n\n  ```java\n  /* 这个是礼物类，礼物是抽象的，里面定义一个具体礼物实现类 */\n  public abstract class Gift {\n      GiftImpl impl;  // 具体礼物\n  \n      public Gift(GiftImpl impl){\n          this.impl = impl;\n      }\n  }\n  \n  \n  /* 具体礼物实现类父类 */\n  public class GiftImpl {\n  \n  }\n  \n  /* 书作为具体礼物，继承GiftImpl */\n  public class Book extends GiftImpl {\n  \n  }\n  \n  /* 花作为具体礼物，继承GiftImpl */\n  public class Flower extends GiftImpl {\n  \n  }\n  \n  /* 大的礼物，作为“大”这个抽象的概念继承Gift */\n  public class BigGift extends Gift {\n      public BigGift(GiftImpl impl){\n          super(impl);\n      }\n  }\n  \n  /* 小的礼物，作为“小这个抽象的概念继承Gift” */\n  public class SmallGift extends Gift {\n      public SmallGift(GiftImpl impl) {\n          super(impl);\n      }\n  }\n  \n  /* main方法 */\n  public class BridgeMain {\n      public static void main(String[] args) {\n          // 通过聚合，把抽象的和具体的联系起来\n          // 通过抽象和具体的组合，有更多的不同礼物\n          Gift gift1 = new BigGift(new Book());  // 大的书作为礼物\n          Gift gift2 = new BigGift(new Book());  // 小的书作为礼物\n      }\n  }\n  ```\n\n---\n\n* #### 构建器模式：Builder\n\n  通过构建器来构造复杂的对象，而且可以通过不同的构建器构造不同功能或者不同表现的对象\n\n---\n\n* #### 命令模式：Command\n\n  command+Cor（责任链模式）实现do和undo功能\n\n---\n\n* #### 组合模式：Composite\n\n  一般需要树状结构时使用\n\n  ```java\n  /* 所有种类节点的父类 */\n  public abstract class Node {\n      public abstract void printNode();\n  }\n  \n  /* 分支节点（目录，节点下面还有内容） */\n  import java.util.ArrayList;\n  import java.util.List;\n  \n  public class BranchNode extends Node {\n      private String name;\n      private List<Node> nodes = new ArrayList<>();\n  \n      public BranchNode(String name) {\n          this.name = name;\n      }\n  \n      @Override\n      public void printNode() {\n          System.out.println(this.name);\n      }\n  \n      public BranchNode addNode(Node n){\n          this.nodes.add(n);\n          return this;\n      }\n  \n      public void printAllNode(){\n          this.printAllNode(this, 0);\n      }\n  \n      public void printAllNode(Node node, int depth){\n          for (int i = 0; i < depth; i++) System.out.print(\"-|\");\n  \n          node.printNode();\n          if(node instanceof BranchNode){\n              for(Node n : ((BranchNode)node).nodes){\n                  printAllNode(n, depth+1);\n              }\n          }\n      }\n  }\n  \n  /* 叶子节点（文件，下面没内容） */\n  public class LeafNode extends Node {\n      private String context;\n  \n      public LeafNode(String context) {\n          this.context = context;\n      }\n  \n      @Override\n      public void printNode() {\n          System.out.println(this.context);\n      }\n  }\n  \n  /* main方法 */\n  public class CompositeMain {\n      public static void main(String[] args) {\n          BranchNode root = new BranchNode(\"root\");\n          BranchNode a1 = new BranchNode(\"a1\");\n          BranchNode a2 = new BranchNode(\"a2\");\n          LeafNode b1 = new LeafNode(\"b1\");\n          LeafNode b2 = new LeafNode(\"b2\");\n          LeafNode b3 = new LeafNode(\"b3\");\n          root.addNode(a1).addNode(a2).addNode(b1);\n          a2.addNode(b2).addNode(b3);\n  \n          root.printAllNode();\n      }\n  }\n  \n  /*\n  结果：\n  root\n  -|a1\n  -|a2\n  -|-|b2\n  -|-|b3\n  -|b1\n  */\n  ```\n\n---\n\n* #### 责任链模式：Chain of Responsibility Pattern\n\n  为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦，属于行为型模式。\n\n  ```java\n  /* 所有filter或者filterchain都需要实现该接口 */\n  public interface Filter {\n      void doFilter(Request request, Response response, FilterChain chain);\n  }\n  \n  /* FilterChain */\n  import java.util.ArrayList;\n  import java.util.List;\n  \n  public class FilterChain implements Filter {\n  \n      private List<Filter> filters = new ArrayList<>();\n  \n      private int index = 0;\n  \n      public FilterChain addFilter(Filter f){\n          filters.add(f);\n          return this;\n      }\n  \n      @Override\n      public void doFilter(Request request, Response response, FilterChain chain) {\n          if(index == filters.size()) return;\n          Filter filter = filters.get(index++);\n          filter.doFilter(request, response, chain);\n      }\n  }\n  \n  /* HTMLFilter */\n  public class HTMLFilter implements Filter {\n      @Override\n      public void doFilter(Request request, Response response, FilterChain chain) {\n          String str = \" -> HTMLFilter\";\n          request.setStr(request.getStr() + str);\n          chain.doFilter(request, response, chain);\n          response.setStr(response.getStr() + str);\n      }\n  }\n  \n  /* SensitiveFilter */\n  public class SensitiveFilter implements Filter {\n      @Override\n      public void doFilter(Request request, Response response, FilterChain chain) {\n          String str = \" -> SensitiveFilter\";\n          request.setStr(request.getStr() + str);\n          chain.doFilter(request, response, chain);\n          response.setStr(response.getStr() + str);\n      }\n  }\n  \n  /* Request */\n  public class Request {\n      private String str;\n  \n      public Request() {\n      }\n  \n      public Request(String str) {\n          this.str = str;\n      }\n  \n      public String getStr() {\n          return str;\n      }\n  \n      public void setStr(String str) {\n          this.str = str;\n      }\n  \n      @Override\n      public String toString() {\n          return this.str;\n      }\n  }\n  \n  /* Response */\n  public class Response {\n      private String str;\n  \n      public Response() {\n      }\n  \n      public Response(String str) {\n          this.str = str;\n      }\n  \n      public String getStr() {\n          return str;\n      }\n  \n      public void setStr(String str) {\n          this.str = str;\n      }\n  \n      @Override\n      public String toString() {\n          return this.str;\n      }\n  }\n  \n  /* main方法 */\n  public class CorMain {\n      public static void main(String[] args) {\n          FilterChain chain = new FilterChain();\n          chain.addFilter(new HTMLFilter()).addFilter(new SensitiveFilter());\n          Request request = new Request(\"request\");\n          Response response = new Response(\"response\");\n          chain.doFilter(request, response, chain);\n          System.out.println(request);\n          System.out.println(response);\n      }\n  }\n  \n  /*\n  结果：\n  request -> HTMLFilter -> SensitiveFilter\n  response -> SensitiveFilter -> HTMLFilter\n  */\n  ```\n\n---\n\n* #### 装饰器模式：Decorator Pattern\n\n  允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。\n\n  ```java\n  /* 装饰器和被装饰的类都要实现这个接口 */\n  public interface Decor {\n      void draw();\n  }\n  \n  /* Circle */\n  public class Circle implements Decor {\n      @Override\n      public void draw() {\n          System.out.println(\"Circle::draw()\");\n      }\n  }\n  \n  /* Rectangle */\n  public class Rectangle implements Decor {\n  \n      @Override\n      public void draw() {\n          System.out.println(\"Rectangle::draw()\");\n      }\n  }\n  \n  /* Decorator 装饰器的抽象父类 */\n  public abstract class DecorDecorator implements Decor {\n      protected Decor decoratedDecor;\n  \n      public DecorDecorator(Decor decoratedDecor){\n          this.decoratedDecor = decoratedDecor;\n      }\n  \n      public void draw(){\n          decoratedDecor.draw();\n      }\n  }\n  \n  /* RedDecorDecorator 红色装饰器，为图行添加颜色 */\n  public class RedDecorDecorator extends DecorDecorator {\n      public RedDecorDecorator(Decor decoratedDecor) {\n          super(decoratedDecor);\n      }\n  \n      @Override\n      public void draw() {\n          decoratedDecor.draw();\n          setRedBorder(decoratedDecor);\n      }\n  \n      private void setRedBorder(Decor decoratedDecor){\n          System.out.println(\"Border Color: Red\");\n      }\n  }\n  \n  /* main方法 */\n  public class DecoratorMain {\n      public static void main(String[] args) {\n          Shape circle = new Circle();\n          Shape redCircle = new RedShapeDecorator(new Circle());\n          Shape redRectangle = new RedShapeDecorator(new Rectangle());\n          System.out.println(\"Circle with normal border\");\n          circle.draw();\n  \n          System.out.println(\"\\nCircle of red border\");\n          redCircle.draw();\n  \n          System.out.println(\"\\nRectangle of red border\");\n          redRectangle.draw();\n      }\n  }\n  \n  /*\n  结果：\n  Circle with normal border\n  Circle::draw()\n  \n  Circle of red border\n  Circle::draw()\n  Border Color: Red\n  \n  Rectangle of red border\n  Rectangle::draw()\n  Border Color: Red\n  */\n  ```\n\n---\n\n* #### 外观模式： Facade\n\n  隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口，解决内部复杂问题，对外提供简单接口。其实就是把一些有联系的复杂功能通过一个接口提供。\n\n  ```java\n  /* 各种提供功能的类实现这个接口 */\n  public interface Shape {\n      void draw();\n  }\n  \n  /* Circle */\n  public class Circle implements Decor {\n      @Override\n      public void draw() {\n          System.out.println(\"Circle::draw()\");\n      }\n  }\n  \n  /* Rectangle */\n  public class Rectangle implements Decor {\n  \n      @Override\n      public void draw() {\n          System.out.println(\"Rectangle::draw()\");\n      }\n  }\n  \n  /* Square */\n  public class Square implements Shape {\n      @Override\n      public void draw() {\n          System.out.println(\"Square::draw()\");\n      }\n  }\n  \n  /* ShapeMaker,提供复杂功能的API类 */\n  public class ShapeMaker {\n      private Shape circle;\n      private Shape rectangle;\n      private Shape square;\n  \n      public ShapeMaker() {\n          circle = new Circle();\n          rectangle = new Rectangle();\n          square = new Square();\n      }\n  \n      public void drawCircle(){\n          circle.draw();\n      }\n      public void drawRectangle(){\n          rectangle.draw();\n      }\n      public void drawSquare(){\n          square.draw();\n      }\n  }\n  \n  /* main方法 */\n  public class FacadeMain {\n      public static void main(String[] args) {\n          // 通过ShapeMaker提供各种图形的功能\n          ShapeMaker shapeMaker = new ShapeMaker(); \n  \n          shapeMaker.drawCircle();\n          shapeMaker.drawRectangle();\n          shapeMaker.drawSquare();\n      }\n  }\n  \n  /*\n  结果：\n  Circle::draw()\n  Rectangle::draw()\n  Square::draw()\n  */\n  ```\n\n---\n\n* #### 工厂模式：Factory\n\n  工厂模式，主要有简单工厂、工厂方法、抽象工厂三种\n\n  * 简单工厂：就是一个工厂创建不同的同类型对象返回\n  * 工厂方法：每个类都有自己的工厂来创建对象，便于单个产品的拓展\n  * 抽象工厂：通过继承抽象工厂，实现不同族的工厂，用于返回对应的不同族对象；便于拓展不同的产品族\n\n  ```java\n  // 抽象工厂：\n  \n  /* AbstractFactory */\n  public abstract class AbstractFactory {\n      abstract Food createFood();\n      abstract Vehicle createVehicle();\n  }\n  \n  /* AbstractFactoryExtOne */\n  public class AbstractFactoryExtOne extends AbstractFactory {\n      @Override\n      Food createFood() {\n          return new Bread();\n      }\n  \n      @Override\n      Vehicle createVehicle() {\n          return new Car();\n      }\n  }\n  \n  /* AbstractFactoryExtTwo */\n  public class AbstractFactoryExtTwo extends AbstractFactory {\n      @Override\n      Food createFood() {\n          return new Beef();\n      }\n  \n      @Override\n      Vehicle createVehicle() {\n          return new Plane();\n      }\n  }\n  \n  /* Food */\n  public abstract class Food {\n      abstract void printName();\n  }\n  \n  /* Vehicle */\n  public abstract class Vehicle {\n      abstract void go();\n  }\n  \n  \n  public class Beef extends Food {\n  \n      @Override\n      void printName() {\n          System.out.println(\"牛肉\");\n      }\n  }\n  \n  public class Bread extends Food {\n  \n      @Override\n      void printName() {\n          System.out.println(\"面包\");\n      }\n  }\n  \n  public class Car extends Vehicle {\n  \n      @Override\n      public void go(){\n          System.out.println(\"车启动...\");\n      }\n  \n  }\n  \n  public class Plane extends Vehicle {\n  \n      @Override\n      public void go() {\n          System.out.println(\"飞机启动...\");\n      }\n  }\n  \n  /* main方法 */\n  public class AbstractFactoryMain {\n      public static void main(String[] args) {\n          AbstractFactory fc = new AbstractFactoryExtOne();\n  //        AbstractFactory fc = new AbstractFactoryExtTwo();\n          Vehicle v = fc.createVehicle();\n          Food f = fc.createFood();\n          v.go();\n          f.printName();\n      }\n  }\n  ```\n\n---\n\n* #### 享元模式：FlyWeight\n\n  通过共享元对象（比较小的或者常用的对象），减少创建过多对象，类似于池的技术\n\n  ```java\n  public class Word {\n      private char w;\n  \n      public Word(char w) {\n          this.w = w;\n      }\n  \n      public char getW() {\n          return w;\n      }\n  }\n  \n  public class AWord extends Word {\n      public AWord() {\n          super('A');\n      }\n  \n  }\n  \n  public class BWord extends Word {\n      public BWord() {\n          super('B');\n      }\n  \n  }\n  \n  public class CWord extends Word {\n      public CWord() {\n          super('C');\n      }\n  \n  }\n  \n  /* WordPool */\n  import java.util.ArrayList;\n  import java.util.List;\n  \n  public class WordPool {\n      private int size;\n      private List<Word> words = new ArrayList<>();\n  \n      public WordPool(){\n          addWord(new AWord());\n          addWord(new BWord());\n          addWord(new CWord());\n      }\n  \n      public WordPool addWord(Word w){\n          this.words.add(w);\n          size++;\n          return this;\n      }\n  \n      public WordPool extendWordList(List<Word> wList){\n          for (Word word : wList) {\n              this.words.add(word);\n              size++;\n          }\n          return this;\n      }\n  \n      public Word getWord(int index){\n          if(index >= size || index < 0) index = size-1;\n          return this.words.get(index);\n      }\n  \n      public int getSize() {\n          return size;\n      }\n  \n      public List<Word> getWords() {\n          return words;\n      }\n  }\n  \n  /* main方法 */\n  public class FlyWeightMain {\n      public static void main(String[] args) {\n          WordPool wordPool = new WordPool();\n          Word w1 = wordPool.getWord(0);\n          Word w2 = wordPool.getWord(1);\n          Word w3 = wordPool.getWord(2);\n          System.out.println(w1.getW());\n          System.out.println(w2.getW());\n          System.out.println(w3.getW());\n  \n          System.out.println(\"===========\");\n          Word w4 = wordPool.getWord(0);\n          System.out.println(w4 == w1);\n      }\n  }\n  \n  /*\n  结果：\n  A\n  B\n  C\n  ===========\n  true\n  */\n  ```\n\n---\n\n* #### 解释器模式：intepreter\n\n  解释脚本，一般操作系统中或者解释器中用得比较多。\n\n---\n\n* #### 迭代器模式：Iterator\n\n  主要用于集合元素的遍历\n\n  ```java\n  \n  public class IteratorMain {\n      public static void main(String[] args) {\n  \n          _Collection<String> list = new _ArrayList<>();\n  \n          for (int i = 0; i < 16; i++) {\n              list.add(\"str\" + i);\n          }\n  \n          // 通过迭代器模式，实现通用的集合遍历：\n          _Iterator iterator = list.iterator();\n          while(iterator.hasNext()){\n              System.out.println(iterator.next());\n          }\n          new ArrayList<>();\n      }\n  }\n  \n  /* 自定义的集合接口：_Collection */\n  public interface _Collection<E> {\n      void add(E o);\n      int size();\n      _Iterator iterator();  // 规定集合中要有获取迭代器实现的方法\n  }\n  \n  /* 自定义的迭代器接口：_Iterator */\n  public interface  _Iterator<E> {\n      boolean hasNext();  // 判断是否还有下一个元素\n      E next();  // 返回下一个元素\n  }\n  \n  /* 自定义的List集合：_ArrayList，实现_Collection */\n  public class _ArrayList<E> implements _Collection<E>{\n  \n      private Object[] objects;\n      private int capacity;\n      private int index = 0;\n  \n      public _ArrayList() {\n          this.objects = new Object[10];\n          this.capacity = 10;\n      }\n  \n      public _ArrayList(int capacity) {\n          this.objects = new Object[capacity];\n          this.capacity = capacity;\n      }\n  \n      @Override\n      public void add(E o) {\n          if(index >= capacity){\n              Object[] temp = new Object[this.capacity=(capacity * 2)];\n              System.arraycopy(this.objects, 0, temp, 0, index);\n              this.objects = temp;\n          }\n          this.objects[index++] = o;\n      }\n  \n      @Override\n      public int size() {\n          return this.index;\n      }\n  \n      @Override\n      public _Iterator iterator() {\n          return new Itr();\n      }\n  \n      // 使用内部类实现迭代器接口\n      private class Itr<E> implements _Iterator<E>{\n          int len = -1;\n  \n          @Override\n          public boolean hasNext() {\n              if(index <= ++len){\n                  return false;\n              }\n              return true;\n          }\n  \n          @Override\n          public E next() {\n              return (E)objects[len];\n          }\n      }\n  }\n  \n  /* main方法 */\n  public class IteratorMain {\n      public static void main(String[] args) {\n  \n          _Collection<String> list = new _ArrayList<>();\n  \n          for (int i = 0; i < 6; i++) {\n              list.add(\"str\" + i);\n          }\n  \n          // 通过迭代器模式，实现通用的集合遍历：\n          _Iterator iterator = list.iterator();\n          while(iterator.hasNext()){\n              System.out.println(iterator.next());\n          }\n  \n          new ArrayList<>();\n      }\n  }\n  \n  /*\n  结果：\n  str0\n  str1\n  str2\n  str3\n  str4\n  str5\n  */\n  ```\n\n* #### 中介者模式：Mediator\n\n  用来降低多个对象和类之间的通信复杂性。\n\n  ```java\n  /* 用户类 */\n  public class User {\n      private String name;\n  \n      public String getName() {\n          return name;\n      }\n  \n      public void setName(String name) {\n          this.name = name;\n      }\n  \n      public User(String name){\n          this.name  = name;\n      }\n  \n      public void sendMessage(String message){\n          ChatRoom.showMessage(this, message);\n      }\n  }\n  \n  /* 聊天室类 */\n  public class ChatRoom {\n      public static void showMessage(User user, String message){\n          System.out.println(new Date().toString()\n                  + \" [\" + user.getName() +\"] : \" + message);\n      }\n  }\n  \n  /* main方法 */\n  public class MediatorMain {\n      public static void main(String[] args) {\n          User robert = new User(\"Robert\");\n          User john = new User(\"John\");\n  \n          robert.sendMessage(\"Hi! John!\");\n          john.sendMessage(\"Hello! Robert!\");\n      }\n  }\n  \n  /*\n  结果：\n  Sun Jul 19 19:03:25 CST 2020 [Robert] : Hi! John!\n  Sun Jul 19 19:03:25 CST 2020 [John] : Hello! Robert!\n  */\n  ```\n\n---\n\n* #### 备忘录模式：Memento\n\n  记录状态，用于恢复或者查看；可以通过对象持久化来记录对象状态\n\n---\n\n* #### 观察者模式：Observer Pattern\n\n  当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式，是基于事件通知的。\n\n  ```java\n  public interface DoThingObserver {\n      void actionOnDoThing(DoThingEvent event);\n  }\n  \n  public abstract class DoThingEvent<T> {\n      abstract T getSource();\n  }\n  \n  public class OneThingObserver implements DoThingObserver {\n      @Override\n      public void actionOnDoThing(DoThingEvent event) {\n          System.out.println(\"do one thing.\");\n      }\n  }\n  \n  public class TwoThingObserver implements DoThingObserver {\n      @Override\n      public void actionOnDoThing(DoThingEvent event) {\n          System.out.println(\"do two thing.\");\n      }\n  }\n  \n  public class OneThingEvent extends DoThingEvent<Student> {\n      private long timestamp;\n      private String loc;\n      private Student source;\n  \n      public OneThingEvent(long timestamp, String loc, Student source) {\n          this.timestamp = timestamp;\n          this.loc = loc;\n          this.source = source;\n      }\n  \n      @Override\n      Student getSource() {\n          return this.source;\n      }\n  }\n  \n  public class TwoThingEvent extends DoThingEvent<Teacher> {\n      private String loc;\n      private long timestamp;\n      private Teacher source;\n  \n      public TwoThingEvent(String loc, long timestamp, Teacher source) {\n          this.loc = loc;\n          this.timestamp = timestamp;\n          this.source = source;\n      }\n  \n      @Override\n      Teacher getSource() {\n          return this.source;\n      }\n  }\n  \n  import java.util.ArrayList;\n  import java.util.List;\n  \n  public class Student {\n      private String name;\n      private int age;\n  \n      private List<DoThingObserver> observers = new ArrayList<>();\n  \n      public Student addObserver(DoThingObserver observer){\n          observers.add(observer);\n          return this;\n      }\n  \n      public void action(){\n          System.out.println(\"student action\");\n          OneThingEvent event = new OneThingEvent(System.currentTimeMillis(), \"one thing\", this);\n          for (DoThingObserver o : observers) {\n              o.actionOnDoThing(event);\n          }\n      }\n  \n      public String getName() {\n          return name;\n      }\n  \n      public void setName(String name) {\n          this.name = name;\n      }\n  \n      public int getAge() {\n          return age;\n      }\n  \n      public void setAge(int age) {\n          this.age = age;\n      }\n  }\n  \n  \n  /* main方法 */\n  public class ObserverMain {\n      public static void main(String[] args) {\n          Student std = new Student();\n          std.action();  // 还没添加事件，所以输出为空\n          System.out.println(\"=============\");\n          std.addObserver(new OneThingObserver());\n          std.action();  // 添加事件后，会执行事件对应的方法\n  \n          // 因为事件监听（观察者）是一个函数式接口，所以可以通过lambda表达式添加监听\n          std.addObserver(event ->\n              System.out.println(\"use lambda to do thing.\")\n          );\n  \n          System.out.println(\"=============\");\n          std.action();  // 此时有2个事件\n      }\n  }\n  \n  /*\n  结果：\n  student action\n  =============\n  student action\n  do one thing.\n  =============\n  student action\n  do one thing.\n  use lambda to do thing.\n  */\n  ```\n\n---\n\n* #### 原型模式：Prototype\n\n  Java中有原型模式的实现：Object的clone()方法。使用需要：\n\n  1、实现Cloneable接口（标记性接口，没有需要实现的方法）\n\n  2、重写clone()方法\n\n  ```java\n  public class Apple implements Cloneable {\n      private String color;\n  \n      public Apple(String color) {\n          this.color = color;\n      }\n  \n      @Override\n      public Object clone() throws CloneNotSupportedException {\n          return super.clone();\n      }\n  \n      @Override\n      public String toString() {\n          return \"Apple{\" +\n                  \"color='\" + color + '\\'' +\n                  '}';\n      }\n  }\n  \n  /* main方法 */\n  public class PrototypeMain {\n      public static void main(String[] args) throws CloneNotSupportedException {\n          Apple apple = new Apple(\"red\");\n          Apple cloneApple = (Apple) apple.clone();  // 浅克隆，引用的实际内容没有克隆\n          System.out.println(apple);\n          System.out.println(cloneApple);\n      }\n  }\n  \n  /* \n  结果：\n  Apple{color='red'}\n  Apple{color='red'}\n  */\n  ```\n\n---\n\n* #### 代理模式：Proxy\n\n  代理模式中，有静态代理和动态代理。其中静态代理通过聚合实现，类似于装饰器模式。\n\n  动态代理在Java中可以使用JDK的proxy创建动态代理，需要被代理对象实现接口；使用cglib创建动态代理对象，不需要被代理对象实现接口。动态代理实际是使用asm来操作字节码修改或者创建代理。\n\n  ```java\n  public interface Movable {\n      void move();\n  }\n  \n  public class Car implements Movable {\n      @Override\n      public void move() {\n          System.out.println(\"the car moving...\");\n      }\n  }\n  \n  public class Plane {\n      public void move(){\n          System.out.println(\"plane fly ...\");\n      }\n  }\n  \n  // 静态代理：\n  public class CarProxy implements Movable {\n      private Movable m;\n  \n      public CarProxy(Movable m) {\n          this.m = m;\n      }\n  \n      @Override\n      public void move() {\n          System.out.println(\"静态代理：car proxy...\");\n          m.move();\n      }\n  }\n  \n  // 动态代理：\n  public class CarDynamicProxy implements InvocationHandler {\n  \n      // 动态代理的代理实现功能，要实现InvocationHandler接口的invoke()方法\n  \n      Movable m;\n  \n      public CarDynamicProxy(Movable m) {\n          this.m = m;\n      }\n  \n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable     {\n          System.out.println(\"动态代理：car move ...\");\n          Object o = method.invoke(m, args);\n          return o;\n      }\n  }\n  \n  \n  /**\n   * 飞机动态代理：使用cglib创建动态代理对象，不需要被代理对象实现接口\n   * 需要引入cglib的jar包：\n       <dependencies>\n          <dependency>\n              <groupId>cglib</groupId>\n              <artifactId>cglib</artifactId>\n              <version>3.1</version>\n          </dependency>\n      </dependencies>\n   */\n  import net.sf.cglib.proxy.MethodInterceptor;\n  import net.sf.cglib.proxy.MethodProxy;\n  import java.lang.reflect.Method;\n  \n  public class PlaneCGLibProxy implements MethodInterceptor {\n  \n  \n      public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n          System.out.println(\"cglib动态代理：plane fly ...\");\n          Object result = methodProxy.invokeSuper(o, objects);\n          return result;\n      }\n  }\n  \n  /* main方法 */\n  import net.sf.cglib.proxy.Enhancer;\n  import java.lang.reflect.Proxy;\n  \n  public class ProxyMain {\n      public static void main(String[] args) {\n          // 静态代理\n          Movable m1 = new CarProxy(new Car());\n          Movable m2 = new CarLogProxy(new Car());\n          m1.move();\n          m2.move();\n  \n          System.out.println(\"================\");\n  \n          // 动态代理\n          System.getProperties().put(\"jdk.proxy.ProxyGenerator.saveGeneratedFiles\", \"true\");  // 设置输出动态代理创建的动态代理字节码文件\n  \n          Movable m = (Movable) Proxy.newProxyInstance(Car.class.getClassLoader(),\n                  new Class[]{Movable.class},\n                  new CarDynamicProxy(new Car()));\n          m.move();\n  \n          // 使用cglib动态代理\n          System.out.println(\"================\");\n  \n          Enhancer enhancer = new Enhancer();\n          enhancer.setSuperclass(Plane.class);\n          enhancer.setCallback(new PlaneCGLibProxy());\n          Plane plane = (Plane)enhancer.create();\n          plane.move();\n      }\n  }\n  \n  /*\n  结果：\n  静态代理：car proxy...\n  the car moving...\n  静态代理：car move log...\n  the car moving...\n  ================\n  动态代理：car move ...\n  the car moving...\n  ================\n  cglib动态代理：plane fly ...\n  plane fly ...\n  */\n  ```\n\n---\n\n* #### 单例模式：Singleton\n\n  单例设计模式，顾名思义就是这个类的实例有且仅有一个。单例的实现中有很多方法，可以分为饿汉式（常用）和懒汉式。饿汉式天生线程安全，懒汉式需要加锁等使得线程安全。\n\n  ```java\n  // 1、饿汉式单例：随着类的加载创建一个单例出来\n  public class Singleton1 {\n      private static final Singleton1 INSTANCE = new Singleton1();\n      private Singleton1(){}  // 私有构造函数，防止外部创建实例\n      public static Singleton1 getInstance(){\n          return INSTANCE;\n      }\n  }\n  \n  // 2、饿汉式单例：随着类的加载创建一个单例出来，这里使用静态代码块创建单例\n  public class Singleton2 {\n      private static final Singleton2 INSTANCE;\n  \n      static {\n          INSTANCE = new Singleton2();\n      }\n      private Singleton2(){}  // 私有构造函数，防止外部创建实例\n      public static Singleton2 getInstance(){\n          return INSTANCE;\n      }\n  }\n  \n  // 3、懒汉式单例，实例延迟加载，但是会造成线程安全问题\n  public class Singleton3 {\n      private static Singleton3 INSTANCE;\n      private Singleton3(){}\n      \n      public static Singleton3 getInstance(){\n          if(null == INSTANCE){\n              INSTANCE = new Singleton3();\n          }\n          return INSTANCE;\n      }\n  }\n  \n  // 4、懒汉式单例，实例延迟加载，使用synchronized加锁，同步方法，线程安全\n  public class Singleton4 {\n      private static Singleton4 INSTANCE;\n      private Singleton4(){}\n  \n      public static synchronized Singleton4 getInstance(){\n          if(null == INSTANCE){\n              INSTANCE = new Singleton4();\n          }\n          return INSTANCE;\n      }\n  }\n  \n  // 5、懒汉式单例，实例延迟加载，使用synchronized加锁（双重锁），同步方法，线程安全\n  public class Singleton5 {\n      private static volatile Singleton5 INSTANCE;\n      private Singleton5(){}\n  \n      public static Singleton5 getInstance(){\n          if(null == INSTANCE){\n              synchronized (Singleton5.class){\n                  if(null == INSTANCE) INSTANCE = new Singleton5();\n              }\n          }\n          return INSTANCE;\n      }\n  }\n  \n  // 6、懒汉式单例，实例延迟加载，JVM加载 外部类 时不会加载 内部类，所以可以使用 静态内部类 来实现 懒汉式单例。\n  public class Singleton6 {\n  \n      private Singleton6(){}\n  \n      private static class Singleton{\n          private static final Singleton6 INSTANCE = new Singleton6();\n      }\n  \n      public static Singleton6 getInstance(){\n          return Singleton.INSTANCE;\n      }\n  }\n  \n  // 7、懒汉式枚举单例，实例延迟加载，线程安全，还可以防止反序列化。\n  public enum  Singleton7 {\n  \n      INSTANCE;\n  \n      /**\n       * 这是枚举单例的测试方法，枚举单例只需定义一个枚举值即可\n       */\n      public void printHashCode(){\n          System.out.println(INSTANCE.hashCode());\n      }\n  }\n  \n  // 8、解决单例模式的其他问题：1.反射强制实例化问题；2.反序列化问题\n  public class Singleton8 implements Serializable {\n  \n      private static final Singleton8 INSTANCE = new Singleton8();\n  \n      private Singleton8() {\n          if(INSTANCE != null){\n              throw new RuntimeException(\"不能强制实例化\");  // 解决反射强制实例化问题\n          }\n      }  // 私有构造函数，防止外部创建实例\n  \n      public static Singleton8 getInstance(){\n          return INSTANCE;\n      }\n  \n  \n      public Object readResolve(){\n          return INSTANCE;  // 解决反序列化问题\n      }\n  }\n  ```\n\n---\n\n* #### 状态模式：State\n\n  根据不同的状态，对同一动作会有不同的反应\n\n  ```java\n  /* 状态抽象类父类 */\n  public abstract class PersonState {\n      abstract void smile();\n      abstract void cry();\n      abstract void say();\n  }\n  \n  public class HappyState extends PersonState {\n      @Override\n      void smile() {\n          System.out.println(\"happy smile\");\n      }\n  \n      @Override\n      void cry() {\n          System.out.println(\"happy cry\");\n      }\n  \n      @Override\n      void say() {\n          System.out.println(\"happy say\");\n      }\n  }\n  \n  public class Person {\n      private PersonState state;\n  \n      public Person(PersonState state) {\n          this.state = state;\n      }\n  \n      public void smile(){\n          state.smile();\n      }\n  \n      public void cry(){\n          state.cry();\n      }\n  \n      public void say(){\n          state.say();\n      }\n  }\n  \n  /* main方法 */\n  public class StateMain {\n      public static void main(String[] args) {\n          Person p = new Person(new HappyState());\n          p.smile();\n          p.cry();\n          p.say();\n      }\n  }\n  \n  /*\n  结果：\n  [Student{name='tianqi', age=20, weight=60, height=180}, Student{name='zhaoliu', age=19, weight=61, height=175}, Student{name='lisi', age=18, weight=62, height=178}]\n  */\n  ```\n\n---\n\n* #### 模板模式（模板方法）：Template\n\n  在抽象的父类（模板）中，\n  定义了一个执行一系列方法的方法，\n  其中执行的一系列方法可以是抽象的也可以是实现的，\n  子类在继承父类后通过重写或者实现父类的方法，\n  实现模板执行\n\n  钩子函数也可以是模板方法，\n  在模板中预留钩子，通过重写执行钩子方法，\n  模板方法也可以是回调函数，通过预留回调方法，通过重写执行回调\n\n  ```java\n  public abstract class MyTemplate {\n      public void doTemplate(){\n          op1();\n          op2();\n          op3();\n          op4();\n      }\n  \n      void op1() {\n      }\n  \n      void op2() {\n      }\n  \n      void op3() {\n      }\n  \n      void op4() {\n      }\n  \n  }\n  \n  public class DoTemplate extends MyTemplate {\n  \n      @Override\n      public void op1(){\n          System.out.println(\"op1\");\n      }\n  \n      @Override\n      void op2() {\n          System.out.println(\"op2\");\n      }\n  \n      @Override\n      void op4() {\n          System.out.println(\"op4\");\n      }\n  }\n  \n  public class TemplateMain {\n      public static void main(String[] args) {\n          MyTemplate tple = new DoTemplate();\n          tple.doTemplate();\n      }\n  }\n  \n  /*\n  结果：\n  op1\n  op2\n  op4\n  */\n  ```\n\n---\n\n* #### 访问者模式：Visitor\n\n  在结构不变的情况下动态改变对于内部元素的动作\n\n  ```java\n  public interface Visitor {\n      void visitCpu(CPU cpu);\n      void visitMemory(Memory memory);\n      void visitBord(Bord bord);\n  \n  }\n  \n  public abstract class ComputerPart {\n  \n      public abstract void accept(Visitor v);\n  \n      public abstract double getPrice();\n  }\n  \n  public class CPU extends ComputerPart{\n  \n      private double price;\n  \n      public CPU() {\n          this.price = 1000.0;\n      }\n  \n      public CPU(double price) {\n          this.price = price;\n      }\n  \n      @Override\n      public void accept(Visitor v) {\n          v.visitCpu(this);\n      }\n  \n      @Override\n      public double getPrice() {\n          return this.price;\n      }\n  \n      public void setPrice(double price) {\n          this.price = price;\n      }\n  }\n  \n  public class Memory extends ComputerPart {\n  \n      private double price;\n  \n      public Memory() {\n          this.price = 400.0;\n      }\n  \n      public Memory(double price) {\n          this.price = price;\n      }\n  \n      @Override\n      public void accept(Visitor v) {\n          v.visitMemory(this);\n      }\n  \n      @Override\n      public double getPrice() {\n          return this.price;\n      }\n  \n      public void setPrice(double price) {\n          this.price = price;\n      }\n  }\n  \n  public class Bord extends ComputerPart {\n  \n      private double price;\n  \n      public Bord() {\n          this.price = 600.0;\n      }\n  \n      public Bord(double price) {\n          this.price = price;\n      }\n  \n      @Override\n      public void accept(Visitor v) {\n          v.visitBord(this);\n      }\n  \n      @Override\n      public double getPrice() {\n          return this.price;\n      }\n  \n      public void setPrice(double price) {\n          this.price = price;\n      }\n  }\n  \n  public class PersonVisitor implements Visitor {\n  \n      private double totalPrice = 0.0;\n  \n      @Override\n      public void visitCpu(CPU cpu) {\n          this.totalPrice = totalPrice + (cpu.getPrice() * 0.9);\n      }\n  \n      @Override\n      public void visitMemory(Memory memory) {\n          this.totalPrice = totalPrice + (memory.getPrice() * 0.85);\n      }\n  \n      @Override\n      public void visitBord(Bord bord) {\n          this.totalPrice = totalPrice + (bord.getPrice() * 0.95);\n      }\n  \n      public double getTotalPrice() {\n          return totalPrice;\n      }\n  }\n  \n  public class Computer {\n  \n      private CPU cpu;\n      private Memory memory;\n      private Bord bord;\n  \n      public Computer() {\n          this.cpu = new CPU();\n          this.memory = new Memory();\n          this.bord = new Bord();\n      }\n  \n      public Computer(double cpuPrice, double memoryPrice, double bordPrice) {\n          this.cpu = new CPU(cpuPrice);\n          this.memory = new Memory(memoryPrice);\n          this.bord = new Bord(bordPrice);\n      }\n  \n      public void accept(Visitor v){\n          this.cpu.accept(v);\n          this.memory.accept(v);\n          this.bord.accept(v);\n      }\n  \n  }\n  \n  \n  public class VisitorMain {\n      public static void main(String[] args) {\n  \n          Computer computer = new Computer(1068.88, 868.99, 488.99);\n          PersonVisitor personVisitor = new PersonVisitor();\n          computer.accept(personVisitor);\n          System.out.println(personVisitor.getTotalPrice());\n      }\n  }\n  \n  /*\n  结果：\n  电脑价格：2165.174\n  */\n  ```\n\n---\n\n### 常用的设计模式大概就是这些了~~~\n\n> #### 谢谢浏览！END~\n\n","source":"_posts/常用设计模式.md","raw":"---\ntitle: 常用设计模式\ndate: 2020-07-26 23:30:47\ntags: 设计模式\n---\n\n## 常用设计模式\n\n* #### 转换器（适配器）模式：Adapter\t\n\n  一般用于不同规范/格式/形式之间的转换连接，Java中的字节流和字符流转换就是适配器模式实现\n\n---\n\n* #### 桥接模式（双向拓展模式）：Bridge\n\n  分离抽象和具体，通过聚合联系在一起\n\n  ```java\n  /* 这个是礼物类，礼物是抽象的，里面定义一个具体礼物实现类 */\n  public abstract class Gift {\n      GiftImpl impl;  // 具体礼物\n  \n      public Gift(GiftImpl impl){\n          this.impl = impl;\n      }\n  }\n  \n  \n  /* 具体礼物实现类父类 */\n  public class GiftImpl {\n  \n  }\n  \n  /* 书作为具体礼物，继承GiftImpl */\n  public class Book extends GiftImpl {\n  \n  }\n  \n  /* 花作为具体礼物，继承GiftImpl */\n  public class Flower extends GiftImpl {\n  \n  }\n  \n  /* 大的礼物，作为“大”这个抽象的概念继承Gift */\n  public class BigGift extends Gift {\n      public BigGift(GiftImpl impl){\n          super(impl);\n      }\n  }\n  \n  /* 小的礼物，作为“小这个抽象的概念继承Gift” */\n  public class SmallGift extends Gift {\n      public SmallGift(GiftImpl impl) {\n          super(impl);\n      }\n  }\n  \n  /* main方法 */\n  public class BridgeMain {\n      public static void main(String[] args) {\n          // 通过聚合，把抽象的和具体的联系起来\n          // 通过抽象和具体的组合，有更多的不同礼物\n          Gift gift1 = new BigGift(new Book());  // 大的书作为礼物\n          Gift gift2 = new BigGift(new Book());  // 小的书作为礼物\n      }\n  }\n  ```\n\n---\n\n* #### 构建器模式：Builder\n\n  通过构建器来构造复杂的对象，而且可以通过不同的构建器构造不同功能或者不同表现的对象\n\n---\n\n* #### 命令模式：Command\n\n  command+Cor（责任链模式）实现do和undo功能\n\n---\n\n* #### 组合模式：Composite\n\n  一般需要树状结构时使用\n\n  ```java\n  /* 所有种类节点的父类 */\n  public abstract class Node {\n      public abstract void printNode();\n  }\n  \n  /* 分支节点（目录，节点下面还有内容） */\n  import java.util.ArrayList;\n  import java.util.List;\n  \n  public class BranchNode extends Node {\n      private String name;\n      private List<Node> nodes = new ArrayList<>();\n  \n      public BranchNode(String name) {\n          this.name = name;\n      }\n  \n      @Override\n      public void printNode() {\n          System.out.println(this.name);\n      }\n  \n      public BranchNode addNode(Node n){\n          this.nodes.add(n);\n          return this;\n      }\n  \n      public void printAllNode(){\n          this.printAllNode(this, 0);\n      }\n  \n      public void printAllNode(Node node, int depth){\n          for (int i = 0; i < depth; i++) System.out.print(\"-|\");\n  \n          node.printNode();\n          if(node instanceof BranchNode){\n              for(Node n : ((BranchNode)node).nodes){\n                  printAllNode(n, depth+1);\n              }\n          }\n      }\n  }\n  \n  /* 叶子节点（文件，下面没内容） */\n  public class LeafNode extends Node {\n      private String context;\n  \n      public LeafNode(String context) {\n          this.context = context;\n      }\n  \n      @Override\n      public void printNode() {\n          System.out.println(this.context);\n      }\n  }\n  \n  /* main方法 */\n  public class CompositeMain {\n      public static void main(String[] args) {\n          BranchNode root = new BranchNode(\"root\");\n          BranchNode a1 = new BranchNode(\"a1\");\n          BranchNode a2 = new BranchNode(\"a2\");\n          LeafNode b1 = new LeafNode(\"b1\");\n          LeafNode b2 = new LeafNode(\"b2\");\n          LeafNode b3 = new LeafNode(\"b3\");\n          root.addNode(a1).addNode(a2).addNode(b1);\n          a2.addNode(b2).addNode(b3);\n  \n          root.printAllNode();\n      }\n  }\n  \n  /*\n  结果：\n  root\n  -|a1\n  -|a2\n  -|-|b2\n  -|-|b3\n  -|b1\n  */\n  ```\n\n---\n\n* #### 责任链模式：Chain of Responsibility Pattern\n\n  为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦，属于行为型模式。\n\n  ```java\n  /* 所有filter或者filterchain都需要实现该接口 */\n  public interface Filter {\n      void doFilter(Request request, Response response, FilterChain chain);\n  }\n  \n  /* FilterChain */\n  import java.util.ArrayList;\n  import java.util.List;\n  \n  public class FilterChain implements Filter {\n  \n      private List<Filter> filters = new ArrayList<>();\n  \n      private int index = 0;\n  \n      public FilterChain addFilter(Filter f){\n          filters.add(f);\n          return this;\n      }\n  \n      @Override\n      public void doFilter(Request request, Response response, FilterChain chain) {\n          if(index == filters.size()) return;\n          Filter filter = filters.get(index++);\n          filter.doFilter(request, response, chain);\n      }\n  }\n  \n  /* HTMLFilter */\n  public class HTMLFilter implements Filter {\n      @Override\n      public void doFilter(Request request, Response response, FilterChain chain) {\n          String str = \" -> HTMLFilter\";\n          request.setStr(request.getStr() + str);\n          chain.doFilter(request, response, chain);\n          response.setStr(response.getStr() + str);\n      }\n  }\n  \n  /* SensitiveFilter */\n  public class SensitiveFilter implements Filter {\n      @Override\n      public void doFilter(Request request, Response response, FilterChain chain) {\n          String str = \" -> SensitiveFilter\";\n          request.setStr(request.getStr() + str);\n          chain.doFilter(request, response, chain);\n          response.setStr(response.getStr() + str);\n      }\n  }\n  \n  /* Request */\n  public class Request {\n      private String str;\n  \n      public Request() {\n      }\n  \n      public Request(String str) {\n          this.str = str;\n      }\n  \n      public String getStr() {\n          return str;\n      }\n  \n      public void setStr(String str) {\n          this.str = str;\n      }\n  \n      @Override\n      public String toString() {\n          return this.str;\n      }\n  }\n  \n  /* Response */\n  public class Response {\n      private String str;\n  \n      public Response() {\n      }\n  \n      public Response(String str) {\n          this.str = str;\n      }\n  \n      public String getStr() {\n          return str;\n      }\n  \n      public void setStr(String str) {\n          this.str = str;\n      }\n  \n      @Override\n      public String toString() {\n          return this.str;\n      }\n  }\n  \n  /* main方法 */\n  public class CorMain {\n      public static void main(String[] args) {\n          FilterChain chain = new FilterChain();\n          chain.addFilter(new HTMLFilter()).addFilter(new SensitiveFilter());\n          Request request = new Request(\"request\");\n          Response response = new Response(\"response\");\n          chain.doFilter(request, response, chain);\n          System.out.println(request);\n          System.out.println(response);\n      }\n  }\n  \n  /*\n  结果：\n  request -> HTMLFilter -> SensitiveFilter\n  response -> SensitiveFilter -> HTMLFilter\n  */\n  ```\n\n---\n\n* #### 装饰器模式：Decorator Pattern\n\n  允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。\n\n  ```java\n  /* 装饰器和被装饰的类都要实现这个接口 */\n  public interface Decor {\n      void draw();\n  }\n  \n  /* Circle */\n  public class Circle implements Decor {\n      @Override\n      public void draw() {\n          System.out.println(\"Circle::draw()\");\n      }\n  }\n  \n  /* Rectangle */\n  public class Rectangle implements Decor {\n  \n      @Override\n      public void draw() {\n          System.out.println(\"Rectangle::draw()\");\n      }\n  }\n  \n  /* Decorator 装饰器的抽象父类 */\n  public abstract class DecorDecorator implements Decor {\n      protected Decor decoratedDecor;\n  \n      public DecorDecorator(Decor decoratedDecor){\n          this.decoratedDecor = decoratedDecor;\n      }\n  \n      public void draw(){\n          decoratedDecor.draw();\n      }\n  }\n  \n  /* RedDecorDecorator 红色装饰器，为图行添加颜色 */\n  public class RedDecorDecorator extends DecorDecorator {\n      public RedDecorDecorator(Decor decoratedDecor) {\n          super(decoratedDecor);\n      }\n  \n      @Override\n      public void draw() {\n          decoratedDecor.draw();\n          setRedBorder(decoratedDecor);\n      }\n  \n      private void setRedBorder(Decor decoratedDecor){\n          System.out.println(\"Border Color: Red\");\n      }\n  }\n  \n  /* main方法 */\n  public class DecoratorMain {\n      public static void main(String[] args) {\n          Shape circle = new Circle();\n          Shape redCircle = new RedShapeDecorator(new Circle());\n          Shape redRectangle = new RedShapeDecorator(new Rectangle());\n          System.out.println(\"Circle with normal border\");\n          circle.draw();\n  \n          System.out.println(\"\\nCircle of red border\");\n          redCircle.draw();\n  \n          System.out.println(\"\\nRectangle of red border\");\n          redRectangle.draw();\n      }\n  }\n  \n  /*\n  结果：\n  Circle with normal border\n  Circle::draw()\n  \n  Circle of red border\n  Circle::draw()\n  Border Color: Red\n  \n  Rectangle of red border\n  Rectangle::draw()\n  Border Color: Red\n  */\n  ```\n\n---\n\n* #### 外观模式： Facade\n\n  隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口，解决内部复杂问题，对外提供简单接口。其实就是把一些有联系的复杂功能通过一个接口提供。\n\n  ```java\n  /* 各种提供功能的类实现这个接口 */\n  public interface Shape {\n      void draw();\n  }\n  \n  /* Circle */\n  public class Circle implements Decor {\n      @Override\n      public void draw() {\n          System.out.println(\"Circle::draw()\");\n      }\n  }\n  \n  /* Rectangle */\n  public class Rectangle implements Decor {\n  \n      @Override\n      public void draw() {\n          System.out.println(\"Rectangle::draw()\");\n      }\n  }\n  \n  /* Square */\n  public class Square implements Shape {\n      @Override\n      public void draw() {\n          System.out.println(\"Square::draw()\");\n      }\n  }\n  \n  /* ShapeMaker,提供复杂功能的API类 */\n  public class ShapeMaker {\n      private Shape circle;\n      private Shape rectangle;\n      private Shape square;\n  \n      public ShapeMaker() {\n          circle = new Circle();\n          rectangle = new Rectangle();\n          square = new Square();\n      }\n  \n      public void drawCircle(){\n          circle.draw();\n      }\n      public void drawRectangle(){\n          rectangle.draw();\n      }\n      public void drawSquare(){\n          square.draw();\n      }\n  }\n  \n  /* main方法 */\n  public class FacadeMain {\n      public static void main(String[] args) {\n          // 通过ShapeMaker提供各种图形的功能\n          ShapeMaker shapeMaker = new ShapeMaker(); \n  \n          shapeMaker.drawCircle();\n          shapeMaker.drawRectangle();\n          shapeMaker.drawSquare();\n      }\n  }\n  \n  /*\n  结果：\n  Circle::draw()\n  Rectangle::draw()\n  Square::draw()\n  */\n  ```\n\n---\n\n* #### 工厂模式：Factory\n\n  工厂模式，主要有简单工厂、工厂方法、抽象工厂三种\n\n  * 简单工厂：就是一个工厂创建不同的同类型对象返回\n  * 工厂方法：每个类都有自己的工厂来创建对象，便于单个产品的拓展\n  * 抽象工厂：通过继承抽象工厂，实现不同族的工厂，用于返回对应的不同族对象；便于拓展不同的产品族\n\n  ```java\n  // 抽象工厂：\n  \n  /* AbstractFactory */\n  public abstract class AbstractFactory {\n      abstract Food createFood();\n      abstract Vehicle createVehicle();\n  }\n  \n  /* AbstractFactoryExtOne */\n  public class AbstractFactoryExtOne extends AbstractFactory {\n      @Override\n      Food createFood() {\n          return new Bread();\n      }\n  \n      @Override\n      Vehicle createVehicle() {\n          return new Car();\n      }\n  }\n  \n  /* AbstractFactoryExtTwo */\n  public class AbstractFactoryExtTwo extends AbstractFactory {\n      @Override\n      Food createFood() {\n          return new Beef();\n      }\n  \n      @Override\n      Vehicle createVehicle() {\n          return new Plane();\n      }\n  }\n  \n  /* Food */\n  public abstract class Food {\n      abstract void printName();\n  }\n  \n  /* Vehicle */\n  public abstract class Vehicle {\n      abstract void go();\n  }\n  \n  \n  public class Beef extends Food {\n  \n      @Override\n      void printName() {\n          System.out.println(\"牛肉\");\n      }\n  }\n  \n  public class Bread extends Food {\n  \n      @Override\n      void printName() {\n          System.out.println(\"面包\");\n      }\n  }\n  \n  public class Car extends Vehicle {\n  \n      @Override\n      public void go(){\n          System.out.println(\"车启动...\");\n      }\n  \n  }\n  \n  public class Plane extends Vehicle {\n  \n      @Override\n      public void go() {\n          System.out.println(\"飞机启动...\");\n      }\n  }\n  \n  /* main方法 */\n  public class AbstractFactoryMain {\n      public static void main(String[] args) {\n          AbstractFactory fc = new AbstractFactoryExtOne();\n  //        AbstractFactory fc = new AbstractFactoryExtTwo();\n          Vehicle v = fc.createVehicle();\n          Food f = fc.createFood();\n          v.go();\n          f.printName();\n      }\n  }\n  ```\n\n---\n\n* #### 享元模式：FlyWeight\n\n  通过共享元对象（比较小的或者常用的对象），减少创建过多对象，类似于池的技术\n\n  ```java\n  public class Word {\n      private char w;\n  \n      public Word(char w) {\n          this.w = w;\n      }\n  \n      public char getW() {\n          return w;\n      }\n  }\n  \n  public class AWord extends Word {\n      public AWord() {\n          super('A');\n      }\n  \n  }\n  \n  public class BWord extends Word {\n      public BWord() {\n          super('B');\n      }\n  \n  }\n  \n  public class CWord extends Word {\n      public CWord() {\n          super('C');\n      }\n  \n  }\n  \n  /* WordPool */\n  import java.util.ArrayList;\n  import java.util.List;\n  \n  public class WordPool {\n      private int size;\n      private List<Word> words = new ArrayList<>();\n  \n      public WordPool(){\n          addWord(new AWord());\n          addWord(new BWord());\n          addWord(new CWord());\n      }\n  \n      public WordPool addWord(Word w){\n          this.words.add(w);\n          size++;\n          return this;\n      }\n  \n      public WordPool extendWordList(List<Word> wList){\n          for (Word word : wList) {\n              this.words.add(word);\n              size++;\n          }\n          return this;\n      }\n  \n      public Word getWord(int index){\n          if(index >= size || index < 0) index = size-1;\n          return this.words.get(index);\n      }\n  \n      public int getSize() {\n          return size;\n      }\n  \n      public List<Word> getWords() {\n          return words;\n      }\n  }\n  \n  /* main方法 */\n  public class FlyWeightMain {\n      public static void main(String[] args) {\n          WordPool wordPool = new WordPool();\n          Word w1 = wordPool.getWord(0);\n          Word w2 = wordPool.getWord(1);\n          Word w3 = wordPool.getWord(2);\n          System.out.println(w1.getW());\n          System.out.println(w2.getW());\n          System.out.println(w3.getW());\n  \n          System.out.println(\"===========\");\n          Word w4 = wordPool.getWord(0);\n          System.out.println(w4 == w1);\n      }\n  }\n  \n  /*\n  结果：\n  A\n  B\n  C\n  ===========\n  true\n  */\n  ```\n\n---\n\n* #### 解释器模式：intepreter\n\n  解释脚本，一般操作系统中或者解释器中用得比较多。\n\n---\n\n* #### 迭代器模式：Iterator\n\n  主要用于集合元素的遍历\n\n  ```java\n  \n  public class IteratorMain {\n      public static void main(String[] args) {\n  \n          _Collection<String> list = new _ArrayList<>();\n  \n          for (int i = 0; i < 16; i++) {\n              list.add(\"str\" + i);\n          }\n  \n          // 通过迭代器模式，实现通用的集合遍历：\n          _Iterator iterator = list.iterator();\n          while(iterator.hasNext()){\n              System.out.println(iterator.next());\n          }\n          new ArrayList<>();\n      }\n  }\n  \n  /* 自定义的集合接口：_Collection */\n  public interface _Collection<E> {\n      void add(E o);\n      int size();\n      _Iterator iterator();  // 规定集合中要有获取迭代器实现的方法\n  }\n  \n  /* 自定义的迭代器接口：_Iterator */\n  public interface  _Iterator<E> {\n      boolean hasNext();  // 判断是否还有下一个元素\n      E next();  // 返回下一个元素\n  }\n  \n  /* 自定义的List集合：_ArrayList，实现_Collection */\n  public class _ArrayList<E> implements _Collection<E>{\n  \n      private Object[] objects;\n      private int capacity;\n      private int index = 0;\n  \n      public _ArrayList() {\n          this.objects = new Object[10];\n          this.capacity = 10;\n      }\n  \n      public _ArrayList(int capacity) {\n          this.objects = new Object[capacity];\n          this.capacity = capacity;\n      }\n  \n      @Override\n      public void add(E o) {\n          if(index >= capacity){\n              Object[] temp = new Object[this.capacity=(capacity * 2)];\n              System.arraycopy(this.objects, 0, temp, 0, index);\n              this.objects = temp;\n          }\n          this.objects[index++] = o;\n      }\n  \n      @Override\n      public int size() {\n          return this.index;\n      }\n  \n      @Override\n      public _Iterator iterator() {\n          return new Itr();\n      }\n  \n      // 使用内部类实现迭代器接口\n      private class Itr<E> implements _Iterator<E>{\n          int len = -1;\n  \n          @Override\n          public boolean hasNext() {\n              if(index <= ++len){\n                  return false;\n              }\n              return true;\n          }\n  \n          @Override\n          public E next() {\n              return (E)objects[len];\n          }\n      }\n  }\n  \n  /* main方法 */\n  public class IteratorMain {\n      public static void main(String[] args) {\n  \n          _Collection<String> list = new _ArrayList<>();\n  \n          for (int i = 0; i < 6; i++) {\n              list.add(\"str\" + i);\n          }\n  \n          // 通过迭代器模式，实现通用的集合遍历：\n          _Iterator iterator = list.iterator();\n          while(iterator.hasNext()){\n              System.out.println(iterator.next());\n          }\n  \n          new ArrayList<>();\n      }\n  }\n  \n  /*\n  结果：\n  str0\n  str1\n  str2\n  str3\n  str4\n  str5\n  */\n  ```\n\n* #### 中介者模式：Mediator\n\n  用来降低多个对象和类之间的通信复杂性。\n\n  ```java\n  /* 用户类 */\n  public class User {\n      private String name;\n  \n      public String getName() {\n          return name;\n      }\n  \n      public void setName(String name) {\n          this.name = name;\n      }\n  \n      public User(String name){\n          this.name  = name;\n      }\n  \n      public void sendMessage(String message){\n          ChatRoom.showMessage(this, message);\n      }\n  }\n  \n  /* 聊天室类 */\n  public class ChatRoom {\n      public static void showMessage(User user, String message){\n          System.out.println(new Date().toString()\n                  + \" [\" + user.getName() +\"] : \" + message);\n      }\n  }\n  \n  /* main方法 */\n  public class MediatorMain {\n      public static void main(String[] args) {\n          User robert = new User(\"Robert\");\n          User john = new User(\"John\");\n  \n          robert.sendMessage(\"Hi! John!\");\n          john.sendMessage(\"Hello! Robert!\");\n      }\n  }\n  \n  /*\n  结果：\n  Sun Jul 19 19:03:25 CST 2020 [Robert] : Hi! John!\n  Sun Jul 19 19:03:25 CST 2020 [John] : Hello! Robert!\n  */\n  ```\n\n---\n\n* #### 备忘录模式：Memento\n\n  记录状态，用于恢复或者查看；可以通过对象持久化来记录对象状态\n\n---\n\n* #### 观察者模式：Observer Pattern\n\n  当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式，是基于事件通知的。\n\n  ```java\n  public interface DoThingObserver {\n      void actionOnDoThing(DoThingEvent event);\n  }\n  \n  public abstract class DoThingEvent<T> {\n      abstract T getSource();\n  }\n  \n  public class OneThingObserver implements DoThingObserver {\n      @Override\n      public void actionOnDoThing(DoThingEvent event) {\n          System.out.println(\"do one thing.\");\n      }\n  }\n  \n  public class TwoThingObserver implements DoThingObserver {\n      @Override\n      public void actionOnDoThing(DoThingEvent event) {\n          System.out.println(\"do two thing.\");\n      }\n  }\n  \n  public class OneThingEvent extends DoThingEvent<Student> {\n      private long timestamp;\n      private String loc;\n      private Student source;\n  \n      public OneThingEvent(long timestamp, String loc, Student source) {\n          this.timestamp = timestamp;\n          this.loc = loc;\n          this.source = source;\n      }\n  \n      @Override\n      Student getSource() {\n          return this.source;\n      }\n  }\n  \n  public class TwoThingEvent extends DoThingEvent<Teacher> {\n      private String loc;\n      private long timestamp;\n      private Teacher source;\n  \n      public TwoThingEvent(String loc, long timestamp, Teacher source) {\n          this.loc = loc;\n          this.timestamp = timestamp;\n          this.source = source;\n      }\n  \n      @Override\n      Teacher getSource() {\n          return this.source;\n      }\n  }\n  \n  import java.util.ArrayList;\n  import java.util.List;\n  \n  public class Student {\n      private String name;\n      private int age;\n  \n      private List<DoThingObserver> observers = new ArrayList<>();\n  \n      public Student addObserver(DoThingObserver observer){\n          observers.add(observer);\n          return this;\n      }\n  \n      public void action(){\n          System.out.println(\"student action\");\n          OneThingEvent event = new OneThingEvent(System.currentTimeMillis(), \"one thing\", this);\n          for (DoThingObserver o : observers) {\n              o.actionOnDoThing(event);\n          }\n      }\n  \n      public String getName() {\n          return name;\n      }\n  \n      public void setName(String name) {\n          this.name = name;\n      }\n  \n      public int getAge() {\n          return age;\n      }\n  \n      public void setAge(int age) {\n          this.age = age;\n      }\n  }\n  \n  \n  /* main方法 */\n  public class ObserverMain {\n      public static void main(String[] args) {\n          Student std = new Student();\n          std.action();  // 还没添加事件，所以输出为空\n          System.out.println(\"=============\");\n          std.addObserver(new OneThingObserver());\n          std.action();  // 添加事件后，会执行事件对应的方法\n  \n          // 因为事件监听（观察者）是一个函数式接口，所以可以通过lambda表达式添加监听\n          std.addObserver(event ->\n              System.out.println(\"use lambda to do thing.\")\n          );\n  \n          System.out.println(\"=============\");\n          std.action();  // 此时有2个事件\n      }\n  }\n  \n  /*\n  结果：\n  student action\n  =============\n  student action\n  do one thing.\n  =============\n  student action\n  do one thing.\n  use lambda to do thing.\n  */\n  ```\n\n---\n\n* #### 原型模式：Prototype\n\n  Java中有原型模式的实现：Object的clone()方法。使用需要：\n\n  1、实现Cloneable接口（标记性接口，没有需要实现的方法）\n\n  2、重写clone()方法\n\n  ```java\n  public class Apple implements Cloneable {\n      private String color;\n  \n      public Apple(String color) {\n          this.color = color;\n      }\n  \n      @Override\n      public Object clone() throws CloneNotSupportedException {\n          return super.clone();\n      }\n  \n      @Override\n      public String toString() {\n          return \"Apple{\" +\n                  \"color='\" + color + '\\'' +\n                  '}';\n      }\n  }\n  \n  /* main方法 */\n  public class PrototypeMain {\n      public static void main(String[] args) throws CloneNotSupportedException {\n          Apple apple = new Apple(\"red\");\n          Apple cloneApple = (Apple) apple.clone();  // 浅克隆，引用的实际内容没有克隆\n          System.out.println(apple);\n          System.out.println(cloneApple);\n      }\n  }\n  \n  /* \n  结果：\n  Apple{color='red'}\n  Apple{color='red'}\n  */\n  ```\n\n---\n\n* #### 代理模式：Proxy\n\n  代理模式中，有静态代理和动态代理。其中静态代理通过聚合实现，类似于装饰器模式。\n\n  动态代理在Java中可以使用JDK的proxy创建动态代理，需要被代理对象实现接口；使用cglib创建动态代理对象，不需要被代理对象实现接口。动态代理实际是使用asm来操作字节码修改或者创建代理。\n\n  ```java\n  public interface Movable {\n      void move();\n  }\n  \n  public class Car implements Movable {\n      @Override\n      public void move() {\n          System.out.println(\"the car moving...\");\n      }\n  }\n  \n  public class Plane {\n      public void move(){\n          System.out.println(\"plane fly ...\");\n      }\n  }\n  \n  // 静态代理：\n  public class CarProxy implements Movable {\n      private Movable m;\n  \n      public CarProxy(Movable m) {\n          this.m = m;\n      }\n  \n      @Override\n      public void move() {\n          System.out.println(\"静态代理：car proxy...\");\n          m.move();\n      }\n  }\n  \n  // 动态代理：\n  public class CarDynamicProxy implements InvocationHandler {\n  \n      // 动态代理的代理实现功能，要实现InvocationHandler接口的invoke()方法\n  \n      Movable m;\n  \n      public CarDynamicProxy(Movable m) {\n          this.m = m;\n      }\n  \n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable     {\n          System.out.println(\"动态代理：car move ...\");\n          Object o = method.invoke(m, args);\n          return o;\n      }\n  }\n  \n  \n  /**\n   * 飞机动态代理：使用cglib创建动态代理对象，不需要被代理对象实现接口\n   * 需要引入cglib的jar包：\n       <dependencies>\n          <dependency>\n              <groupId>cglib</groupId>\n              <artifactId>cglib</artifactId>\n              <version>3.1</version>\n          </dependency>\n      </dependencies>\n   */\n  import net.sf.cglib.proxy.MethodInterceptor;\n  import net.sf.cglib.proxy.MethodProxy;\n  import java.lang.reflect.Method;\n  \n  public class PlaneCGLibProxy implements MethodInterceptor {\n  \n  \n      public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n          System.out.println(\"cglib动态代理：plane fly ...\");\n          Object result = methodProxy.invokeSuper(o, objects);\n          return result;\n      }\n  }\n  \n  /* main方法 */\n  import net.sf.cglib.proxy.Enhancer;\n  import java.lang.reflect.Proxy;\n  \n  public class ProxyMain {\n      public static void main(String[] args) {\n          // 静态代理\n          Movable m1 = new CarProxy(new Car());\n          Movable m2 = new CarLogProxy(new Car());\n          m1.move();\n          m2.move();\n  \n          System.out.println(\"================\");\n  \n          // 动态代理\n          System.getProperties().put(\"jdk.proxy.ProxyGenerator.saveGeneratedFiles\", \"true\");  // 设置输出动态代理创建的动态代理字节码文件\n  \n          Movable m = (Movable) Proxy.newProxyInstance(Car.class.getClassLoader(),\n                  new Class[]{Movable.class},\n                  new CarDynamicProxy(new Car()));\n          m.move();\n  \n          // 使用cglib动态代理\n          System.out.println(\"================\");\n  \n          Enhancer enhancer = new Enhancer();\n          enhancer.setSuperclass(Plane.class);\n          enhancer.setCallback(new PlaneCGLibProxy());\n          Plane plane = (Plane)enhancer.create();\n          plane.move();\n      }\n  }\n  \n  /*\n  结果：\n  静态代理：car proxy...\n  the car moving...\n  静态代理：car move log...\n  the car moving...\n  ================\n  动态代理：car move ...\n  the car moving...\n  ================\n  cglib动态代理：plane fly ...\n  plane fly ...\n  */\n  ```\n\n---\n\n* #### 单例模式：Singleton\n\n  单例设计模式，顾名思义就是这个类的实例有且仅有一个。单例的实现中有很多方法，可以分为饿汉式（常用）和懒汉式。饿汉式天生线程安全，懒汉式需要加锁等使得线程安全。\n\n  ```java\n  // 1、饿汉式单例：随着类的加载创建一个单例出来\n  public class Singleton1 {\n      private static final Singleton1 INSTANCE = new Singleton1();\n      private Singleton1(){}  // 私有构造函数，防止外部创建实例\n      public static Singleton1 getInstance(){\n          return INSTANCE;\n      }\n  }\n  \n  // 2、饿汉式单例：随着类的加载创建一个单例出来，这里使用静态代码块创建单例\n  public class Singleton2 {\n      private static final Singleton2 INSTANCE;\n  \n      static {\n          INSTANCE = new Singleton2();\n      }\n      private Singleton2(){}  // 私有构造函数，防止外部创建实例\n      public static Singleton2 getInstance(){\n          return INSTANCE;\n      }\n  }\n  \n  // 3、懒汉式单例，实例延迟加载，但是会造成线程安全问题\n  public class Singleton3 {\n      private static Singleton3 INSTANCE;\n      private Singleton3(){}\n      \n      public static Singleton3 getInstance(){\n          if(null == INSTANCE){\n              INSTANCE = new Singleton3();\n          }\n          return INSTANCE;\n      }\n  }\n  \n  // 4、懒汉式单例，实例延迟加载，使用synchronized加锁，同步方法，线程安全\n  public class Singleton4 {\n      private static Singleton4 INSTANCE;\n      private Singleton4(){}\n  \n      public static synchronized Singleton4 getInstance(){\n          if(null == INSTANCE){\n              INSTANCE = new Singleton4();\n          }\n          return INSTANCE;\n      }\n  }\n  \n  // 5、懒汉式单例，实例延迟加载，使用synchronized加锁（双重锁），同步方法，线程安全\n  public class Singleton5 {\n      private static volatile Singleton5 INSTANCE;\n      private Singleton5(){}\n  \n      public static Singleton5 getInstance(){\n          if(null == INSTANCE){\n              synchronized (Singleton5.class){\n                  if(null == INSTANCE) INSTANCE = new Singleton5();\n              }\n          }\n          return INSTANCE;\n      }\n  }\n  \n  // 6、懒汉式单例，实例延迟加载，JVM加载 外部类 时不会加载 内部类，所以可以使用 静态内部类 来实现 懒汉式单例。\n  public class Singleton6 {\n  \n      private Singleton6(){}\n  \n      private static class Singleton{\n          private static final Singleton6 INSTANCE = new Singleton6();\n      }\n  \n      public static Singleton6 getInstance(){\n          return Singleton.INSTANCE;\n      }\n  }\n  \n  // 7、懒汉式枚举单例，实例延迟加载，线程安全，还可以防止反序列化。\n  public enum  Singleton7 {\n  \n      INSTANCE;\n  \n      /**\n       * 这是枚举单例的测试方法，枚举单例只需定义一个枚举值即可\n       */\n      public void printHashCode(){\n          System.out.println(INSTANCE.hashCode());\n      }\n  }\n  \n  // 8、解决单例模式的其他问题：1.反射强制实例化问题；2.反序列化问题\n  public class Singleton8 implements Serializable {\n  \n      private static final Singleton8 INSTANCE = new Singleton8();\n  \n      private Singleton8() {\n          if(INSTANCE != null){\n              throw new RuntimeException(\"不能强制实例化\");  // 解决反射强制实例化问题\n          }\n      }  // 私有构造函数，防止外部创建实例\n  \n      public static Singleton8 getInstance(){\n          return INSTANCE;\n      }\n  \n  \n      public Object readResolve(){\n          return INSTANCE;  // 解决反序列化问题\n      }\n  }\n  ```\n\n---\n\n* #### 状态模式：State\n\n  根据不同的状态，对同一动作会有不同的反应\n\n  ```java\n  /* 状态抽象类父类 */\n  public abstract class PersonState {\n      abstract void smile();\n      abstract void cry();\n      abstract void say();\n  }\n  \n  public class HappyState extends PersonState {\n      @Override\n      void smile() {\n          System.out.println(\"happy smile\");\n      }\n  \n      @Override\n      void cry() {\n          System.out.println(\"happy cry\");\n      }\n  \n      @Override\n      void say() {\n          System.out.println(\"happy say\");\n      }\n  }\n  \n  public class Person {\n      private PersonState state;\n  \n      public Person(PersonState state) {\n          this.state = state;\n      }\n  \n      public void smile(){\n          state.smile();\n      }\n  \n      public void cry(){\n          state.cry();\n      }\n  \n      public void say(){\n          state.say();\n      }\n  }\n  \n  /* main方法 */\n  public class StateMain {\n      public static void main(String[] args) {\n          Person p = new Person(new HappyState());\n          p.smile();\n          p.cry();\n          p.say();\n      }\n  }\n  \n  /*\n  结果：\n  [Student{name='tianqi', age=20, weight=60, height=180}, Student{name='zhaoliu', age=19, weight=61, height=175}, Student{name='lisi', age=18, weight=62, height=178}]\n  */\n  ```\n\n---\n\n* #### 模板模式（模板方法）：Template\n\n  在抽象的父类（模板）中，\n  定义了一个执行一系列方法的方法，\n  其中执行的一系列方法可以是抽象的也可以是实现的，\n  子类在继承父类后通过重写或者实现父类的方法，\n  实现模板执行\n\n  钩子函数也可以是模板方法，\n  在模板中预留钩子，通过重写执行钩子方法，\n  模板方法也可以是回调函数，通过预留回调方法，通过重写执行回调\n\n  ```java\n  public abstract class MyTemplate {\n      public void doTemplate(){\n          op1();\n          op2();\n          op3();\n          op4();\n      }\n  \n      void op1() {\n      }\n  \n      void op2() {\n      }\n  \n      void op3() {\n      }\n  \n      void op4() {\n      }\n  \n  }\n  \n  public class DoTemplate extends MyTemplate {\n  \n      @Override\n      public void op1(){\n          System.out.println(\"op1\");\n      }\n  \n      @Override\n      void op2() {\n          System.out.println(\"op2\");\n      }\n  \n      @Override\n      void op4() {\n          System.out.println(\"op4\");\n      }\n  }\n  \n  public class TemplateMain {\n      public static void main(String[] args) {\n          MyTemplate tple = new DoTemplate();\n          tple.doTemplate();\n      }\n  }\n  \n  /*\n  结果：\n  op1\n  op2\n  op4\n  */\n  ```\n\n---\n\n* #### 访问者模式：Visitor\n\n  在结构不变的情况下动态改变对于内部元素的动作\n\n  ```java\n  public interface Visitor {\n      void visitCpu(CPU cpu);\n      void visitMemory(Memory memory);\n      void visitBord(Bord bord);\n  \n  }\n  \n  public abstract class ComputerPart {\n  \n      public abstract void accept(Visitor v);\n  \n      public abstract double getPrice();\n  }\n  \n  public class CPU extends ComputerPart{\n  \n      private double price;\n  \n      public CPU() {\n          this.price = 1000.0;\n      }\n  \n      public CPU(double price) {\n          this.price = price;\n      }\n  \n      @Override\n      public void accept(Visitor v) {\n          v.visitCpu(this);\n      }\n  \n      @Override\n      public double getPrice() {\n          return this.price;\n      }\n  \n      public void setPrice(double price) {\n          this.price = price;\n      }\n  }\n  \n  public class Memory extends ComputerPart {\n  \n      private double price;\n  \n      public Memory() {\n          this.price = 400.0;\n      }\n  \n      public Memory(double price) {\n          this.price = price;\n      }\n  \n      @Override\n      public void accept(Visitor v) {\n          v.visitMemory(this);\n      }\n  \n      @Override\n      public double getPrice() {\n          return this.price;\n      }\n  \n      public void setPrice(double price) {\n          this.price = price;\n      }\n  }\n  \n  public class Bord extends ComputerPart {\n  \n      private double price;\n  \n      public Bord() {\n          this.price = 600.0;\n      }\n  \n      public Bord(double price) {\n          this.price = price;\n      }\n  \n      @Override\n      public void accept(Visitor v) {\n          v.visitBord(this);\n      }\n  \n      @Override\n      public double getPrice() {\n          return this.price;\n      }\n  \n      public void setPrice(double price) {\n          this.price = price;\n      }\n  }\n  \n  public class PersonVisitor implements Visitor {\n  \n      private double totalPrice = 0.0;\n  \n      @Override\n      public void visitCpu(CPU cpu) {\n          this.totalPrice = totalPrice + (cpu.getPrice() * 0.9);\n      }\n  \n      @Override\n      public void visitMemory(Memory memory) {\n          this.totalPrice = totalPrice + (memory.getPrice() * 0.85);\n      }\n  \n      @Override\n      public void visitBord(Bord bord) {\n          this.totalPrice = totalPrice + (bord.getPrice() * 0.95);\n      }\n  \n      public double getTotalPrice() {\n          return totalPrice;\n      }\n  }\n  \n  public class Computer {\n  \n      private CPU cpu;\n      private Memory memory;\n      private Bord bord;\n  \n      public Computer() {\n          this.cpu = new CPU();\n          this.memory = new Memory();\n          this.bord = new Bord();\n      }\n  \n      public Computer(double cpuPrice, double memoryPrice, double bordPrice) {\n          this.cpu = new CPU(cpuPrice);\n          this.memory = new Memory(memoryPrice);\n          this.bord = new Bord(bordPrice);\n      }\n  \n      public void accept(Visitor v){\n          this.cpu.accept(v);\n          this.memory.accept(v);\n          this.bord.accept(v);\n      }\n  \n  }\n  \n  \n  public class VisitorMain {\n      public static void main(String[] args) {\n  \n          Computer computer = new Computer(1068.88, 868.99, 488.99);\n          PersonVisitor personVisitor = new PersonVisitor();\n          computer.accept(personVisitor);\n          System.out.println(personVisitor.getTotalPrice());\n      }\n  }\n  \n  /*\n  结果：\n  电脑价格：2165.174\n  */\n  ```\n\n---\n\n### 常用的设计模式大概就是这些了~~~\n\n> #### 谢谢浏览！END~\n\n","slug":"常用设计模式","published":1,"updated":"2020-07-26T15:32:27.267Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhtae7rm001oggvk4qjdl6a4","content":"<h2 id=\"常用设计模式\"><a href=\"#常用设计模式\" class=\"headerlink\" title=\"常用设计模式\"></a>常用设计模式</h2><ul>\n<li><h4 id=\"转换器（适配器）模式：Adapter\"><a href=\"#转换器（适配器）模式：Adapter\" class=\"headerlink\" title=\"转换器（适配器）模式：Adapter\"></a>转换器（适配器）模式：Adapter</h4><p>一般用于不同规范/格式/形式之间的转换连接，Java中的字节流和字符流转换就是适配器模式实现</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"桥接模式（双向拓展模式）：Bridge\"><a href=\"#桥接模式（双向拓展模式）：Bridge\" class=\"headerlink\" title=\"桥接模式（双向拓展模式）：Bridge\"></a>桥接模式（双向拓展模式）：Bridge</h4><p>分离抽象和具体，通过聚合联系在一起</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 这个是礼物类，礼物是抽象的，里面定义一个具体礼物实现类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gift</span> </span>&#123;</span><br><span class=\"line\">    GiftImpl impl;  <span class=\"comment\">// 具体礼物</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Gift</span><span class=\"params\">(GiftImpl impl)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.impl = impl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 具体礼物实现类父类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GiftImpl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 书作为具体礼物，继承GiftImpl */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> <span class=\"keyword\">extends</span> <span class=\"title\">GiftImpl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 花作为具体礼物，继承GiftImpl */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flower</span> <span class=\"keyword\">extends</span> <span class=\"title\">GiftImpl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 大的礼物，作为“大”这个抽象的概念继承Gift */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigGift</span> <span class=\"keyword\">extends</span> <span class=\"title\">Gift</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BigGift</span><span class=\"params\">(GiftImpl impl)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(impl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 小的礼物，作为“小这个抽象的概念继承Gift” */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallGift</span> <span class=\"keyword\">extends</span> <span class=\"title\">Gift</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SmallGift</span><span class=\"params\">(GiftImpl impl)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(impl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BridgeMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过聚合，把抽象的和具体的联系起来</span></span><br><span class=\"line\">        <span class=\"comment\">// 通过抽象和具体的组合，有更多的不同礼物</span></span><br><span class=\"line\">        Gift gift1 = <span class=\"keyword\">new</span> BigGift(<span class=\"keyword\">new</span> Book());  <span class=\"comment\">// 大的书作为礼物</span></span><br><span class=\"line\">        Gift gift2 = <span class=\"keyword\">new</span> BigGift(<span class=\"keyword\">new</span> Book());  <span class=\"comment\">// 小的书作为礼物</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"构建器模式：Builder\"><a href=\"#构建器模式：Builder\" class=\"headerlink\" title=\"构建器模式：Builder\"></a>构建器模式：Builder</h4><p>通过构建器来构造复杂的对象，而且可以通过不同的构建器构造不同功能或者不同表现的对象</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"命令模式：Command\"><a href=\"#命令模式：Command\" class=\"headerlink\" title=\"命令模式：Command\"></a>命令模式：Command</h4><p>command+Cor（责任链模式）实现do和undo功能</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"组合模式：Composite\"><a href=\"#组合模式：Composite\" class=\"headerlink\" title=\"组合模式：Composite\"></a>组合模式：Composite</h4><p>一般需要树状结构时使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 所有种类节点的父类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">printNode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 分支节点（目录，节点下面还有内容） */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BranchNode</span> <span class=\"keyword\">extends</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Node&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BranchNode</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BranchNode <span class=\"title\">addNode</span><span class=\"params\">(Node n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nodes.add(n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printAllNode</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.printAllNode(<span class=\"keyword\">this</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printAllNode</span><span class=\"params\">(Node node, <span class=\"keyword\">int</span> depth)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; depth; i++) System.out.print(<span class=\"string\">\"-|\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        node.printNode();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node <span class=\"keyword\">instanceof</span> BranchNode)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(Node n : ((BranchNode)node).nodes)&#123;</span><br><span class=\"line\">                printAllNode(n, depth+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 叶子节点（文件，下面没内容） */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeafNode</span> <span class=\"keyword\">extends</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LeafNode</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BranchNode root = <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        BranchNode a1 = <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"a1\"</span>);</span><br><span class=\"line\">        BranchNode a2 = <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"a2\"</span>);</span><br><span class=\"line\">        LeafNode b1 = <span class=\"keyword\">new</span> LeafNode(<span class=\"string\">\"b1\"</span>);</span><br><span class=\"line\">        LeafNode b2 = <span class=\"keyword\">new</span> LeafNode(<span class=\"string\">\"b2\"</span>);</span><br><span class=\"line\">        LeafNode b3 = <span class=\"keyword\">new</span> LeafNode(<span class=\"string\">\"b3\"</span>);</span><br><span class=\"line\">        root.addNode(a1).addNode(a2).addNode(b1);</span><br><span class=\"line\">        a2.addNode(b2).addNode(b3);</span><br><span class=\"line\"></span><br><span class=\"line\">        root.printAllNode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">root</span></span><br><span class=\"line\"><span class=\"comment\">-|a1</span></span><br><span class=\"line\"><span class=\"comment\">-|a2</span></span><br><span class=\"line\"><span class=\"comment\">-|-|b2</span></span><br><span class=\"line\"><span class=\"comment\">-|-|b3</span></span><br><span class=\"line\"><span class=\"comment\">-|b1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"责任链模式：Chain-of-Responsibility-Pattern\"><a href=\"#责任链模式：Chain-of-Responsibility-Pattern\" class=\"headerlink\" title=\"责任链模式：Chain of Responsibility Pattern\"></a>责任链模式：Chain of Responsibility Pattern</h4><p>为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦，属于行为型模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 所有filter或者filterchain都需要实现该接口 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain chain)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* FilterChain */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterChain</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Filter&gt; filters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterChain <span class=\"title\">addFilter</span><span class=\"params\">(Filter f)</span></span>&#123;</span><br><span class=\"line\">        filters.add(f);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain chain)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == filters.size()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        Filter filter = filters.get(index++);</span><br><span class=\"line\">        filter.doFilter(request, response, chain);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* HTMLFilter */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTMLFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain chain)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\" -&gt; HTMLFilter\"</span>;</span><br><span class=\"line\">        request.setStr(request.getStr() + str);</span><br><span class=\"line\">        chain.doFilter(request, response, chain);</span><br><span class=\"line\">        response.setStr(response.getStr() + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SensitiveFilter */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SensitiveFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain chain)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\" -&gt; SensitiveFilter\"</span>;</span><br><span class=\"line\">        request.setStr(request.getStr() + str);</span><br><span class=\"line\">        chain.doFilter(request, response, chain);</span><br><span class=\"line\">        response.setStr(response.getStr() + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Request */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Request</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStr</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Response */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Response</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Response</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Response</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStr</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FilterChain chain = <span class=\"keyword\">new</span> FilterChain();</span><br><span class=\"line\">        chain.addFilter(<span class=\"keyword\">new</span> HTMLFilter()).addFilter(<span class=\"keyword\">new</span> SensitiveFilter());</span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request(<span class=\"string\">\"request\"</span>);</span><br><span class=\"line\">        Response response = <span class=\"keyword\">new</span> Response(<span class=\"string\">\"response\"</span>);</span><br><span class=\"line\">        chain.doFilter(request, response, chain);</span><br><span class=\"line\">        System.out.println(request);</span><br><span class=\"line\">        System.out.println(response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">request -&gt; HTMLFilter -&gt; SensitiveFilter</span></span><br><span class=\"line\"><span class=\"comment\">response -&gt; SensitiveFilter -&gt; HTMLFilter</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"装饰器模式：Decorator-Pattern\"><a href=\"#装饰器模式：Decorator-Pattern\" class=\"headerlink\" title=\"装饰器模式：Decorator Pattern\"></a>装饰器模式：Decorator Pattern</h4><p>允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 装饰器和被装饰的类都要实现这个接口 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Circle */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Circle::draw()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Rectangle */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Rectangle::draw()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Decorator 装饰器的抽象父类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Decor decoratedDecor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DecorDecorator</span><span class=\"params\">(Decor decoratedDecor)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.decoratedDecor = decoratedDecor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        decoratedDecor.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* RedDecorDecorator 红色装饰器，为图行添加颜色 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedDecorDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">DecorDecorator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RedDecorDecorator</span><span class=\"params\">(Decor decoratedDecor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(decoratedDecor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        decoratedDecor.draw();</span><br><span class=\"line\">        setRedBorder(decoratedDecor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setRedBorder</span><span class=\"params\">(Decor decoratedDecor)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Border Color: Red\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Shape circle = <span class=\"keyword\">new</span> Circle();</span><br><span class=\"line\">        Shape redCircle = <span class=\"keyword\">new</span> RedShapeDecorator(<span class=\"keyword\">new</span> Circle());</span><br><span class=\"line\">        Shape redRectangle = <span class=\"keyword\">new</span> RedShapeDecorator(<span class=\"keyword\">new</span> Rectangle());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Circle with normal border\"</span>);</span><br><span class=\"line\">        circle.draw();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\\nCircle of red border\"</span>);</span><br><span class=\"line\">        redCircle.draw();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\\nRectangle of red border\"</span>);</span><br><span class=\"line\">        redRectangle.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">Circle with normal border</span></span><br><span class=\"line\"><span class=\"comment\">Circle::draw()</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Circle of red border</span></span><br><span class=\"line\"><span class=\"comment\">Circle::draw()</span></span><br><span class=\"line\"><span class=\"comment\">Border Color: Red</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Rectangle of red border</span></span><br><span class=\"line\"><span class=\"comment\">Rectangle::draw()</span></span><br><span class=\"line\"><span class=\"comment\">Border Color: Red</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"外观模式：-Facade\"><a href=\"#外观模式：-Facade\" class=\"headerlink\" title=\"外观模式： Facade\"></a>外观模式： Facade</h4><p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口，解决内部复杂问题，对外提供简单接口。其实就是把一些有联系的复杂功能通过一个接口提供。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 各种提供功能的类实现这个接口 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Circle */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Circle::draw()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Rectangle */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Rectangle::draw()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Square */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Square::draw()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ShapeMaker,提供复杂功能的API类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeMaker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Shape circle;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Shape rectangle;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Shape square;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShapeMaker</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        circle = <span class=\"keyword\">new</span> Circle();</span><br><span class=\"line\">        rectangle = <span class=\"keyword\">new</span> Rectangle();</span><br><span class=\"line\">        square = <span class=\"keyword\">new</span> Square();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        circle.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawRectangle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        rectangle.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawSquare</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        square.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FacadeMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过ShapeMaker提供各种图形的功能</span></span><br><span class=\"line\">        ShapeMaker shapeMaker = <span class=\"keyword\">new</span> ShapeMaker(); </span><br><span class=\"line\"></span><br><span class=\"line\">        shapeMaker.drawCircle();</span><br><span class=\"line\">        shapeMaker.drawRectangle();</span><br><span class=\"line\">        shapeMaker.drawSquare();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">Circle::draw()</span></span><br><span class=\"line\"><span class=\"comment\">Rectangle::draw()</span></span><br><span class=\"line\"><span class=\"comment\">Square::draw()</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"工厂模式：Factory\"><a href=\"#工厂模式：Factory\" class=\"headerlink\" title=\"工厂模式：Factory\"></a>工厂模式：Factory</h4><p>工厂模式，主要有简单工厂、工厂方法、抽象工厂三种</p>\n<ul>\n<li>简单工厂：就是一个工厂创建不同的同类型对象返回</li>\n<li>工厂方法：每个类都有自己的工厂来创建对象，便于单个产品的拓展</li>\n<li>抽象工厂：通过继承抽象工厂，实现不同族的工厂，用于返回对应的不同族对象；便于拓展不同的产品族</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象工厂：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* AbstractFactory */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Food <span class=\"title\">createFood</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Vehicle <span class=\"title\">createVehicle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* AbstractFactoryExtOne */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryExtOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Food <span class=\"title\">createFood</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Bread();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Vehicle <span class=\"title\">createVehicle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* AbstractFactoryExtTwo */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryExtTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Food <span class=\"title\">createFood</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Beef();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Vehicle <span class=\"title\">createVehicle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Plane();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Food */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Food</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Vehicle */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Beef</span> <span class=\"keyword\">extends</span> <span class=\"title\">Food</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"牛肉\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Food</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"面包\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"keyword\">extends</span> <span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"车启动...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plane</span> <span class=\"keyword\">extends</span> <span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"飞机启动...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AbstractFactory fc = <span class=\"keyword\">new</span> AbstractFactoryExtOne();</span><br><span class=\"line\"><span class=\"comment\">//        AbstractFactory fc = new AbstractFactoryExtTwo();</span></span><br><span class=\"line\">        Vehicle v = fc.createVehicle();</span><br><span class=\"line\">        Food f = fc.createFood();</span><br><span class=\"line\">        v.go();</span><br><span class=\"line\">        f.printName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"享元模式：FlyWeight\"><a href=\"#享元模式：FlyWeight\" class=\"headerlink\" title=\"享元模式：FlyWeight\"></a>享元模式：FlyWeight</h4><p>通过共享元对象（比较小的或者常用的对象），减少创建过多对象，类似于池的技术</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Word</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span> w;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Word</span><span class=\"params\">(<span class=\"keyword\">char</span> w)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">getW</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AWord</span> <span class=\"keyword\">extends</span> <span class=\"title\">Word</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AWord</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BWord</span> <span class=\"keyword\">extends</span> <span class=\"title\">Word</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BWord</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CWord</span> <span class=\"keyword\">extends</span> <span class=\"title\">Word</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CWord</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">'C'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* WordPool */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordPool</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Word&gt; words = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WordPool</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        addWord(<span class=\"keyword\">new</span> AWord());</span><br><span class=\"line\">        addWord(<span class=\"keyword\">new</span> BWord());</span><br><span class=\"line\">        addWord(<span class=\"keyword\">new</span> CWord());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WordPool <span class=\"title\">addWord</span><span class=\"params\">(Word w)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.words.add(w);</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WordPool <span class=\"title\">extendWordList</span><span class=\"params\">(List&lt;Word&gt; wList)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Word word : wList) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.words.add(word);</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Word <span class=\"title\">getWord</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt;= size || index &lt; <span class=\"number\">0</span>) index = size-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.words.get(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Word&gt; <span class=\"title\">getWords</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> words;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyWeightMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        WordPool wordPool = <span class=\"keyword\">new</span> WordPool();</span><br><span class=\"line\">        Word w1 = wordPool.getWord(<span class=\"number\">0</span>);</span><br><span class=\"line\">        Word w2 = wordPool.getWord(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Word w3 = wordPool.getWord(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(w1.getW());</span><br><span class=\"line\">        System.out.println(w2.getW());</span><br><span class=\"line\">        System.out.println(w3.getW());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"===========\"</span>);</span><br><span class=\"line\">        Word w4 = wordPool.getWord(<span class=\"number\">0</span>);</span><br><span class=\"line\">        System.out.println(w4 == w1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">A</span></span><br><span class=\"line\"><span class=\"comment\">B</span></span><br><span class=\"line\"><span class=\"comment\">C</span></span><br><span class=\"line\"><span class=\"comment\">===========</span></span><br><span class=\"line\"><span class=\"comment\">true</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"解释器模式：intepreter\"><a href=\"#解释器模式：intepreter\" class=\"headerlink\" title=\"解释器模式：intepreter\"></a>解释器模式：intepreter</h4><p>解释脚本，一般操作系统中或者解释器中用得比较多。</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"迭代器模式：Iterator\"><a href=\"#迭代器模式：Iterator\" class=\"headerlink\" title=\"迭代器模式：Iterator\"></a>迭代器模式：Iterator</h4><p>主要用于集合元素的遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IteratorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        _Collection&lt;String&gt; list = <span class=\"keyword\">new</span> _ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">16</span>; i++) &#123;</span><br><span class=\"line\">            list.add(<span class=\"string\">\"str\"</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过迭代器模式，实现通用的集合遍历：</span></span><br><span class=\"line\">        _Iterator iterator = list.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 自定义的集合接口：_Collection */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">_Collection</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E o)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">_Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 规定集合中要有获取迭代器实现的方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 自定义的迭代器接口：_Iterator */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span>  <span class=\"title\">_Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 判断是否还有下一个元素</span></span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 返回下一个元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 自定义的List集合：_ArrayList，实现_Collection */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">_Collection</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] objects;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">_ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.objects = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">_ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.objects = <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt;= capacity)&#123;</span><br><span class=\"line\">            Object[] temp = <span class=\"keyword\">new</span> Object[<span class=\"keyword\">this</span>.capacity=(capacity * <span class=\"number\">2</span>)];</span><br><span class=\"line\">            System.arraycopy(<span class=\"keyword\">this</span>.objects, <span class=\"number\">0</span>, temp, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.objects = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.objects[index++] = o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> _Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Itr();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用内部类实现迭代器接口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">_Iterator</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &lt;= ++len)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (E)objects[len];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IteratorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        _Collection&lt;String&gt; list = <span class=\"keyword\">new</span> _ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            list.add(<span class=\"string\">\"str\"</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过迭代器模式，实现通用的集合遍历：</span></span><br><span class=\"line\">        _Iterator iterator = list.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">str0</span></span><br><span class=\"line\"><span class=\"comment\">str1</span></span><br><span class=\"line\"><span class=\"comment\">str2</span></span><br><span class=\"line\"><span class=\"comment\">str3</span></span><br><span class=\"line\"><span class=\"comment\">str4</span></span><br><span class=\"line\"><span class=\"comment\">str5</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"中介者模式：Mediator\"><a href=\"#中介者模式：Mediator\" class=\"headerlink\" title=\"中介者模式：Mediator\"></a>中介者模式：Mediator</h4><p>用来降低多个对象和类之间的通信复杂性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 用户类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name  = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        ChatRoom.showMessage(<span class=\"keyword\">this</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 聊天室类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatRoom</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showMessage</span><span class=\"params\">(User user, String message)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Date().toString()</span><br><span class=\"line\">                + <span class=\"string\">\" [\"</span> + user.getName() +<span class=\"string\">\"] : \"</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediatorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User robert = <span class=\"keyword\">new</span> User(<span class=\"string\">\"Robert\"</span>);</span><br><span class=\"line\">        User john = <span class=\"keyword\">new</span> User(<span class=\"string\">\"John\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        robert.sendMessage(<span class=\"string\">\"Hi! John!\"</span>);</span><br><span class=\"line\">        john.sendMessage(<span class=\"string\">\"Hello! Robert!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">Sun Jul 19 19:03:25 CST 2020 [Robert] : Hi! John!</span></span><br><span class=\"line\"><span class=\"comment\">Sun Jul 19 19:03:25 CST 2020 [John] : Hello! Robert!</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"备忘录模式：Memento\"><a href=\"#备忘录模式：Memento\" class=\"headerlink\" title=\"备忘录模式：Memento\"></a>备忘录模式：Memento</h4><p>记录状态，用于恢复或者查看；可以通过对象持久化来记录对象状态</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"观察者模式：Observer-Pattern\"><a href=\"#观察者模式：Observer-Pattern\" class=\"headerlink\" title=\"观察者模式：Observer Pattern\"></a>观察者模式：Observer Pattern</h4><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式，是基于事件通知的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoThingObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">actionOnDoThing</span><span class=\"params\">(DoThingEvent event)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoThingEvent</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> T <span class=\"title\">getSource</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OneThingObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">DoThingObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionOnDoThing</span><span class=\"params\">(DoThingEvent event)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"do one thing.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwoThingObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">DoThingObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionOnDoThing</span><span class=\"params\">(DoThingEvent event)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"do two thing.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OneThingEvent</span> <span class=\"keyword\">extends</span> <span class=\"title\">DoThingEvent</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String loc;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Student source;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OneThingEvent</span><span class=\"params\">(<span class=\"keyword\">long</span> timestamp, String loc, Student source)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = timestamp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loc = loc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Student <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwoThingEvent</span> <span class=\"keyword\">extends</span> <span class=\"title\">DoThingEvent</span>&lt;<span class=\"title\">Teacher</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String loc;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Teacher source;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TwoThingEvent</span><span class=\"params\">(String loc, <span class=\"keyword\">long</span> timestamp, Teacher source)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loc = loc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = timestamp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;DoThingObserver&gt; observers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">addObserver</span><span class=\"params\">(DoThingObserver observer)</span></span>&#123;</span><br><span class=\"line\">        observers.add(observer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"student action\"</span>);</span><br><span class=\"line\">        OneThingEvent event = <span class=\"keyword\">new</span> OneThingEvent(System.currentTimeMillis(), <span class=\"string\">\"one thing\"</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (DoThingObserver o : observers) &#123;</span><br><span class=\"line\">            o.actionOnDoThing(event);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Student std = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        std.action();  <span class=\"comment\">// 还没添加事件，所以输出为空</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=============\"</span>);</span><br><span class=\"line\">        std.addObserver(<span class=\"keyword\">new</span> OneThingObserver());</span><br><span class=\"line\">        std.action();  <span class=\"comment\">// 添加事件后，会执行事件对应的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 因为事件监听（观察者）是一个函数式接口，所以可以通过lambda表达式添加监听</span></span><br><span class=\"line\">        std.addObserver(event -&gt;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"use lambda to do thing.\"</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=============\"</span>);</span><br><span class=\"line\">        std.action();  <span class=\"comment\">// 此时有2个事件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">student action</span></span><br><span class=\"line\"><span class=\"comment\">=============</span></span><br><span class=\"line\"><span class=\"comment\">student action</span></span><br><span class=\"line\"><span class=\"comment\">do one thing.</span></span><br><span class=\"line\"><span class=\"comment\">=============</span></span><br><span class=\"line\"><span class=\"comment\">student action</span></span><br><span class=\"line\"><span class=\"comment\">do one thing.</span></span><br><span class=\"line\"><span class=\"comment\">use lambda to do thing.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"原型模式：Prototype\"><a href=\"#原型模式：Prototype\" class=\"headerlink\" title=\"原型模式：Prototype\"></a>原型模式：Prototype</h4><p>Java中有原型模式的实现：Object的clone()方法。使用需要：</p>\n<p>1、实现Cloneable接口（标记性接口，没有需要实现的方法）</p>\n<p>2、重写clone()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Apple</span><span class=\"params\">(String color)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Apple&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"color='\"</span> + color + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrototypeMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        Apple apple = <span class=\"keyword\">new</span> Apple(<span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">        Apple cloneApple = (Apple) apple.clone();  <span class=\"comment\">// 浅克隆，引用的实际内容没有克隆</span></span><br><span class=\"line\">        System.out.println(apple);</span><br><span class=\"line\">        System.out.println(cloneApple);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">Apple&#123;color='red'&#125;</span></span><br><span class=\"line\"><span class=\"comment\">Apple&#123;color='red'&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"代理模式：Proxy\"><a href=\"#代理模式：Proxy\" class=\"headerlink\" title=\"代理模式：Proxy\"></a>代理模式：Proxy</h4><p>代理模式中，有静态代理和动态代理。其中静态代理通过聚合实现，类似于装饰器模式。</p>\n<p>动态代理在Java中可以使用JDK的proxy创建动态代理，需要被代理对象实现接口；使用cglib创建动态代理对象，不需要被代理对象实现接口。动态代理实际是使用asm来操作字节码修改或者创建代理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"keyword\">implements</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the car moving...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plane</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"plane fly ...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态代理：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Movable m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CarProxy</span><span class=\"params\">(Movable m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.m = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"静态代理：car proxy...\"</span>);</span><br><span class=\"line\">        m.move();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态代理：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarDynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 动态代理的代理实现功能，要实现InvocationHandler接口的invoke()方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Movable m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CarDynamicProxy</span><span class=\"params\">(Movable m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.m = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable     </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"动态代理：car move ...\"</span>);</span><br><span class=\"line\">        Object o = method.invoke(m, args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 飞机动态代理：使用cglib创建动态代理对象，不需要被代理对象实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 需要引入cglib的jar包：</span></span><br><span class=\"line\"><span class=\"comment\">     &lt;dependencies&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;cglib&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;version&gt;3.1&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/dependencies&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlaneCGLibProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cglib动态代理：plane fly ...\"</span>);</span><br><span class=\"line\">        Object result = methodProxy.invokeSuper(o, objects);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 静态代理</span></span><br><span class=\"line\">        Movable m1 = <span class=\"keyword\">new</span> CarProxy(<span class=\"keyword\">new</span> Car());</span><br><span class=\"line\">        Movable m2 = <span class=\"keyword\">new</span> CarLogProxy(<span class=\"keyword\">new</span> Car());</span><br><span class=\"line\">        m1.move();</span><br><span class=\"line\">        m2.move();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 动态代理</span></span><br><span class=\"line\">        System.getProperties().put(<span class=\"string\">\"jdk.proxy.ProxyGenerator.saveGeneratedFiles\"</span>, <span class=\"string\">\"true\"</span>);  <span class=\"comment\">// 设置输出动态代理创建的动态代理字节码文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Movable m = (Movable) Proxy.newProxyInstance(Car.class.getClassLoader(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[]&#123;Movable.class&#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> CarDynamicProxy(<span class=\"keyword\">new</span> Car()));</span><br><span class=\"line\">        m.move();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用cglib动态代理</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(Plane.class);</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> PlaneCGLibProxy());</span><br><span class=\"line\">        Plane plane = (Plane)enhancer.create();</span><br><span class=\"line\">        plane.move();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">静态代理：car proxy...</span></span><br><span class=\"line\"><span class=\"comment\">the car moving...</span></span><br><span class=\"line\"><span class=\"comment\">静态代理：car move log...</span></span><br><span class=\"line\"><span class=\"comment\">the car moving...</span></span><br><span class=\"line\"><span class=\"comment\">================</span></span><br><span class=\"line\"><span class=\"comment\">动态代理：car move ...</span></span><br><span class=\"line\"><span class=\"comment\">the car moving...</span></span><br><span class=\"line\"><span class=\"comment\">================</span></span><br><span class=\"line\"><span class=\"comment\">cglib动态代理：plane fly ...</span></span><br><span class=\"line\"><span class=\"comment\">plane fly ...</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"单例模式：Singleton\"><a href=\"#单例模式：Singleton\" class=\"headerlink\" title=\"单例模式：Singleton\"></a>单例模式：Singleton</h4><p>单例设计模式，顾名思义就是这个类的实例有且仅有一个。单例的实现中有很多方法，可以分为饿汉式（常用）和懒汉式。饿汉式天生线程安全，懒汉式需要加锁等使得线程安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、饿汉式单例：随着类的加载创建一个单例出来</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton1 INSTANCE = <span class=\"keyword\">new</span> Singleton1();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton1</span><span class=\"params\">()</span></span>&#123;&#125;  <span class=\"comment\">// 私有构造函数，防止外部创建实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton1 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、饿汉式单例：随着类的加载创建一个单例出来，这里使用静态代码块创建单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton2 INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        INSTANCE = <span class=\"keyword\">new</span> Singleton2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton2</span><span class=\"params\">()</span></span>&#123;&#125;  <span class=\"comment\">// 私有构造函数，防止外部创建实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、懒汉式单例，实例延迟加载，但是会造成线程安全问题</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton3 INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton3</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton3 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == INSTANCE)&#123;</span><br><span class=\"line\">            INSTANCE = <span class=\"keyword\">new</span> Singleton3();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4、懒汉式单例，实例延迟加载，使用synchronized加锁，同步方法，线程安全</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton4 INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton4</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton4 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == INSTANCE)&#123;</span><br><span class=\"line\">            INSTANCE = <span class=\"keyword\">new</span> Singleton4();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5、懒汉式单例，实例延迟加载，使用synchronized加锁（双重锁），同步方法，线程安全</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton5 INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton5</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton5 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == INSTANCE)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton5.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == INSTANCE) INSTANCE = <span class=\"keyword\">new</span> Singleton5();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 6、懒汉式单例，实例延迟加载，JVM加载 外部类 时不会加载 内部类，所以可以使用 静态内部类 来实现 懒汉式单例。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton6</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton6</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton6 INSTANCE = <span class=\"keyword\">new</span> Singleton6();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton6 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 7、懒汉式枚举单例，实例延迟加载，线程安全，还可以防止反序列化。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span>  Singleton7 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这是枚举单例的测试方法，枚举单例只需定义一个枚举值即可</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printHashCode</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(INSTANCE.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 8、解决单例模式的其他问题：1.反射强制实例化问题；2.反序列化问题</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton8</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton8 INSTANCE = <span class=\"keyword\">new</span> Singleton8();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton8</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(INSTANCE != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"不能强制实例化\"</span>);  <span class=\"comment\">// 解决反射强制实例化问题</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  <span class=\"comment\">// 私有构造函数，防止外部创建实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton8 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;  <span class=\"comment\">// 解决反序列化问题</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"状态模式：State\"><a href=\"#状态模式：State\" class=\"headerlink\" title=\"状态模式：State\"></a>状态模式：State</h4><p>根据不同的状态，对同一动作会有不同的反应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 状态抽象类父类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HappyState</span> <span class=\"keyword\">extends</span> <span class=\"title\">PersonState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"happy smile\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"happy cry\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"happy say\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersonState state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(PersonState state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        state.smile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        state.cry();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        state.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StateMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person(<span class=\"keyword\">new</span> HappyState());</span><br><span class=\"line\">        p.smile();</span><br><span class=\"line\">        p.cry();</span><br><span class=\"line\">        p.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">[Student&#123;name='tianqi', age=20, weight=60, height=180&#125;, Student&#123;name='zhaoliu', age=19, weight=61, height=175&#125;, Student&#123;name='lisi', age=18, weight=62, height=178&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"模板模式（模板方法）：Template\"><a href=\"#模板模式（模板方法）：Template\" class=\"headerlink\" title=\"模板模式（模板方法）：Template\"></a>模板模式（模板方法）：Template</h4><p>在抽象的父类（模板）中，<br>定义了一个执行一系列方法的方法，<br>其中执行的一系列方法可以是抽象的也可以是实现的，<br>子类在继承父类后通过重写或者实现父类的方法，<br>实现模板执行</p>\n<p>钩子函数也可以是模板方法，<br>在模板中预留钩子，通过重写执行钩子方法，<br>模板方法也可以是回调函数，通过预留回调方法，通过重写执行回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTemplate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        op1();</span><br><span class=\"line\">        op2();</span><br><span class=\"line\">        op3();</span><br><span class=\"line\">        op4();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyTemplate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">op1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"op1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"op2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"op4\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemplateMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyTemplate tple = <span class=\"keyword\">new</span> DoTemplate();</span><br><span class=\"line\">        tple.doTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">op1</span></span><br><span class=\"line\"><span class=\"comment\">op2</span></span><br><span class=\"line\"><span class=\"comment\">op4</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"访问者模式：Visitor\"><a href=\"#访问者模式：Visitor\" class=\"headerlink\" title=\"访问者模式：Visitor\"></a>访问者模式：Visitor</h4><p>在结构不变的情况下动态改变对于内部元素的动作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visitCpu</span><span class=\"params\">(CPU cpu)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visitMemory</span><span class=\"params\">(Memory memory)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visitBord</span><span class=\"params\">(Bord bord)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor v)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComputerPart</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CPU</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = <span class=\"number\">1000.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CPU</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor v)</span> </span>&#123;</span><br><span class=\"line\">        v.visitCpu(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memory</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Memory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = <span class=\"number\">400.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Memory</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor v)</span> </span>&#123;</span><br><span class=\"line\">        v.visitMemory(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bord</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Bord</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = <span class=\"number\">600.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Bord</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor v)</span> </span>&#123;</span><br><span class=\"line\">        v.visitBord(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> totalPrice = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visitCpu</span><span class=\"params\">(CPU cpu)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPrice = totalPrice + (cpu.getPrice() * <span class=\"number\">0.9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visitMemory</span><span class=\"params\">(Memory memory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPrice = totalPrice + (memory.getPrice() * <span class=\"number\">0.85</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visitBord</span><span class=\"params\">(Bord bord)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPrice = totalPrice + (bord.getPrice() * <span class=\"number\">0.95</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getTotalPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CPU cpu;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memory memory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bord bord;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cpu = <span class=\"keyword\">new</span> CPU();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memory = <span class=\"keyword\">new</span> Memory();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bord = <span class=\"keyword\">new</span> Bord();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">(<span class=\"keyword\">double</span> cpuPrice, <span class=\"keyword\">double</span> memoryPrice, <span class=\"keyword\">double</span> bordPrice)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cpu = <span class=\"keyword\">new</span> CPU(cpuPrice);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memory = <span class=\"keyword\">new</span> Memory(memoryPrice);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bord = <span class=\"keyword\">new</span> Bord(bordPrice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cpu.accept(v);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memory.accept(v);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bord.accept(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VisitorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Computer computer = <span class=\"keyword\">new</span> Computer(<span class=\"number\">1068.88</span>, <span class=\"number\">868.99</span>, <span class=\"number\">488.99</span>);</span><br><span class=\"line\">        PersonVisitor personVisitor = <span class=\"keyword\">new</span> PersonVisitor();</span><br><span class=\"line\">        computer.accept(personVisitor);</span><br><span class=\"line\">        System.out.println(personVisitor.getTotalPrice());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">电脑价格：2165.174</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<h3 id=\"常用的设计模式大概就是这些了\"><a href=\"#常用的设计模式大概就是这些了\" class=\"headerlink\" title=\"常用的设计模式大概就是这些了~\"></a>常用的设计模式大概就是这些了<del>~</del></h3><blockquote>\n<h4 id=\"谢谢浏览！END\"><a href=\"#谢谢浏览！END\" class=\"headerlink\" title=\"谢谢浏览！END~\"></a>谢谢浏览！END~</h4></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常用设计模式\"><a href=\"#常用设计模式\" class=\"headerlink\" title=\"常用设计模式\"></a>常用设计模式</h2><ul>\n<li><h4 id=\"转换器（适配器）模式：Adapter\"><a href=\"#转换器（适配器）模式：Adapter\" class=\"headerlink\" title=\"转换器（适配器）模式：Adapter\"></a>转换器（适配器）模式：Adapter</h4><p>一般用于不同规范/格式/形式之间的转换连接，Java中的字节流和字符流转换就是适配器模式实现</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"桥接模式（双向拓展模式）：Bridge\"><a href=\"#桥接模式（双向拓展模式）：Bridge\" class=\"headerlink\" title=\"桥接模式（双向拓展模式）：Bridge\"></a>桥接模式（双向拓展模式）：Bridge</h4><p>分离抽象和具体，通过聚合联系在一起</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 这个是礼物类，礼物是抽象的，里面定义一个具体礼物实现类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gift</span> </span>&#123;</span><br><span class=\"line\">    GiftImpl impl;  <span class=\"comment\">// 具体礼物</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Gift</span><span class=\"params\">(GiftImpl impl)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.impl = impl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 具体礼物实现类父类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GiftImpl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 书作为具体礼物，继承GiftImpl */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> <span class=\"keyword\">extends</span> <span class=\"title\">GiftImpl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 花作为具体礼物，继承GiftImpl */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flower</span> <span class=\"keyword\">extends</span> <span class=\"title\">GiftImpl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 大的礼物，作为“大”这个抽象的概念继承Gift */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigGift</span> <span class=\"keyword\">extends</span> <span class=\"title\">Gift</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BigGift</span><span class=\"params\">(GiftImpl impl)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(impl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 小的礼物，作为“小这个抽象的概念继承Gift” */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallGift</span> <span class=\"keyword\">extends</span> <span class=\"title\">Gift</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SmallGift</span><span class=\"params\">(GiftImpl impl)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(impl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BridgeMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过聚合，把抽象的和具体的联系起来</span></span><br><span class=\"line\">        <span class=\"comment\">// 通过抽象和具体的组合，有更多的不同礼物</span></span><br><span class=\"line\">        Gift gift1 = <span class=\"keyword\">new</span> BigGift(<span class=\"keyword\">new</span> Book());  <span class=\"comment\">// 大的书作为礼物</span></span><br><span class=\"line\">        Gift gift2 = <span class=\"keyword\">new</span> BigGift(<span class=\"keyword\">new</span> Book());  <span class=\"comment\">// 小的书作为礼物</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"构建器模式：Builder\"><a href=\"#构建器模式：Builder\" class=\"headerlink\" title=\"构建器模式：Builder\"></a>构建器模式：Builder</h4><p>通过构建器来构造复杂的对象，而且可以通过不同的构建器构造不同功能或者不同表现的对象</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"命令模式：Command\"><a href=\"#命令模式：Command\" class=\"headerlink\" title=\"命令模式：Command\"></a>命令模式：Command</h4><p>command+Cor（责任链模式）实现do和undo功能</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"组合模式：Composite\"><a href=\"#组合模式：Composite\" class=\"headerlink\" title=\"组合模式：Composite\"></a>组合模式：Composite</h4><p>一般需要树状结构时使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 所有种类节点的父类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">printNode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 分支节点（目录，节点下面还有内容） */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BranchNode</span> <span class=\"keyword\">extends</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Node&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BranchNode</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BranchNode <span class=\"title\">addNode</span><span class=\"params\">(Node n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nodes.add(n);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printAllNode</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.printAllNode(<span class=\"keyword\">this</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printAllNode</span><span class=\"params\">(Node node, <span class=\"keyword\">int</span> depth)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; depth; i++) System.out.print(<span class=\"string\">\"-|\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        node.printNode();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node <span class=\"keyword\">instanceof</span> BranchNode)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(Node n : ((BranchNode)node).nodes)&#123;</span><br><span class=\"line\">                printAllNode(n, depth+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 叶子节点（文件，下面没内容） */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeafNode</span> <span class=\"keyword\">extends</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LeafNode</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BranchNode root = <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"root\"</span>);</span><br><span class=\"line\">        BranchNode a1 = <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"a1\"</span>);</span><br><span class=\"line\">        BranchNode a2 = <span class=\"keyword\">new</span> BranchNode(<span class=\"string\">\"a2\"</span>);</span><br><span class=\"line\">        LeafNode b1 = <span class=\"keyword\">new</span> LeafNode(<span class=\"string\">\"b1\"</span>);</span><br><span class=\"line\">        LeafNode b2 = <span class=\"keyword\">new</span> LeafNode(<span class=\"string\">\"b2\"</span>);</span><br><span class=\"line\">        LeafNode b3 = <span class=\"keyword\">new</span> LeafNode(<span class=\"string\">\"b3\"</span>);</span><br><span class=\"line\">        root.addNode(a1).addNode(a2).addNode(b1);</span><br><span class=\"line\">        a2.addNode(b2).addNode(b3);</span><br><span class=\"line\"></span><br><span class=\"line\">        root.printAllNode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">root</span></span><br><span class=\"line\"><span class=\"comment\">-|a1</span></span><br><span class=\"line\"><span class=\"comment\">-|a2</span></span><br><span class=\"line\"><span class=\"comment\">-|-|b2</span></span><br><span class=\"line\"><span class=\"comment\">-|-|b3</span></span><br><span class=\"line\"><span class=\"comment\">-|b1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"责任链模式：Chain-of-Responsibility-Pattern\"><a href=\"#责任链模式：Chain-of-Responsibility-Pattern\" class=\"headerlink\" title=\"责任链模式：Chain of Responsibility Pattern\"></a>责任链模式：Chain of Responsibility Pattern</h4><p>为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦，属于行为型模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 所有filter或者filterchain都需要实现该接口 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain chain)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* FilterChain */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterChain</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Filter&gt; filters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterChain <span class=\"title\">addFilter</span><span class=\"params\">(Filter f)</span></span>&#123;</span><br><span class=\"line\">        filters.add(f);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain chain)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == filters.size()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        Filter filter = filters.get(index++);</span><br><span class=\"line\">        filter.doFilter(request, response, chain);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* HTMLFilter */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTMLFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain chain)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\" -&gt; HTMLFilter\"</span>;</span><br><span class=\"line\">        request.setStr(request.getStr() + str);</span><br><span class=\"line\">        chain.doFilter(request, response, chain);</span><br><span class=\"line\">        response.setStr(response.getStr() + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* SensitiveFilter */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SensitiveFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(Request request, Response response, FilterChain chain)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\" -&gt; SensitiveFilter\"</span>;</span><br><span class=\"line\">        request.setStr(request.getStr() + str);</span><br><span class=\"line\">        chain.doFilter(request, response, chain);</span><br><span class=\"line\">        response.setStr(response.getStr() + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Request */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Request</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Request</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStr</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Response */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Response</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Response</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Response</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStr</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        FilterChain chain = <span class=\"keyword\">new</span> FilterChain();</span><br><span class=\"line\">        chain.addFilter(<span class=\"keyword\">new</span> HTMLFilter()).addFilter(<span class=\"keyword\">new</span> SensitiveFilter());</span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request(<span class=\"string\">\"request\"</span>);</span><br><span class=\"line\">        Response response = <span class=\"keyword\">new</span> Response(<span class=\"string\">\"response\"</span>);</span><br><span class=\"line\">        chain.doFilter(request, response, chain);</span><br><span class=\"line\">        System.out.println(request);</span><br><span class=\"line\">        System.out.println(response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">request -&gt; HTMLFilter -&gt; SensitiveFilter</span></span><br><span class=\"line\"><span class=\"comment\">response -&gt; SensitiveFilter -&gt; HTMLFilter</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"装饰器模式：Decorator-Pattern\"><a href=\"#装饰器模式：Decorator-Pattern\" class=\"headerlink\" title=\"装饰器模式：Decorator Pattern\"></a>装饰器模式：Decorator Pattern</h4><p>允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 装饰器和被装饰的类都要实现这个接口 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Circle */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Circle::draw()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Rectangle */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Rectangle::draw()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Decorator 装饰器的抽象父类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecorDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Decor decoratedDecor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DecorDecorator</span><span class=\"params\">(Decor decoratedDecor)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.decoratedDecor = decoratedDecor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        decoratedDecor.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* RedDecorDecorator 红色装饰器，为图行添加颜色 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedDecorDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">DecorDecorator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RedDecorDecorator</span><span class=\"params\">(Decor decoratedDecor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(decoratedDecor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        decoratedDecor.draw();</span><br><span class=\"line\">        setRedBorder(decoratedDecor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setRedBorder</span><span class=\"params\">(Decor decoratedDecor)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Border Color: Red\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Shape circle = <span class=\"keyword\">new</span> Circle();</span><br><span class=\"line\">        Shape redCircle = <span class=\"keyword\">new</span> RedShapeDecorator(<span class=\"keyword\">new</span> Circle());</span><br><span class=\"line\">        Shape redRectangle = <span class=\"keyword\">new</span> RedShapeDecorator(<span class=\"keyword\">new</span> Rectangle());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Circle with normal border\"</span>);</span><br><span class=\"line\">        circle.draw();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\\nCircle of red border\"</span>);</span><br><span class=\"line\">        redCircle.draw();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"\\nRectangle of red border\"</span>);</span><br><span class=\"line\">        redRectangle.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">Circle with normal border</span></span><br><span class=\"line\"><span class=\"comment\">Circle::draw()</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Circle of red border</span></span><br><span class=\"line\"><span class=\"comment\">Circle::draw()</span></span><br><span class=\"line\"><span class=\"comment\">Border Color: Red</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">Rectangle of red border</span></span><br><span class=\"line\"><span class=\"comment\">Rectangle::draw()</span></span><br><span class=\"line\"><span class=\"comment\">Border Color: Red</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"外观模式：-Facade\"><a href=\"#外观模式：-Facade\" class=\"headerlink\" title=\"外观模式： Facade\"></a>外观模式： Facade</h4><p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口，解决内部复杂问题，对外提供简单接口。其实就是把一些有联系的复杂功能通过一个接口提供。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 各种提供功能的类实现这个接口 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Circle */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Circle::draw()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Rectangle */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Decor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Rectangle::draw()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Square */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Square::draw()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ShapeMaker,提供复杂功能的API类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeMaker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Shape circle;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Shape rectangle;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Shape square;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShapeMaker</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        circle = <span class=\"keyword\">new</span> Circle();</span><br><span class=\"line\">        rectangle = <span class=\"keyword\">new</span> Rectangle();</span><br><span class=\"line\">        square = <span class=\"keyword\">new</span> Square();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawCircle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        circle.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawRectangle</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        rectangle.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drawSquare</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        square.draw();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FacadeMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过ShapeMaker提供各种图形的功能</span></span><br><span class=\"line\">        ShapeMaker shapeMaker = <span class=\"keyword\">new</span> ShapeMaker(); </span><br><span class=\"line\"></span><br><span class=\"line\">        shapeMaker.drawCircle();</span><br><span class=\"line\">        shapeMaker.drawRectangle();</span><br><span class=\"line\">        shapeMaker.drawSquare();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">Circle::draw()</span></span><br><span class=\"line\"><span class=\"comment\">Rectangle::draw()</span></span><br><span class=\"line\"><span class=\"comment\">Square::draw()</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"工厂模式：Factory\"><a href=\"#工厂模式：Factory\" class=\"headerlink\" title=\"工厂模式：Factory\"></a>工厂模式：Factory</h4><p>工厂模式，主要有简单工厂、工厂方法、抽象工厂三种</p>\n<ul>\n<li>简单工厂：就是一个工厂创建不同的同类型对象返回</li>\n<li>工厂方法：每个类都有自己的工厂来创建对象，便于单个产品的拓展</li>\n<li>抽象工厂：通过继承抽象工厂，实现不同族的工厂，用于返回对应的不同族对象；便于拓展不同的产品族</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象工厂：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* AbstractFactory */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Food <span class=\"title\">createFood</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Vehicle <span class=\"title\">createVehicle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* AbstractFactoryExtOne */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryExtOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Food <span class=\"title\">createFood</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Bread();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Vehicle <span class=\"title\">createVehicle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* AbstractFactoryExtTwo */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryExtTwo</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Food <span class=\"title\">createFood</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Beef();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Vehicle <span class=\"title\">createVehicle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Plane();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Food */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Food</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Vehicle */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Beef</span> <span class=\"keyword\">extends</span> <span class=\"title\">Food</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"牛肉\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Food</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"面包\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"keyword\">extends</span> <span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"车启动...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plane</span> <span class=\"keyword\">extends</span> <span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"飞机启动...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactoryMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AbstractFactory fc = <span class=\"keyword\">new</span> AbstractFactoryExtOne();</span><br><span class=\"line\"><span class=\"comment\">//        AbstractFactory fc = new AbstractFactoryExtTwo();</span></span><br><span class=\"line\">        Vehicle v = fc.createVehicle();</span><br><span class=\"line\">        Food f = fc.createFood();</span><br><span class=\"line\">        v.go();</span><br><span class=\"line\">        f.printName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"享元模式：FlyWeight\"><a href=\"#享元模式：FlyWeight\" class=\"headerlink\" title=\"享元模式：FlyWeight\"></a>享元模式：FlyWeight</h4><p>通过共享元对象（比较小的或者常用的对象），减少创建过多对象，类似于池的技术</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Word</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">char</span> w;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Word</span><span class=\"params\">(<span class=\"keyword\">char</span> w)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.w = w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">getW</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AWord</span> <span class=\"keyword\">extends</span> <span class=\"title\">Word</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AWord</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">'A'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BWord</span> <span class=\"keyword\">extends</span> <span class=\"title\">Word</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BWord</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CWord</span> <span class=\"keyword\">extends</span> <span class=\"title\">Word</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CWord</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">'C'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* WordPool */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordPool</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Word&gt; words = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WordPool</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        addWord(<span class=\"keyword\">new</span> AWord());</span><br><span class=\"line\">        addWord(<span class=\"keyword\">new</span> BWord());</span><br><span class=\"line\">        addWord(<span class=\"keyword\">new</span> CWord());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WordPool <span class=\"title\">addWord</span><span class=\"params\">(Word w)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.words.add(w);</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> WordPool <span class=\"title\">extendWordList</span><span class=\"params\">(List&lt;Word&gt; wList)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Word word : wList) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.words.add(word);</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Word <span class=\"title\">getWord</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt;= size || index &lt; <span class=\"number\">0</span>) index = size-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.words.get(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Word&gt; <span class=\"title\">getWords</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> words;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyWeightMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        WordPool wordPool = <span class=\"keyword\">new</span> WordPool();</span><br><span class=\"line\">        Word w1 = wordPool.getWord(<span class=\"number\">0</span>);</span><br><span class=\"line\">        Word w2 = wordPool.getWord(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Word w3 = wordPool.getWord(<span class=\"number\">2</span>);</span><br><span class=\"line\">        System.out.println(w1.getW());</span><br><span class=\"line\">        System.out.println(w2.getW());</span><br><span class=\"line\">        System.out.println(w3.getW());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"===========\"</span>);</span><br><span class=\"line\">        Word w4 = wordPool.getWord(<span class=\"number\">0</span>);</span><br><span class=\"line\">        System.out.println(w4 == w1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">A</span></span><br><span class=\"line\"><span class=\"comment\">B</span></span><br><span class=\"line\"><span class=\"comment\">C</span></span><br><span class=\"line\"><span class=\"comment\">===========</span></span><br><span class=\"line\"><span class=\"comment\">true</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"解释器模式：intepreter\"><a href=\"#解释器模式：intepreter\" class=\"headerlink\" title=\"解释器模式：intepreter\"></a>解释器模式：intepreter</h4><p>解释脚本，一般操作系统中或者解释器中用得比较多。</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"迭代器模式：Iterator\"><a href=\"#迭代器模式：Iterator\" class=\"headerlink\" title=\"迭代器模式：Iterator\"></a>迭代器模式：Iterator</h4><p>主要用于集合元素的遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IteratorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        _Collection&lt;String&gt; list = <span class=\"keyword\">new</span> _ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">16</span>; i++) &#123;</span><br><span class=\"line\">            list.add(<span class=\"string\">\"str\"</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过迭代器模式，实现通用的集合遍历：</span></span><br><span class=\"line\">        _Iterator iterator = list.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 自定义的集合接口：_Collection */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">_Collection</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E o)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">_Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 规定集合中要有获取迭代器实现的方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 自定义的迭代器接口：_Iterator */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span>  <span class=\"title\">_Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 判断是否还有下一个元素</span></span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;  <span class=\"comment\">// 返回下一个元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 自定义的List集合：_ArrayList，实现_Collection */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">_Collection</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] objects;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">_ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.objects = <span class=\"keyword\">new</span> Object[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">_ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.objects = <span class=\"keyword\">new</span> Object[capacity];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.capacity = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &gt;= capacity)&#123;</span><br><span class=\"line\">            Object[] temp = <span class=\"keyword\">new</span> Object[<span class=\"keyword\">this</span>.capacity=(capacity * <span class=\"number\">2</span>)];</span><br><span class=\"line\">            System.arraycopy(<span class=\"keyword\">this</span>.objects, <span class=\"number\">0</span>, temp, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.objects = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.objects[index++] = o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> _Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Itr();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用内部类实现迭代器接口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">_Iterator</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index &lt;= ++len)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (E)objects[len];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IteratorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        _Collection&lt;String&gt; list = <span class=\"keyword\">new</span> _ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            list.add(<span class=\"string\">\"str\"</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 通过迭代器模式，实现通用的集合遍历：</span></span><br><span class=\"line\">        _Iterator iterator = list.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">str0</span></span><br><span class=\"line\"><span class=\"comment\">str1</span></span><br><span class=\"line\"><span class=\"comment\">str2</span></span><br><span class=\"line\"><span class=\"comment\">str3</span></span><br><span class=\"line\"><span class=\"comment\">str4</span></span><br><span class=\"line\"><span class=\"comment\">str5</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"中介者模式：Mediator\"><a href=\"#中介者模式：Mediator\" class=\"headerlink\" title=\"中介者模式：Mediator\"></a>中介者模式：Mediator</h4><p>用来降低多个对象和类之间的通信复杂性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 用户类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name  = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMessage</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        ChatRoom.showMessage(<span class=\"keyword\">this</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 聊天室类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChatRoom</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showMessage</span><span class=\"params\">(User user, String message)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Date().toString()</span><br><span class=\"line\">                + <span class=\"string\">\" [\"</span> + user.getName() +<span class=\"string\">\"] : \"</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediatorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User robert = <span class=\"keyword\">new</span> User(<span class=\"string\">\"Robert\"</span>);</span><br><span class=\"line\">        User john = <span class=\"keyword\">new</span> User(<span class=\"string\">\"John\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        robert.sendMessage(<span class=\"string\">\"Hi! John!\"</span>);</span><br><span class=\"line\">        john.sendMessage(<span class=\"string\">\"Hello! Robert!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">Sun Jul 19 19:03:25 CST 2020 [Robert] : Hi! John!</span></span><br><span class=\"line\"><span class=\"comment\">Sun Jul 19 19:03:25 CST 2020 [John] : Hello! Robert!</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"备忘录模式：Memento\"><a href=\"#备忘录模式：Memento\" class=\"headerlink\" title=\"备忘录模式：Memento\"></a>备忘录模式：Memento</h4><p>记录状态，用于恢复或者查看；可以通过对象持久化来记录对象状态</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"观察者模式：Observer-Pattern\"><a href=\"#观察者模式：Observer-Pattern\" class=\"headerlink\" title=\"观察者模式：Observer Pattern\"></a>观察者模式：Observer Pattern</h4><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式，是基于事件通知的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DoThingObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">actionOnDoThing</span><span class=\"params\">(DoThingEvent event)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoThingEvent</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> T <span class=\"title\">getSource</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OneThingObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">DoThingObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionOnDoThing</span><span class=\"params\">(DoThingEvent event)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"do one thing.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwoThingObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">DoThingObserver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionOnDoThing</span><span class=\"params\">(DoThingEvent event)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"do two thing.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OneThingEvent</span> <span class=\"keyword\">extends</span> <span class=\"title\">DoThingEvent</span>&lt;<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String loc;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Student source;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OneThingEvent</span><span class=\"params\">(<span class=\"keyword\">long</span> timestamp, String loc, Student source)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = timestamp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loc = loc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Student <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TwoThingEvent</span> <span class=\"keyword\">extends</span> <span class=\"title\">DoThingEvent</span>&lt;<span class=\"title\">Teacher</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String loc;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Teacher source;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TwoThingEvent</span><span class=\"params\">(String loc, <span class=\"keyword\">long</span> timestamp, Teacher source)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loc = loc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = timestamp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.source = source;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">getSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.source;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;DoThingObserver&gt; observers = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">addObserver</span><span class=\"params\">(DoThingObserver observer)</span></span>&#123;</span><br><span class=\"line\">        observers.add(observer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">action</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"student action\"</span>);</span><br><span class=\"line\">        OneThingEvent event = <span class=\"keyword\">new</span> OneThingEvent(System.currentTimeMillis(), <span class=\"string\">\"one thing\"</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (DoThingObserver o : observers) &#123;</span><br><span class=\"line\">            o.actionOnDoThing(event);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Student std = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">        std.action();  <span class=\"comment\">// 还没添加事件，所以输出为空</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=============\"</span>);</span><br><span class=\"line\">        std.addObserver(<span class=\"keyword\">new</span> OneThingObserver());</span><br><span class=\"line\">        std.action();  <span class=\"comment\">// 添加事件后，会执行事件对应的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 因为事件监听（观察者）是一个函数式接口，所以可以通过lambda表达式添加监听</span></span><br><span class=\"line\">        std.addObserver(event -&gt;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"use lambda to do thing.\"</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=============\"</span>);</span><br><span class=\"line\">        std.action();  <span class=\"comment\">// 此时有2个事件</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">student action</span></span><br><span class=\"line\"><span class=\"comment\">=============</span></span><br><span class=\"line\"><span class=\"comment\">student action</span></span><br><span class=\"line\"><span class=\"comment\">do one thing.</span></span><br><span class=\"line\"><span class=\"comment\">=============</span></span><br><span class=\"line\"><span class=\"comment\">student action</span></span><br><span class=\"line\"><span class=\"comment\">do one thing.</span></span><br><span class=\"line\"><span class=\"comment\">use lambda to do thing.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"原型模式：Prototype\"><a href=\"#原型模式：Prototype\" class=\"headerlink\" title=\"原型模式：Prototype\"></a>原型模式：Prototype</h4><p>Java中有原型模式的实现：Object的clone()方法。使用需要：</p>\n<p>1、实现Cloneable接口（标记性接口，没有需要实现的方法）</p>\n<p>2、重写clone()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Apple</span><span class=\"params\">(String color)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Apple&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"color='\"</span> + color + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrototypeMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        Apple apple = <span class=\"keyword\">new</span> Apple(<span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">        Apple cloneApple = (Apple) apple.clone();  <span class=\"comment\">// 浅克隆，引用的实际内容没有克隆</span></span><br><span class=\"line\">        System.out.println(apple);</span><br><span class=\"line\">        System.out.println(cloneApple);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">Apple&#123;color='red'&#125;</span></span><br><span class=\"line\"><span class=\"comment\">Apple&#123;color='red'&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"代理模式：Proxy\"><a href=\"#代理模式：Proxy\" class=\"headerlink\" title=\"代理模式：Proxy\"></a>代理模式：Proxy</h4><p>代理模式中，有静态代理和动态代理。其中静态代理通过聚合实现，类似于装饰器模式。</p>\n<p>动态代理在Java中可以使用JDK的proxy创建动态代理，需要被代理对象实现接口；使用cglib创建动态代理对象，不需要被代理对象实现接口。动态代理实际是使用asm来操作字节码修改或者创建代理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> <span class=\"keyword\">implements</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the car moving...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Plane</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"plane fly ...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 静态代理：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Movable m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CarProxy</span><span class=\"params\">(Movable m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.m = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"静态代理：car proxy...\"</span>);</span><br><span class=\"line\">        m.move();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 动态代理：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarDynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 动态代理的代理实现功能，要实现InvocationHandler接口的invoke()方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Movable m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CarDynamicProxy</span><span class=\"params\">(Movable m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.m = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable     </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"动态代理：car move ...\"</span>);</span><br><span class=\"line\">        Object o = method.invoke(m, args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 飞机动态代理：使用cglib创建动态代理对象，不需要被代理对象实现接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 需要引入cglib的jar包：</span></span><br><span class=\"line\"><span class=\"comment\">     &lt;dependencies&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;cglib&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;version&gt;3.1&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/dependencies&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlaneCGLibProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"cglib动态代理：plane fly ...\"</span>);</span><br><span class=\"line\">        Object result = methodProxy.invokeSuper(o, objects);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 静态代理</span></span><br><span class=\"line\">        Movable m1 = <span class=\"keyword\">new</span> CarProxy(<span class=\"keyword\">new</span> Car());</span><br><span class=\"line\">        Movable m2 = <span class=\"keyword\">new</span> CarLogProxy(<span class=\"keyword\">new</span> Car());</span><br><span class=\"line\">        m1.move();</span><br><span class=\"line\">        m2.move();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 动态代理</span></span><br><span class=\"line\">        System.getProperties().put(<span class=\"string\">\"jdk.proxy.ProxyGenerator.saveGeneratedFiles\"</span>, <span class=\"string\">\"true\"</span>);  <span class=\"comment\">// 设置输出动态代理创建的动态代理字节码文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Movable m = (Movable) Proxy.newProxyInstance(Car.class.getClassLoader(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[]&#123;Movable.class&#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> CarDynamicProxy(<span class=\"keyword\">new</span> Car()));</span><br><span class=\"line\">        m.move();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用cglib动态代理</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(Plane.class);</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> PlaneCGLibProxy());</span><br><span class=\"line\">        Plane plane = (Plane)enhancer.create();</span><br><span class=\"line\">        plane.move();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">静态代理：car proxy...</span></span><br><span class=\"line\"><span class=\"comment\">the car moving...</span></span><br><span class=\"line\"><span class=\"comment\">静态代理：car move log...</span></span><br><span class=\"line\"><span class=\"comment\">the car moving...</span></span><br><span class=\"line\"><span class=\"comment\">================</span></span><br><span class=\"line\"><span class=\"comment\">动态代理：car move ...</span></span><br><span class=\"line\"><span class=\"comment\">the car moving...</span></span><br><span class=\"line\"><span class=\"comment\">================</span></span><br><span class=\"line\"><span class=\"comment\">cglib动态代理：plane fly ...</span></span><br><span class=\"line\"><span class=\"comment\">plane fly ...</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"单例模式：Singleton\"><a href=\"#单例模式：Singleton\" class=\"headerlink\" title=\"单例模式：Singleton\"></a>单例模式：Singleton</h4><p>单例设计模式，顾名思义就是这个类的实例有且仅有一个。单例的实现中有很多方法，可以分为饿汉式（常用）和懒汉式。饿汉式天生线程安全，懒汉式需要加锁等使得线程安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、饿汉式单例：随着类的加载创建一个单例出来</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton1 INSTANCE = <span class=\"keyword\">new</span> Singleton1();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton1</span><span class=\"params\">()</span></span>&#123;&#125;  <span class=\"comment\">// 私有构造函数，防止外部创建实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton1 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、饿汉式单例：随着类的加载创建一个单例出来，这里使用静态代码块创建单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton2 INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        INSTANCE = <span class=\"keyword\">new</span> Singleton2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton2</span><span class=\"params\">()</span></span>&#123;&#125;  <span class=\"comment\">// 私有构造函数，防止外部创建实例</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton2 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、懒汉式单例，实例延迟加载，但是会造成线程安全问题</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton3 INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton3</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton3 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == INSTANCE)&#123;</span><br><span class=\"line\">            INSTANCE = <span class=\"keyword\">new</span> Singleton3();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4、懒汉式单例，实例延迟加载，使用synchronized加锁，同步方法，线程安全</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton4 INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton4</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton4 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == INSTANCE)&#123;</span><br><span class=\"line\">            INSTANCE = <span class=\"keyword\">new</span> Singleton4();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5、懒汉式单例，实例延迟加载，使用synchronized加锁（双重锁），同步方法，线程安全</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton5 INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton5</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton5 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == INSTANCE)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton5.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == INSTANCE) INSTANCE = <span class=\"keyword\">new</span> Singleton5();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 6、懒汉式单例，实例延迟加载，JVM加载 外部类 时不会加载 内部类，所以可以使用 静态内部类 来实现 懒汉式单例。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton6</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton6</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton6 INSTANCE = <span class=\"keyword\">new</span> Singleton6();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton6 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Singleton.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 7、懒汉式枚举单例，实例延迟加载，线程安全，还可以防止反序列化。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span>  Singleton7 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这是枚举单例的测试方法，枚举单例只需定义一个枚举值即可</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printHashCode</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(INSTANCE.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 8、解决单例模式的其他问题：1.反射强制实例化问题；2.反序列化问题</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton8</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton8 INSTANCE = <span class=\"keyword\">new</span> Singleton8();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton8</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(INSTANCE != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"不能强制实例化\"</span>);  <span class=\"comment\">// 解决反射强制实例化问题</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  <span class=\"comment\">// 私有构造函数，防止外部创建实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton8 <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;  <span class=\"comment\">// 解决反序列化问题</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"状态模式：State\"><a href=\"#状态模式：State\" class=\"headerlink\" title=\"状态模式：State\"></a>状态模式：State</h4><p>根据不同的状态，对同一动作会有不同的反应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 状态抽象类父类 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HappyState</span> <span class=\"keyword\">extends</span> <span class=\"title\">PersonState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"happy smile\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"happy cry\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"happy say\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PersonState state;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(PersonState state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">smile</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        state.smile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cry</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        state.cry();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        state.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* main方法 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StateMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person(<span class=\"keyword\">new</span> HappyState());</span><br><span class=\"line\">        p.smile();</span><br><span class=\"line\">        p.cry();</span><br><span class=\"line\">        p.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">[Student&#123;name='tianqi', age=20, weight=60, height=180&#125;, Student&#123;name='zhaoliu', age=19, weight=61, height=175&#125;, Student&#123;name='lisi', age=18, weight=62, height=178&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"模板模式（模板方法）：Template\"><a href=\"#模板模式（模板方法）：Template\" class=\"headerlink\" title=\"模板模式（模板方法）：Template\"></a>模板模式（模板方法）：Template</h4><p>在抽象的父类（模板）中，<br>定义了一个执行一系列方法的方法，<br>其中执行的一系列方法可以是抽象的也可以是实现的，<br>子类在继承父类后通过重写或者实现父类的方法，<br>实现模板执行</p>\n<p>钩子函数也可以是模板方法，<br>在模板中预留钩子，通过重写执行钩子方法，<br>模板方法也可以是回调函数，通过预留回调方法，通过重写执行回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTemplate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        op1();</span><br><span class=\"line\">        op2();</span><br><span class=\"line\">        op3();</span><br><span class=\"line\">        op4();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyTemplate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">op1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"op1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"op2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">op4</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"op4\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TemplateMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyTemplate tple = <span class=\"keyword\">new</span> DoTemplate();</span><br><span class=\"line\">        tple.doTemplate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">op1</span></span><br><span class=\"line\"><span class=\"comment\">op2</span></span><br><span class=\"line\"><span class=\"comment\">op4</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<ul>\n<li><h4 id=\"访问者模式：Visitor\"><a href=\"#访问者模式：Visitor\" class=\"headerlink\" title=\"访问者模式：Visitor\"></a>访问者模式：Visitor</h4><p>在结构不变的情况下动态改变对于内部元素的动作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visitCpu</span><span class=\"params\">(CPU cpu)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visitMemory</span><span class=\"params\">(Memory memory)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visitBord</span><span class=\"params\">(Bord bord)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor v)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CPU</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComputerPart</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CPU</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = <span class=\"number\">1000.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CPU</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor v)</span> </span>&#123;</span><br><span class=\"line\">        v.visitCpu(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memory</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Memory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = <span class=\"number\">400.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Memory</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor v)</span> </span>&#123;</span><br><span class=\"line\">        v.visitMemory(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bord</span> <span class=\"keyword\">extends</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Bord</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = <span class=\"number\">600.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Bord</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor v)</span> </span>&#123;</span><br><span class=\"line\">        v.visitBord(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> price)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> totalPrice = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visitCpu</span><span class=\"params\">(CPU cpu)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPrice = totalPrice + (cpu.getPrice() * <span class=\"number\">0.9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visitMemory</span><span class=\"params\">(Memory memory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPrice = totalPrice + (memory.getPrice() * <span class=\"number\">0.85</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visitBord</span><span class=\"params\">(Bord bord)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPrice = totalPrice + (bord.getPrice() * <span class=\"number\">0.95</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getTotalPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CPU cpu;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Memory memory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bord bord;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cpu = <span class=\"keyword\">new</span> CPU();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memory = <span class=\"keyword\">new</span> Memory();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bord = <span class=\"keyword\">new</span> Bord();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">(<span class=\"keyword\">double</span> cpuPrice, <span class=\"keyword\">double</span> memoryPrice, <span class=\"keyword\">double</span> bordPrice)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cpu = <span class=\"keyword\">new</span> CPU(cpuPrice);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memory = <span class=\"keyword\">new</span> Memory(memoryPrice);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bord = <span class=\"keyword\">new</span> Bord(bordPrice);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Visitor v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cpu.accept(v);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memory.accept(v);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bord.accept(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VisitorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Computer computer = <span class=\"keyword\">new</span> Computer(<span class=\"number\">1068.88</span>, <span class=\"number\">868.99</span>, <span class=\"number\">488.99</span>);</span><br><span class=\"line\">        PersonVisitor personVisitor = <span class=\"keyword\">new</span> PersonVisitor();</span><br><span class=\"line\">        computer.accept(personVisitor);</span><br><span class=\"line\">        System.out.println(personVisitor.getTotalPrice());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">结果：</span></span><br><span class=\"line\"><span class=\"comment\">电脑价格：2165.174</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<hr>\n<h3 id=\"常用的设计模式大概就是这些了\"><a href=\"#常用的设计模式大概就是这些了\" class=\"headerlink\" title=\"常用的设计模式大概就是这些了~\"></a>常用的设计模式大概就是这些了<del>~</del></h3><blockquote>\n<h4 id=\"谢谢浏览！END\"><a href=\"#谢谢浏览！END\" class=\"headerlink\" title=\"谢谢浏览！END~\"></a>谢谢浏览！END~</h4></blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/上传项目到github/上传项目到github1.png","post":"ckhtae7bc000jggvku6zyo9hk","slug":"上传项目到github1.png","modified":1,"renderable":1},{"_id":"source/_posts/mongodb常用的数据库操作命令/options.png","post":"ckhtae7be000lggvk1svu9yu7","slug":"options.png","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo搭建个人博客并部署到github/github1.png","slug":"github1.png","post":"ckhtae7bf000mggvkosu3vk2z","modified":1,"renderable":0},{"_id":"source/_posts/使用hexo搭建个人博客并部署到github/github2.png","post":"ckhtae7bf000mggvkosu3vk2z","slug":"github2.png","modified":1,"renderable":1},{"_id":"source/_posts/markdown语法编写博客文章/bz16.jpg","slug":"bz16.jpg","post":"ckhtae7h7001jggvku3qh5wke","modified":1,"renderable":0},{"_id":"source/_posts/markdown语法编写博客文章/流程图.png","post":"ckhtae7h7001jggvku3qh5wke","slug":"流程图.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckhtae7ae0000ggvko5fn2xae","tag_id":"ckhtae7ap0002ggvkzi9rjx42","_id":"ckhtae7ax0007ggvk9zdyld1j"},{"post_id":"ckhtae7an0001ggvkeelr6vns","tag_id":"ckhtae7aw0006ggvke8omi5tv","_id":"ckhtae7b6000cggvkboq3xpr5"},{"post_id":"ckhtae7ar0003ggvktcn07v5x","tag_id":"ckhtae7b4000aggvk0tu6f0ml","_id":"ckhtae7b9000gggvkqgyigrdb"},{"post_id":"ckhtae7at0004ggvkk0do79bz","tag_id":"ckhtae7b8000eggvknmd5fzmu","_id":"ckhtae7bd000kggvkztf408f1"},{"post_id":"ckhtae7av0005ggvkcr4ee01h","tag_id":"ckhtae7bb000iggvkc133adqo","_id":"ckhtae7bh000oggvka68ma6tx"},{"post_id":"ckhtae7bi000pggvk82o8yxuz","tag_id":"ckhtae7b4000aggvk0tu6f0ml","_id":"ckhtae7bk000sggvkwfneuo0n"},{"post_id":"ckhtae7ax0008ggvkpbznfbtg","tag_id":"ckhtae7bb000iggvkc133adqo","_id":"ckhtae7bm000uggvkkfcigsqf"},{"post_id":"ckhtae7b30009ggvkx929bzs9","tag_id":"ckhtae7bb000iggvkc133adqo","_id":"ckhtae7bo000xggvk8l6jx6w3"},{"post_id":"ckhtae7bm000vggvkbk46099q","tag_id":"ckhtae7bb000iggvkc133adqo","_id":"ckhtae7bo000yggvk2f9xki1u"},{"post_id":"ckhtae7b5000bggvkfxsfkbj8","tag_id":"ckhtae7bb000iggvkc133adqo","_id":"ckhtae7bp0010ggvk555e9560"},{"post_id":"ckhtae7b7000dggvk4fus3c3b","tag_id":"ckhtae7b8000eggvknmd5fzmu","_id":"ckhtae7bq0012ggvksz4vipwp"},{"post_id":"ckhtae7b8000fggvkjyguve7l","tag_id":"ckhtae7bp0011ggvkbpa0q8s0","_id":"ckhtae7br0014ggvkh5p5qel9"},{"post_id":"ckhtae7ba000hggvk533wsqyq","tag_id":"ckhtae7bp0011ggvkbpa0q8s0","_id":"ckhtae7bs0016ggvkpxelaaae"},{"post_id":"ckhtae7bc000jggvku6zyo9hk","tag_id":"ckhtae7br0015ggvk092cbgwv","_id":"ckhtae7bs0018ggvkquhi2751"},{"post_id":"ckhtae7be000lggvk1svu9yu7","tag_id":"ckhtae7bs0017ggvkcqkdsjom","_id":"ckhtae7bu001bggvkgsqj3bt1"},{"post_id":"ckhtae7be000lggvk1svu9yu7","tag_id":"ckhtae7bt0019ggvkb4kn80uo","_id":"ckhtae7bu001cggvkyn0ajt0f"},{"post_id":"ckhtae7bf000mggvkosu3vk2z","tag_id":"ckhtae7bt001aggvkn9h46o1g","_id":"ckhtae7bv001eggvkz90qvayj"},{"post_id":"ckhtae7bj000qggvke1nagwe0","tag_id":"ckhtae7bu001dggvkrkjtf3fb","_id":"ckhtae7bv001gggvkuxlmgdrl"},{"post_id":"ckhtae7bl000tggvkhgafvmo9","tag_id":"ckhtae7bv001fggvkk4vc9kuq","_id":"ckhtae7bw001hggvkgzgtdbzv"},{"post_id":"ckhtae7h6001iggvkj20v47rr","tag_id":"ckhtae7br0015ggvk092cbgwv","_id":"ckhtae7h9001kggvk8quqaxak"},{"post_id":"ckhtae7h7001jggvku3qh5wke","tag_id":"ckhtae7bt001aggvkn9h46o1g","_id":"ckhtae7hb001mggvkltvur4t0"},{"post_id":"ckhtae7h7001jggvku3qh5wke","tag_id":"ckhtae7h9001lggvkvqe6n8tm","_id":"ckhtae7hc001nggvkip9pvko2"},{"post_id":"ckhtae7rm001oggvk4qjdl6a4","tag_id":"ckhtae7rn001pggvk5bwz3x71","_id":"ckhtae7ro001qggvk4hgae5f4"}],"Tag":[{"name":"About","_id":"ckhtae7ap0002ggvkzi9rjx42"},{"name":"其他","_id":"ckhtae7aw0006ggvke8omi5tv"},{"name":"python","_id":"ckhtae7b4000aggvk0tu6f0ml"},{"name":"javaScript","_id":"ckhtae7b8000eggvknmd5fzmu"},{"name":"RDBMS","_id":"ckhtae7bb000iggvkc133adqo"},{"name":"linux","_id":"ckhtae7bp0011ggvkbpa0q8s0"},{"name":"git","_id":"ckhtae7br0015ggvk092cbgwv"},{"name":"mongodb","_id":"ckhtae7bs0017ggvkcqkdsjom"},{"name":"nodejs","_id":"ckhtae7bt0019ggvkb4kn80uo"},{"name":"Hexo","_id":"ckhtae7bt001aggvkn9h46o1g"},{"name":"计算机网络","_id":"ckhtae7bu001dggvkrkjtf3fb"},{"name":"读书笔记","_id":"ckhtae7bv001fggvkk4vc9kuq"},{"name":"markdown","_id":"ckhtae7h9001lggvkvqe6n8tm"},{"name":"设计模式","_id":"ckhtae7rn001pggvk5bwz3x71"}]}}